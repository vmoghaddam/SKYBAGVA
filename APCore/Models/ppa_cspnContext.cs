using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace APCore.Models
{
    public partial class ppa_cspnContext : DbContext
    {
        public ppa_cspnContext()
        {
        }

        public ppa_cspnContext(DbContextOptions<ppa_cspnContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AbcTest> AbcTests { get; set; }
        public virtual DbSet<Ac_MSN> Ac_MSNs { get; set; }
        public virtual DbSet<Aircraft> Aircraft { get; set; }
        public virtual DbSet<AircraftModel> AircraftModels { get; set; }
        public virtual DbSet<AircraftType> AircraftTypes { get; set; }
        public virtual DbSet<Airport> Airports { get; set; }
        public virtual DbSet<AirportOpenFlight> AirportOpenFlights { get; set; }
        public virtual DbSet<AppCertificate> AppCertificates { get; set; }
        public virtual DbSet<AppCrew> AppCrews { get; set; }
        public virtual DbSet<AppCrewFlight> AppCrewFlights { get; set; }
        public virtual DbSet<AppCrewTime> AppCrewTimes { get; set; }
        public virtual DbSet<AppFDPRest> AppFDPRests { get; set; }
        public virtual DbSet<AppFTL> AppFTLs { get; set; }
        public virtual DbSet<AppFTLAb> AppFTLAbs { get; set; }
        public virtual DbSet<AppFuel> AppFuels { get; set; }
        public virtual DbSet<AppJL> AppJLs { get; set; }
        public virtual DbSet<AppLeg> AppLegs { get; set; }
        public virtual DbSet<AppLegHelper> AppLegHelpers { get; set; }
        public virtual DbSet<AppLegJLHelper> AppLegJLHelpers { get; set; }
        public virtual DbSet<AppLegOP> AppLegOPs { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<Author> Authors { get; set; }
        public virtual DbSet<AvgFlight> AvgFlights { get; set; }
        public virtual DbSet<BL> BLs { get; set; }
        public virtual DbSet<Book> Books { get; set; }
        public virtual DbSet<BookAutor> BookAutors { get; set; }
        public virtual DbSet<BookChapter> BookChapters { get; set; }
        public virtual DbSet<BookFile> BookFiles { get; set; }
        public virtual DbSet<BookFileVisit> BookFileVisits { get; set; }
        public virtual DbSet<BookKeyword> BookKeywords { get; set; }
        public virtual DbSet<BookRelatedAircraftType> BookRelatedAircraftTypes { get; set; }
        public virtual DbSet<BookRelatedEmployee> BookRelatedEmployees { get; set; }
        public virtual DbSet<BookRelatedGroup> BookRelatedGroups { get; set; }
        public virtual DbSet<BookRelatedStudyField> BookRelatedStudyFields { get; set; }
        public virtual DbSet<BookSigned> BookSigneds { get; set; }
        public virtual DbSet<Box> Boxes { get; set; }
        public virtual DbSet<BoxCrew> BoxCrews { get; set; }
        public virtual DbSet<BoxFlightPlanItem> BoxFlightPlanItems { get; set; }
        public virtual DbSet<BoxItem> BoxItems { get; set; }
        public virtual DbSet<CaoBasic> CaoBasics { get; set; }
        public virtual DbSet<CaoBasicLicenseType> CaoBasicLicenseTypes { get; set; }
        public virtual DbSet<CaoBasicType> CaoBasicTypes { get; set; }
        public virtual DbSet<CaoCategory> CaoCategories { get; set; }
        public virtual DbSet<CaoType> CaoTypes { get; set; }
        public virtual DbSet<CateringItem> CateringItems { get; set; }
        public virtual DbSet<CateringItemCode> CateringItemCodes { get; set; }
        public virtual DbSet<CertificateType> CertificateTypes { get; set; }
        public virtual DbSet<Certification> Certifications { get; set; }
        public virtual DbSet<Chapter> Chapters { get; set; }
        public virtual DbSet<Charterer> Charterers { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<ClaimRemark> ClaimRemarks { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Coord> Coords { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CourseAircraftType> CourseAircraftTypes { get; set; }
        public virtual DbSet<CourseCatRate> CourseCatRates { get; set; }
        public virtual DbSet<CourseCategory> CourseCategories { get; set; }
        public virtual DbSet<CoursePerson> CoursePeople { get; set; }
        public virtual DbSet<CourseRelatedAircraftType> CourseRelatedAircraftTypes { get; set; }
        public virtual DbSet<CourseRelatedCourse> CourseRelatedCourses { get; set; }
        public virtual DbSet<CourseRelatedCourseType> CourseRelatedCourseTypes { get; set; }
        public virtual DbSet<CourseRelatedEmployee> CourseRelatedEmployees { get; set; }
        public virtual DbSet<CourseRelatedGroup> CourseRelatedGroups { get; set; }
        public virtual DbSet<CourseRelatedStudyField> CourseRelatedStudyFields { get; set; }
        public virtual DbSet<CourseSMSHistory> CourseSMSHistories { get; set; }
        public virtual DbSet<CourseSession> CourseSessions { get; set; }
        public virtual DbSet<CourseSessionFDP> CourseSessionFDPs { get; set; }
        public virtual DbSet<CourseSessionPresence> CourseSessionPresences { get; set; }
        public virtual DbSet<CourseSessionPresenceDetail> CourseSessionPresenceDetails { get; set; }
        public virtual DbSet<CourseType> CourseTypes { get; set; }
        public virtual DbSet<CourseTypeJobGroup> CourseTypeJobGroups { get; set; }
        public virtual DbSet<CrewAvailability> CrewAvailabilities { get; set; }
        public virtual DbSet<CrewAvailabilityStatus> CrewAvailabilityStatuses { get; set; }
        public virtual DbSet<CrewPickupSM> CrewPickupSMs { get; set; }
        public virtual DbSet<CrewSecretCode> CrewSecretCodes { get; set; }
        public virtual DbSet<CrewTypeRequirement> CrewTypeRequirements { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Day> Days { get; set; }
        public virtual DbSet<DayFlight> DayFlights { get; set; }
        public virtual DbSet<DayGP> DayGPs { get; set; }
        public virtual DbSet<DelayAvgByAirport> DelayAvgByAirports { get; set; }
        public virtual DbSet<DelayAvgByAirportCategory> DelayAvgByAirportCategories { get; set; }
        public virtual DbSet<DelayAvgByCategory> DelayAvgByCategories { get; set; }
        public virtual DbSet<DelayAvgByRegister> DelayAvgByRegisters { get; set; }
        public virtual DbSet<DelayAvgByRegisterCategory> DelayAvgByRegisterCategories { get; set; }
        public virtual DbSet<DelayCode> DelayCodes { get; set; }
        public virtual DbSet<DelayCodeCategory> DelayCodeCategories { get; set; }
        public virtual DbSet<DelayNotified> DelayNotifieds { get; set; }
        public virtual DbSet<DlyGrp> DlyGrps { get; set; }
        public virtual DbSet<DlyGrpAirport> DlyGrpAirports { get; set; }
        public virtual DbSet<DlyGrpAirportAb> DlyGrpAirportAbs { get; set; }
        public virtual DbSet<DlyGrpAirportCat> DlyGrpAirportCats { get; set; }
        public virtual DbSet<DlyGrpAirportDaily> DlyGrpAirportDailies { get; set; }
        public virtual DbSet<DlyGrpAll> DlyGrpAlls { get; set; }
        public virtual DbSet<DlyGrpCat> DlyGrpCats { get; set; }
        public virtual DbSet<DlyGrpCatAirportDaily> DlyGrpCatAirportDailies { get; set; }
        public virtual DbSet<DlyGrpCatDaily> DlyGrpCatDailies { get; set; }
        public virtual DbSet<DlyGrpCatRegister> DlyGrpCatRegisters { get; set; }
        public virtual DbSet<DlyGrpCatRegisterDaily> DlyGrpCatRegisterDailies { get; set; }
        public virtual DbSet<DlyGrpDaily> DlyGrpDailies { get; set; }
        public virtual DbSet<DlyGrpFlight> DlyGrpFlights { get; set; }
        public virtual DbSet<DlyGrpFlightAirport> DlyGrpFlightAirports { get; set; }
        public virtual DbSet<DlyGrpFlightCat> DlyGrpFlightCats { get; set; }
        public virtual DbSet<DlyGrpFlightCatAirport> DlyGrpFlightCatAirports { get; set; }
        public virtual DbSet<DlyGrpFlightCatRegister> DlyGrpFlightCatRegisters { get; set; }
        public virtual DbSet<Doc> Docs { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<EFBASR> EFBASRs { get; set; }
        public virtual DbSet<EFBBirdStrikeCAO> EFBBirdStrikeCAOs { get; set; }
        public virtual DbSet<EFBConfidentialReport> EFBConfidentialReports { get; set; }
        public virtual DbSet<EFBDSPRelease> EFBDSPReleases { get; set; }
        public virtual DbSet<EFBFlightIrregularity> EFBFlightIrregularities { get; set; }
        public virtual DbSet<EFBOccurrenceCAO> EFBOccurrenceCAOs { get; set; }
        public virtual DbSet<EFBReason> EFBReasons { get; set; }
        public virtual DbSet<EFBVoyageReport> EFBVoyageReports { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeBookStatus> EmployeeBookStatuses { get; set; }
        public virtual DbSet<EmployeeCalendar> EmployeeCalendars { get; set; }
        public virtual DbSet<EmployeeCalendarSplited> EmployeeCalendarSpliteds { get; set; }
        public virtual DbSet<EmployeeLocation> EmployeeLocations { get; set; }
        public virtual DbSet<ExpFlight> ExpFlights { get; set; }
        public virtual DbSet<ExtIdea> ExtIdeas { get; set; }
        public virtual DbSet<Extension> Extensions { get; set; }
        public virtual DbSet<ExtensionHistory> ExtensionHistories { get; set; }
        public virtual DbSet<FDM> FDMs { get; set; }
        public virtual DbSet<FDMView> FDMViews { get; set; }
        public virtual DbSet<FDP> FDPs { get; set; }
        public virtual DbSet<FDPExtra> FDPExtras { get; set; }
        public virtual DbSet<FDPItem> FDPItems { get; set; }
        public virtual DbSet<FDPLog> FDPLogs { get; set; }
        public virtual DbSet<FDPMaxDaily> FDPMaxDailies { get; set; }
        public virtual DbSet<FDPVisibleDate> FDPVisibleDates { get; set; }
        public virtual DbSet<FLTGroup> FLTGroups { get; set; }
        public virtual DbSet<FLTGroupItem> FLTGroupItems { get; set; }
        public virtual DbSet<FMISFLT> FMISFLTs { get; set; }
        public virtual DbSet<FMISLEG> FMISLEGs { get; set; }
        public virtual DbSet<FMISLEGASSIGN> FMISLEGASSIGNs { get; set; }
        public virtual DbSet<FTLFlightTime> FTLFlightTimes { get; set; }
        public virtual DbSet<FTLFlightTimeActual> FTLFlightTimeActuals { get; set; }
        public virtual DbSet<FTLFlightTimeActualDaily> FTLFlightTimeActualDailies { get; set; }
        public virtual DbSet<FTLFlightTimeRatioMonthly> FTLFlightTimeRatioMonthlies { get; set; }
        public virtual DbSet<FTLFlightTimeRatioTotal> FTLFlightTimeRatioTotals { get; set; }
        public virtual DbSet<FTLSummary> FTLSummaries { get; set; }
        public virtual DbSet<FileType> FileTypes { get; set; }
        public virtual DbSet<FixTimeRoute> FixTimeRoutes { get; set; }
        public virtual DbSet<FixTimeRouteHistory> FixTimeRouteHistories { get; set; }
        public virtual DbSet<FlighPlanCalendar> FlighPlanCalendars { get; set; }
        public virtual DbSet<FlightCard> FlightCards { get; set; }
        public virtual DbSet<FlightChangeHistory> FlightChangeHistories { get; set; }
        public virtual DbSet<FlightCrew> FlightCrews { get; set; }
        public virtual DbSet<FlightCrewArchived> FlightCrewArchiveds { get; set; }
        public virtual DbSet<FlightCrewChangeHistory> FlightCrewChangeHistories { get; set; }
        public virtual DbSet<FlightDatePart> FlightDateParts { get; set; }
        public virtual DbSet<FlightDelay> FlightDelays { get; set; }
        public virtual DbSet<FlightExtra> FlightExtras { get; set; }
        public virtual DbSet<FlightGroup> FlightGroups { get; set; }
        public virtual DbSet<FlightInformation> FlightInformations { get; set; }
        public virtual DbSet<FlightLink> FlightLinks { get; set; }
        public virtual DbSet<FlightPermit> FlightPermits { get; set; }
        public virtual DbSet<FlightPlan> FlightPlans { get; set; }
        public virtual DbSet<FlightPlanCalanderCrew> FlightPlanCalanderCrews { get; set; }
        public virtual DbSet<FlightPlanDay> FlightPlanDays { get; set; }
        public virtual DbSet<FlightPlanGroup> FlightPlanGroups { get; set; }
        public virtual DbSet<FlightPlanItem> FlightPlanItems { get; set; }
        public virtual DbSet<FlightPlanItemPermit> FlightPlanItemPermits { get; set; }
        public virtual DbSet<FlightPlanMonth> FlightPlanMonths { get; set; }
        public virtual DbSet<FlightPlanRegister> FlightPlanRegisters { get; set; }
        public virtual DbSet<FlightPlanStatus> FlightPlanStatuses { get; set; }
        public virtual DbSet<FlightRegisterChangeLog> FlightRegisterChangeLogs { get; set; }
        public virtual DbSet<FlightRoute> FlightRoutes { get; set; }
        public virtual DbSet<FlightStatus> FlightStatuses { get; set; }
        public virtual DbSet<FlightStatusLog> FlightStatusLogs { get; set; }
        public virtual DbSet<FlightStatusWeather> FlightStatusWeathers { get; set; }
        public virtual DbSet<FlightTemplate> FlightTemplates { get; set; }
        public virtual DbSet<FlightUploadHistory> FlightUploadHistories { get; set; }
        public virtual DbSet<FormVacation> FormVacations { get; set; }
        public virtual DbSet<FuelAvg> FuelAvgs { get; set; }
        public virtual DbSet<FuelAvgReg> FuelAvgRegs { get; set; }
        public virtual DbSet<GRPCourseTypeExpiring> GRPCourseTypeExpirings { get; set; }
        public virtual DbSet<GRPCourseTypeExpiringGroup> GRPCourseTypeExpiringGroups { get; set; }
        public virtual DbSet<GRPCourseTypeExpiringMainGroup> GRPCourseTypeExpiringMainGroups { get; set; }
        public virtual DbSet<GRPGroupsCourseTypeExpiring> GRPGroupsCourseTypeExpirings { get; set; }
        public virtual DbSet<GRPGroupsExpiring> GRPGroupsExpirings { get; set; }
        public virtual DbSet<GRPMainGroupsExpiring> GRPMainGroupsExpirings { get; set; }
        public virtual DbSet<G_DelayCode> G_DelayCodes { get; set; }
        public virtual DbSet<G_OpOneDelayType> G_OpOneDelayTypes { get; set; }
        public virtual DbSet<GrpAirport> GrpAirports { get; set; }
        public virtual DbSet<GrpDelayCategory> GrpDelayCategories { get; set; }
        public virtual DbSet<GrpFlight> GrpFlights { get; set; }
        public virtual DbSet<GrpFlightAirport> GrpFlightAirports { get; set; }
        public virtual DbSet<GrpFlightAirportDaily> GrpFlightAirportDailies { get; set; }
        public virtual DbSet<GrpFlightCal> GrpFlightCals { get; set; }
        public virtual DbSet<GrpFlightDaily> GrpFlightDailies { get; set; }
        public virtual DbSet<GrpFlightReg> GrpFlightRegs { get; set; }
        public virtual DbSet<GrpSessionAttendance> GrpSessionAttendances { get; set; }
        public virtual DbSet<HelperAirportFlight> HelperAirportFlights { get; set; }
        public virtual DbSet<HelperApplicableCourse> HelperApplicableCourses { get; set; }
        public virtual DbSet<HelperBook> HelperBooks { get; set; }
        public virtual DbSet<HelperBookApplicableEmployee> HelperBookApplicableEmployees { get; set; }
        public virtual DbSet<HelperBookApplicableEmployeeStatus> HelperBookApplicableEmployeeStatuses { get; set; }
        public virtual DbSet<HelperBookVisited> HelperBookVisiteds { get; set; }
        public virtual DbSet<HelperBox> HelperBoxes { get; set; }
        public virtual DbSet<HelperBoxCrew> HelperBoxCrews { get; set; }
        public virtual DbSet<HelperBoxCrewTime> HelperBoxCrewTimes { get; set; }
        public virtual DbSet<HelperBoxFlightPlanItem> HelperBoxFlightPlanItems { get; set; }
        public virtual DbSet<HelperBoxSector> HelperBoxSectors { get; set; }
        public virtual DbSet<HelperBoxTime> HelperBoxTimes { get; set; }
        public virtual DbSet<HelperCalanderAssignedRegister> HelperCalanderAssignedRegisters { get; set; }
        public virtual DbSet<HelperCalendarDate> HelperCalendarDates { get; set; }
        public virtual DbSet<HelperCertAVSEC> HelperCertAVSECs { get; set; }
        public virtual DbSet<HelperCertCCRM> HelperCertCCRMs { get; set; }
        public virtual DbSet<HelperCertCMC> HelperCertCMCs { get; set; }
        public virtual DbSet<HelperCertCOLDWX> HelperCertCOLDWXes { get; set; }
        public virtual DbSet<HelperCertCRM> HelperCertCRMs { get; set; }
        public virtual DbSet<HelperCertDG> HelperCertDGs { get; set; }
        public virtual DbSet<HelperCertFIRSTAID> HelperCertFIRSTAIDs { get; set; }
        public virtual DbSet<HelperCertHOTWX> HelperCertHOTWXes { get; set; }
        public virtual DbSet<HelperCertLICENSE> HelperCertLICENSEs { get; set; }
        public virtual DbSet<HelperCertLINE> HelperCertLINEs { get; set; }
        public virtual DbSet<HelperCertLPC> HelperCertLPCs { get; set; }
        public virtual DbSet<HelperCertLPR> HelperCertLPRs { get; set; }
        public virtual DbSet<HelperCertMEDICAL> HelperCertMEDICALs { get; set; }
        public virtual DbSet<HelperCertOPC> HelperCertOPCs { get; set; }
        public virtual DbSet<HelperCertRECURRENT> HelperCertRECURRENTs { get; set; }
        public virtual DbSet<HelperCertSEPTP> HelperCertSEPTPs { get; set; }
        public virtual DbSet<HelperCertSEPTT> HelperCertSEPTTs { get; set; }
        public virtual DbSet<HelperCertSM> HelperCertSMs { get; set; }
        public virtual DbSet<HelperCertTRE> HelperCertTREs { get; set; }
        public virtual DbSet<HelperCertTRI> HelperCertTRIs { get; set; }
        public virtual DbSet<HelperCertificate> HelperCertificates { get; set; }
        public virtual DbSet<HelperCourse> HelperCourses { get; set; }
        public virtual DbSet<HelperCrewTime> HelperCrewTimes { get; set; }
        public virtual DbSet<HelperCrewTimeSubQuery> HelperCrewTimeSubQueries { get; set; }
        public virtual DbSet<HelperCurrentLocation> HelperCurrentLocations { get; set; }
        public virtual DbSet<HelperDay> HelperDays { get; set; }
        public virtual DbSet<HelperDelayAirportDaily> HelperDelayAirportDailies { get; set; }
        public virtual DbSet<HelperDelayAirportMonthly> HelperDelayAirportMonthlies { get; set; }
        public virtual DbSet<HelperDelayAllMonthly> HelperDelayAllMonthlies { get; set; }
        public virtual DbSet<HelperDelayCatAirportDaily> HelperDelayCatAirportDailies { get; set; }
        public virtual DbSet<HelperDelayCatAirportMonthly> HelperDelayCatAirportMonthlies { get; set; }
        public virtual DbSet<HelperDelayCatDaily> HelperDelayCatDailies { get; set; }
        public virtual DbSet<HelperDelayCatMonthly> HelperDelayCatMonthlies { get; set; }
        public virtual DbSet<HelperDelayCatRegisterDaily> HelperDelayCatRegisterDailies { get; set; }
        public virtual DbSet<HelperDelayCatRegisterMonthly> HelperDelayCatRegisterMonthlies { get; set; }
        public virtual DbSet<HelperDelayDaily> HelperDelayDailies { get; set; }
        public virtual DbSet<HelperDelayMonthly> HelperDelayMonthlies { get; set; }
        public virtual DbSet<HelperDutyCalendar> HelperDutyCalendars { get; set; }
        public virtual DbSet<HelperDutyStart> HelperDutyStarts { get; set; }
        public virtual DbSet<HelperEmployee> HelperEmployees { get; set; }
        public virtual DbSet<HelperEmployeeName> HelperEmployeeNames { get; set; }
        public virtual DbSet<HelperFDP> HelperFDPs { get; set; }
        public virtual DbSet<HelperFDPBox> HelperFDPBoxes { get; set; }
        public virtual DbSet<HelperFDPDate> HelperFDPDates { get; set; }
        public virtual DbSet<HelperFDPFirst> HelperFDPFirsts { get; set; }
        public virtual DbSet<HelperFDPItem> HelperFDPItems { get; set; }
        public virtual DbSet<HelperFDPItemNODH> HelperFDPItemNODHs { get; set; }
        public virtual DbSet<HelperFDPItemSex> HelperFDPItemSexes { get; set; }
        public virtual DbSet<HelperFDPRanked> HelperFDPRankeds { get; set; }
        public virtual DbSet<HelperFDPRest> HelperFDPRests { get; set; }
        public virtual DbSet<HelperFDPTemplateMFError> HelperFDPTemplateMFErrors { get; set; }
        public virtual DbSet<HelperFixTimeRoute> HelperFixTimeRoutes { get; set; }
        public virtual DbSet<HelperFlightCrewMatchingList> HelperFlightCrewMatchingLists { get; set; }
        public virtual DbSet<HelperFlightCrewSum> HelperFlightCrewSums { get; set; }
        public virtual DbSet<HelperFlightLink> HelperFlightLinks { get; set; }
        public virtual DbSet<HelperFlightMovement> HelperFlightMovements { get; set; }
        public virtual DbSet<HelperFlightPlanItem> HelperFlightPlanItems { get; set; }
        public virtual DbSet<HelperFlightPlanItemCrew> HelperFlightPlanItemCrews { get; set; }
        public virtual DbSet<HelperFlightPlanRegister> HelperFlightPlanRegisters { get; set; }
        public virtual DbSet<HelperFlightPlanRegisterAssigned> HelperFlightPlanRegisterAssigneds { get; set; }
        public virtual DbSet<HelperFlightPlanType> HelperFlightPlanTypes { get; set; }
        public virtual DbSet<HelperFlightSexSum> HelperFlightSexSums { get; set; }
        public virtual DbSet<HelperFuelAVG> HelperFuelAVGs { get; set; }
        public virtual DbSet<HelperFuelAvgReg> HelperFuelAvgRegs { get; set; }
        public virtual DbSet<HelperFuelMonthly> HelperFuelMonthlies { get; set; }
        public virtual DbSet<HelperFuelMonthlyDay> HelperFuelMonthlyDays { get; set; }
        public virtual DbSet<HelperFuelMonthlyReg> HelperFuelMonthlyRegs { get; set; }
        public virtual DbSet<HelperFuelMonthlyRoute> HelperFuelMonthlyRoutes { get; set; }
        public virtual DbSet<HelperFuelMonthlyType> HelperFuelMonthlyTypes { get; set; }
        public virtual DbSet<HelperGrpFlight> HelperGrpFlights { get; set; }
        public virtual DbSet<HelperIdeaUnique> HelperIdeaUniques { get; set; }
        public virtual DbSet<HelperLayOver> HelperLayOvers { get; set; }
        public virtual DbSet<HelperLayOverRanked> HelperLayOverRankeds { get; set; }
        public virtual DbSet<HelperLayOverSource> HelperLayOverSources { get; set; }
        public virtual DbSet<HelperMSN> HelperMSNs { get; set; }
        public virtual DbSet<HelperMatchingList> HelperMatchingLists { get; set; }
        public virtual DbSet<HelperMaxFDP> HelperMaxFDPs { get; set; }
        public virtual DbSet<HelperPerson> HelperPeople { get; set; }
        public virtual DbSet<HelperPersonModified> HelperPersonModifieds { get; set; }
        public virtual DbSet<HelperRealMSN> HelperRealMSNs { get; set; }
        public virtual DbSet<HelperRestPeriod> HelperRestPeriods { get; set; }
        public virtual DbSet<HelperUsedAirport> HelperUsedAirports { get; set; }
        public virtual DbSet<IDEAPEOPLE2> IDEAPEOPLE2s { get; set; }
        public virtual DbSet<IDEAPerson> IDEAPEOPLEs { get; set; }
        public virtual DbSet<IMPORT2020> IMPORT2020s { get; set; }
        public virtual DbSet<IPAccess> IPAccesses { get; set; }
        public virtual DbSet<Idea> Ideas { get; set; }
        public virtual DbSet<IdeaAll> IdeaAlls { get; set; }
        public virtual DbSet<IdeaSession> IdeaSessions { get; set; }
        public virtual DbSet<IdeaSessionItem> IdeaSessionItems { get; set; }
        public virtual DbSet<IdeaSessionItemTemp> IdeaSessionItemTemps { get; set; }
        public virtual DbSet<IdeaSessionTemp> IdeaSessionTemps { get; set; }
        public virtual DbSet<IdeaSessionUpdateError> IdeaSessionUpdateErrors { get; set; }
        public virtual DbSet<IdeaUnique> IdeaUniques { get; set; }
        public virtual DbSet<IdxFDPItem> IdxFDPItems { get; set; }
        public virtual DbSet<ImportPlan> ImportPlans { get; set; }
        public virtual DbSet<IrimoFlightFolderHistory> IrimoFlightFolderHistories { get; set; }
        public virtual DbSet<JobGroup> JobGroups { get; set; }
        public virtual DbSet<Journal> Journals { get; set; }
        public virtual DbSet<LibraryFolder> LibraryFolders { get; set; }
        public virtual DbSet<LicenseResultBasic> LicenseResultBasics { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<LogProp> LogProps { get; set; }
        public virtual DbSet<LoginInfo> LoginInfos { get; set; }
        public virtual DbSet<MBAircraftIndex> MBAircraftIndices { get; set; }
        public virtual DbSet<MBFuelIndex> MBFuelIndices { get; set; }
        public virtual DbSet<MBPantryIndex> MBPantryIndices { get; set; }
        public virtual DbSet<MBStabTrim> MBStabTrims { get; set; }
        public virtual DbSet<MV> MVs { get; set; }
        public virtual DbSet<MVT> MVTs { get; set; }
        public virtual DbSet<MVTAPI> MVTAPIs { get; set; }
        public virtual DbSet<MainType> MainTypes { get; set; }
        public virtual DbSet<MapDelayRemark> MapDelayRemarks { get; set; }
        public virtual DbSet<MatchingList> MatchingLists { get; set; }
        public virtual DbSet<MonthGP> MonthGPs { get; set; }
        public virtual DbSet<MonthGPG> MonthGPGs { get; set; }
        public virtual DbSet<NBL> NBLs { get; set; }
        public virtual DbSet<NOTAM> NOTAMs { get; set; }
        public virtual DbSet<NOTAMItem> NOTAMItems { get; set; }
        public virtual DbSet<NiraHistory> NiraHistories { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<NotificationGroup> NotificationGroups { get; set; }
        public virtual DbSet<OFPImport> OFPImports { get; set; }
        public virtual DbSet<OFPImportItem> OFPImportItems { get; set; }
        public virtual DbSet<OFPImportProp> OFPImportProps { get; set; }
        public virtual DbSet<OFPSkyPuter> OFPSkyPuters { get; set; }
        public virtual DbSet<OffItem> OffItems { get; set; }
        public virtual DbSet<OpsCrewPhone> OpsCrewPhones { get; set; }
        public virtual DbSet<Option> Options { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<PLUPD> PLUPDs { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<PersonAircraftType> PersonAircraftTypes { get; set; }
        public virtual DbSet<PersonCaoLicenceHistory> PersonCaoLicenceHistories { get; set; }
        public virtual DbSet<PersonCaoLicense> PersonCaoLicenses { get; set; }
        public virtual DbSet<PersonCourse> PersonCourses { get; set; }
        public virtual DbSet<PersonCustomer> PersonCustomers { get; set; }
        public virtual DbSet<PersonDocument> PersonDocuments { get; set; }
        public virtual DbSet<PersonDocumentFile> PersonDocumentFiles { get; set; }
        public virtual DbSet<PersonEducation> PersonEducations { get; set; }
        public virtual DbSet<PersonEducationDocument> PersonEducationDocuments { get; set; }
        public virtual DbSet<PersonExperiense> PersonExperienses { get; set; }
        public virtual DbSet<PersonHistory> PersonHistories { get; set; }
        public virtual DbSet<PersonMisc> PersonMiscs { get; set; }
        public virtual DbSet<PersonRating> PersonRatings { get; set; }
        public virtual DbSet<PersonRatingDocument> PersonRatingDocuments { get; set; }
        public virtual DbSet<PlanItem> PlanItems { get; set; }
        public virtual DbSet<RV_Aircraft> RV_Aircrafts { get; set; }
        public virtual DbSet<RV_Assign> RV_Assigns { get; set; }
        public virtual DbSet<RV_Crew> RV_Crews { get; set; }
        public virtual DbSet<RV_CrewRpt> RV_CrewRpts { get; set; }
        public virtual DbSet<RV_Daily> RV_Dailies { get; set; }
        public virtual DbSet<RV_Delivery> RV_Deliveries { get; set; }
        public virtual DbSet<RV_Flight> RV_Flights { get; set; }
        public virtual DbSet<RV_FlightInformation> RV_FlightInformations { get; set; }
        public virtual DbSet<RV_Leg> RV_Legs { get; set; }
        public virtual DbSet<RV_Training> RV_Trainings { get; set; }
        public virtual DbSet<Rating> Ratings { get; set; }
        public virtual DbSet<RefreshToken> RefreshTokens { get; set; }
        public virtual DbSet<RegisterGround> RegisterGrounds { get; set; }
        public virtual DbSet<ReportRoster> ReportRosters { get; set; }
        public virtual DbSet<Report_Crew> Report_Crews { get; set; }
        public virtual DbSet<Report_Crew_XML> Report_Crew_XMLs { get; set; }
        public virtual DbSet<Report_Delay> Report_Delays { get; set; }
        public virtual DbSet<Report_Flight> Report_Flights { get; set; }
        public virtual DbSet<RoleOrganizational> RoleOrganizationals { get; set; }
        public virtual DbSet<RosterCrewSheet> RosterCrewSheets { get; set; }
        public virtual DbSet<RosterDailyReport> RosterDailyReports { get; set; }
        public virtual DbSet<RouteDistance> RouteDistances { get; set; }
        public virtual DbSet<RptAirportDaily> RptAirportDailies { get; set; }
        public virtual DbSet<RptDeadHead> RptDeadHeads { get; set; }
        public virtual DbSet<RptDelayAirportDaily> RptDelayAirportDailies { get; set; }
        public virtual DbSet<RptDelayAirportDailyCal> RptDelayAirportDailyCals { get; set; }
        public virtual DbSet<RptDelayAirportMonthly> RptDelayAirportMonthlies { get; set; }
        public virtual DbSet<RptDelayAirportMonthlyCal> RptDelayAirportMonthlyCals { get; set; }
        public virtual DbSet<RptDelayCatAirportDaily> RptDelayCatAirportDailies { get; set; }
        public virtual DbSet<RptDelayCatAirportDailyCal> RptDelayCatAirportDailyCals { get; set; }
        public virtual DbSet<RptDelayCatAirportMonthly> RptDelayCatAirportMonthlies { get; set; }
        public virtual DbSet<RptDelayCatAirportMonthlyCal> RptDelayCatAirportMonthlyCals { get; set; }
        public virtual DbSet<RptDelayCatDaily> RptDelayCatDailies { get; set; }
        public virtual DbSet<RptDelayCatDailyCal> RptDelayCatDailyCals { get; set; }
        public virtual DbSet<RptDelayCatMonthly> RptDelayCatMonthlies { get; set; }
        public virtual DbSet<RptDelayCatMonthlyCal> RptDelayCatMonthlyCals { get; set; }
        public virtual DbSet<RptDelayCatRegisterDaily> RptDelayCatRegisterDailies { get; set; }
        public virtual DbSet<RptDelayCatRegisterDailyCal> RptDelayCatRegisterDailyCals { get; set; }
        public virtual DbSet<RptDelayCatRegisterMonthly> RptDelayCatRegisterMonthlies { get; set; }
        public virtual DbSet<RptDelayCatRegisterMonthlyCal> RptDelayCatRegisterMonthlyCals { get; set; }
        public virtual DbSet<RptDelayDaily> RptDelayDailies { get; set; }
        public virtual DbSet<RptDelayDailyCal> RptDelayDailyCals { get; set; }
        public virtual DbSet<RptDelayLeg> RptDelayLegs { get; set; }
        public virtual DbSet<RptDelayLegBI> RptDelayLegBIs { get; set; }
        public virtual DbSet<RptDelayLegMap> RptDelayLegMaps { get; set; }
        public virtual DbSet<RptDelayLegPivot> RptDelayLegPivots { get; set; }
        public virtual DbSet<RptDelayMonthly> RptDelayMonthlies { get; set; }
        public virtual DbSet<RptDelayMonthlyCal> RptDelayMonthlyCals { get; set; }
        public virtual DbSet<RptFDP> RptFDPs { get; set; }
        public virtual DbSet<RptFDPItem> RptFDPItems { get; set; }
        public virtual DbSet<RptFDPMonthly> RptFDPMonthlies { get; set; }
        public virtual DbSet<RptFDPMonthlyPersian> RptFDPMonthlyPersians { get; set; }
        public virtual DbSet<RptFDPOld> RptFDPOlds { get; set; }
        public virtual DbSet<RptFlight> RptFlights { get; set; }
        public virtual DbSet<RptFuelDaily> RptFuelDailies { get; set; }
        public virtual DbSet<RptFuelDailyCal> RptFuelDailyCals { get; set; }
        public virtual DbSet<RptFuelDailyRegister> RptFuelDailyRegisters { get; set; }
        public virtual DbSet<RptFuelDailyRegisterCal> RptFuelDailyRegisterCals { get; set; }
        public virtual DbSet<RptFuelDailyRoute> RptFuelDailyRoutes { get; set; }
        public virtual DbSet<RptFuelDailyRouteX> RptFuelDailyRoutices { get; set; }
        public virtual DbSet<RptFuelDailyRouteXCal> RptFuelDailyRouteXCals { get; set; }
        public virtual DbSet<RptFuelDailyType> RptFuelDailyTypes { get; set; }
        public virtual DbSet<RptFuelDailyTypeCal> RptFuelDailyTypeCals { get; set; }
        public virtual DbSet<RptFuelLeg> RptFuelLegs { get; set; }
        public virtual DbSet<RptFuelMonthly> RptFuelMonthlies { get; set; }
        public virtual DbSet<RptFuelMonthlyCal> RptFuelMonthlyCals { get; set; }
        public virtual DbSet<RptFuelMonthlyRegister> RptFuelMonthlyRegisters { get; set; }
        public virtual DbSet<RptFuelMonthlyRegisterCal> RptFuelMonthlyRegisterCals { get; set; }
        public virtual DbSet<RptFuelMonthlyRoute> RptFuelMonthlyRoutes { get; set; }
        public virtual DbSet<RptFuelMonthlyRouteX> RptFuelMonthlyRoutices { get; set; }
        public virtual DbSet<RptFuelMonthlyRouteXCal> RptFuelMonthlyRouteXCals { get; set; }
        public virtual DbSet<RptFuelMonthlyType> RptFuelMonthlyTypes { get; set; }
        public virtual DbSet<RptFuelMonthlyTypeCal> RptFuelMonthlyTypeCals { get; set; }
        public virtual DbSet<RptFuelYearlyRegister> RptFuelYearlyRegisters { get; set; }
        public virtual DbSet<RptFuelYearlyRoute> RptFuelYearlyRoutes { get; set; }
        public virtual DbSet<RptFuelYearlyType> RptFuelYearlyTypes { get; set; }
        public virtual DbSet<RptNoFDP> RptNoFDPs { get; set; }
        public virtual DbSet<RptNoFDPMonthlyPersian> RptNoFDPMonthlyPersians { get; set; }
        public virtual DbSet<RptRedirect> RptRedirects { get; set; }
        public virtual DbSet<RptReposition> RptRepositions { get; set; }
        public virtual DbSet<SMSGroup> SMSGroups { get; set; }
        public virtual DbSet<SMSHistory> SMSHistories { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<SumActiveCourse> SumActiveCourses { get; set; }
        public virtual DbSet<SumBoxTime> SumBoxTimes { get; set; }
        public virtual DbSet<SumCarelessEmployee> SumCarelessEmployees { get; set; }
        public virtual DbSet<SumCarelessEmployeeTotal> SumCarelessEmployeeTotals { get; set; }
        public virtual DbSet<SumCertificateStatus> SumCertificateStatuses { get; set; }
        public virtual DbSet<SumCertificateType> SumCertificateTypes { get; set; }
        public virtual DbSet<SumEmployeeAge> SumEmployeeAges { get; set; }
        public virtual DbSet<SumEmployeeDateAlert> SumEmployeeDateAlerts { get; set; }
        public virtual DbSet<SumEmployeeDegree> SumEmployeeDegrees { get; set; }
        public virtual DbSet<SumEmployeeExp> SumEmployeeExps { get; set; }
        public virtual DbSet<SumEmployeeJobGroup> SumEmployeeJobGroups { get; set; }
        public virtual DbSet<SumEmployeeLibraryAlert> SumEmployeeLibraryAlerts { get; set; }
        public virtual DbSet<SumEmployeeLocation> SumEmployeeLocations { get; set; }
        public virtual DbSet<SumEmployeeMaritalStatus> SumEmployeeMaritalStatuses { get; set; }
        public virtual DbSet<SumEmployeeSex> SumEmployeeSexes { get; set; }
        public virtual DbSet<SumEmployeeStudyField> SumEmployeeStudyFields { get; set; }
        public virtual DbSet<SumFlightDelay> SumFlightDelays { get; set; }
        public virtual DbSet<SumLibraryAddedByMonth> SumLibraryAddedByMonths { get; set; }
        public virtual DbSet<SumLibraryDownloadByMonth> SumLibraryDownloadByMonths { get; set; }
        public virtual DbSet<SumMandatoryCourseExpired> SumMandatoryCourseExpireds { get; set; }
        public virtual DbSet<SunTime> SunTimes { get; set; }
        public virtual DbSet<TableBlockTime> TableBlockTimes { get; set; }
        public virtual DbSet<TableCrewTime> TableCrewTimes { get; set; }
        public virtual DbSet<TableDutyFDP> TableDutyFDPs { get; set; }
        public virtual DbSet<TableFlightFDP> TableFlightFDPs { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<TeacherDocument> TeacherDocuments { get; set; }
        public virtual DbSet<Teleng> Telengs { get; set; }
        public virtual DbSet<TempAirport> TempAirports { get; set; }
        public virtual DbSet<TempGunt> TempGunts { get; set; }
        public virtual DbSet<TempUser> TempUsers { get; set; }
        public virtual DbSet<ThirdPartySyncHistory> ThirdPartySyncHistories { get; set; }
        public virtual DbSet<UM_User> UM_Users { get; set; }
        public virtual DbSet<UpdBL> UpdBLs { get; set; }
        public virtual DbSet<UpdatedPlanFlight> UpdatedPlanFlights { get; set; }
        public virtual DbSet<UserActivity> UserActivities { get; set; }
        public virtual DbSet<UserActivityMenuHit> UserActivityMenuHits { get; set; }
        public virtual DbSet<UserExt> UserExts { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<ViewAircraftType> ViewAircraftTypes { get; set; }
        public virtual DbSet<ViewAirport> ViewAirports { get; set; }
        public virtual DbSet<ViewApplicableCourse> ViewApplicableCourses { get; set; }
        public virtual DbSet<ViewApplicableCoursePerson> ViewApplicableCoursePeople { get; set; }
        public virtual DbSet<ViewBirdStrikeCAO> ViewBirdStrikeCAOs { get; set; }
        public virtual DbSet<ViewBoardSummary> ViewBoardSummaries { get; set; }
        public virtual DbSet<ViewBook> ViewBooks { get; set; }
        public virtual DbSet<ViewBookApplicableEmployee> ViewBookApplicableEmployees { get; set; }
        public virtual DbSet<ViewBookApplicableEmployeeAb> ViewBookApplicableEmployeeAbs { get; set; }
        public virtual DbSet<ViewBookAuthor> ViewBookAuthors { get; set; }
        public virtual DbSet<ViewBookChapter> ViewBookChapters { get; set; }
        public virtual DbSet<ViewBookFile> ViewBookFiles { get; set; }
        public virtual DbSet<ViewBookFileVisited> ViewBookFileVisiteds { get; set; }
        public virtual DbSet<ViewBox> ViewBoxes { get; set; }
        public virtual DbSet<ViewBoxCrew> ViewBoxCrews { get; set; }
        public virtual DbSet<ViewBoxCrewFlight> ViewBoxCrewFlights { get; set; }
        public virtual DbSet<ViewBoxCrewRequirement> ViewBoxCrewRequirements { get; set; }
        public virtual DbSet<ViewCaoType> ViewCaoTypes { get; set; }
        public virtual DbSet<ViewCateringItem> ViewCateringItems { get; set; }
        public virtual DbSet<ViewCertificate> ViewCertificates { get; set; }
        public virtual DbSet<ViewCertification> ViewCertifications { get; set; }
        public virtual DbSet<ViewCity> ViewCities { get; set; }
        public virtual DbSet<ViewClaim> ViewClaims { get; set; }
        public virtual DbSet<ViewCourse> ViewCourses { get; set; }
        public virtual DbSet<ViewCourseNew> ViewCourseNews { get; set; }
        public virtual DbSet<ViewCourseNotificationEnabled> ViewCourseNotificationEnableds { get; set; }
        public virtual DbSet<ViewCoursePeoplePassedRanked> ViewCoursePeoplePassedRankeds { get; set; }
        public virtual DbSet<ViewCoursePeopleRanked> ViewCoursePeopleRankeds { get; set; }
        public virtual DbSet<ViewCoursePerson> ViewCoursePeople { get; set; }
        public virtual DbSet<ViewCourseSession> ViewCourseSessions { get; set; }
        public virtual DbSet<ViewCourseSessionPresence> ViewCourseSessionPresences { get; set; }
        public virtual DbSet<ViewCourseSessionPresenceDetail> ViewCourseSessionPresenceDetails { get; set; }
        public virtual DbSet<ViewCourseType> ViewCourseTypes { get; set; }
        public virtual DbSet<ViewCourseTypeJobGroup> ViewCourseTypeJobGroups { get; set; }
        public virtual DbSet<ViewCrew> ViewCrews { get; set; }
        public virtual DbSet<ViewCrewAssignFDP> ViewCrewAssignFDPs { get; set; }
        public virtual DbSet<ViewCrewCalendar> ViewCrewCalendars { get; set; }
        public virtual DbSet<ViewCrewCalendarSplited> ViewCrewCalendarSpliteds { get; set; }
        public virtual DbSet<ViewCrewCertificatesSummary> ViewCrewCertificatesSummaries { get; set; }
        public virtual DbSet<ViewCrewCode> ViewCrewCodes { get; set; }
        public virtual DbSet<ViewCrewDuty> ViewCrewDuties { get; set; }
        public virtual DbSet<ViewCrewDutyNoReg> ViewCrewDutyNoRegs { get; set; }
        public virtual DbSet<ViewCrewDutyTimeLine> ViewCrewDutyTimeLines { get; set; }
        public virtual DbSet<ViewCrewFMD> ViewCrewFMDs { get; set; }
        public virtual DbSet<ViewCrewFlightApp> ViewCrewFlightApps { get; set; }
        public virtual DbSet<ViewCrewList> ViewCrewLists { get; set; }
        public virtual DbSet<ViewCrewNoLocation> ViewCrewNoLocations { get; set; }
        public virtual DbSet<ViewCrewPickupSM> ViewCrewPickupSMs { get; set; }
        public virtual DbSet<ViewCrewTime> ViewCrewTimes { get; set; }
        public virtual DbSet<ViewCrewTimeDetail> ViewCrewTimeDetails { get; set; }
        public virtual DbSet<ViewCrewValid> ViewCrewValids { get; set; }
        public virtual DbSet<ViewCrewValidFTL> ViewCrewValidFTLs { get; set; }
        public virtual DbSet<ViewDailyRosterFlight> ViewDailyRosterFlights { get; set; }
        public virtual DbSet<ViewDay> ViewDays { get; set; }
        public virtual DbSet<ViewDayDuty> ViewDayDuties { get; set; }
        public virtual DbSet<ViewDayDuty7> ViewDayDuty7s { get; set; }
        public virtual DbSet<ViewDayDutyFlight> ViewDayDutyFlights { get; set; }
        public virtual DbSet<ViewDayFlight> ViewDayFlights { get; set; }
        public virtual DbSet<ViewDayFlight28> ViewDayFlight28s { get; set; }
        public virtual DbSet<ViewDayGP> ViewDayGPs { get; set; }
        public virtual DbSet<ViewDayOffRanked> ViewDayOffRankeds { get; set; }
        public virtual DbSet<ViewDayRanked> ViewDayRankeds { get; set; }
        public virtual DbSet<ViewDelayAirportCategoryGrouped> ViewDelayAirportCategoryGroupeds { get; set; }
        public virtual DbSet<ViewDelayAirportGrouped> ViewDelayAirportGroupeds { get; set; }
        public virtual DbSet<ViewDelayCategoryGrouped> ViewDelayCategoryGroupeds { get; set; }
        public virtual DbSet<ViewDelayCode> ViewDelayCodes { get; set; }
        public virtual DbSet<ViewDelayDaily> ViewDelayDailies { get; set; }
        public virtual DbSet<ViewDelayDailyAirport> ViewDelayDailyAirports { get; set; }
        public virtual DbSet<ViewDelayDailyAirportCategory> ViewDelayDailyAirportCategories { get; set; }
        public virtual DbSet<ViewDelayDailyCategory> ViewDelayDailyCategories { get; set; }
        public virtual DbSet<ViewDelayGrouped> ViewDelayGroupeds { get; set; }
        public virtual DbSet<ViewDelayMonthly> ViewDelayMonthlies { get; set; }
        public virtual DbSet<ViewDelayMonthlyAirport> ViewDelayMonthlyAirports { get; set; }
        public virtual DbSet<ViewDelayMonthlyAirportCategory> ViewDelayMonthlyAirportCategories { get; set; }
        public virtual DbSet<ViewDelayMonthlyCategory> ViewDelayMonthlyCategories { get; set; }
        public virtual DbSet<ViewDelayWeekly> ViewDelayWeeklies { get; set; }
        public virtual DbSet<ViewDelayWeeklyAirport> ViewDelayWeeklyAirports { get; set; }
        public virtual DbSet<ViewDelayWeeklyAirportCategory> ViewDelayWeeklyAirportCategories { get; set; }
        public virtual DbSet<ViewDelayWeeklyCategory> ViewDelayWeeklyCategories { get; set; }
        public virtual DbSet<ViewDispatchSMSEmployee> ViewDispatchSMSEmployees { get; set; }
        public virtual DbSet<ViewDool> ViewDools { get; set; }
        public virtual DbSet<ViewDutyCalendar> ViewDutyCalendars { get; set; }
        public virtual DbSet<ViewDutyCalendarSum> ViewDutyCalendarSums { get; set; }
        public virtual DbSet<ViewDutyFDP> ViewDutyFDPs { get; set; }
        public virtual DbSet<ViewDutyFDPDetail> ViewDutyFDPDetails { get; set; }
        public virtual DbSet<ViewDutyFDPSum> ViewDutyFDPSums { get; set; }
        public virtual DbSet<ViewDutyFDPSumCom> ViewDutyFDPSumComs { get; set; }
        public virtual DbSet<ViewDutyFDPSumShadow> ViewDutyFDPSumShadows { get; set; }
        public virtual DbSet<ViewDutyFlight> ViewDutyFlights { get; set; }
        public virtual DbSet<ViewDutyFlightLocal> ViewDutyFlightLocals { get; set; }
        public virtual DbSet<ViewDutyFlightSum> ViewDutyFlightSums { get; set; }
        public virtual DbSet<ViewDutyFlightSumCom> ViewDutyFlightSumComs { get; set; }
        public virtual DbSet<ViewEFBASR> ViewEFBASRs { get; set; }
        public virtual DbSet<ViewEFBDSPRelease> ViewEFBDSPReleases { get; set; }
        public virtual DbSet<ViewEFBOccurrenceCAO> ViewEFBOccurrenceCAOs { get; set; }
        public virtual DbSet<ViewEFBVoyageIrr> ViewEFBVoyageIrrs { get; set; }
        public virtual DbSet<ViewEFBVoyageReason> ViewEFBVoyageReasons { get; set; }
        public virtual DbSet<ViewEFBVoyageReport> ViewEFBVoyageReports { get; set; }
        public virtual DbSet<ViewEFBVoyageReportsAll> ViewEFBVoyageReportsAlls { get; set; }
        public virtual DbSet<ViewEmployee> ViewEmployees { get; set; }
        public virtual DbSet<ViewEmployeeACType> ViewEmployeeACTypes { get; set; }
        public virtual DbSet<ViewEmployeeAb> ViewEmployeeAbs { get; set; }
        public virtual DbSet<ViewEmployeeAge> ViewEmployeeAges { get; set; }
        public virtual DbSet<ViewEmployeeExp> ViewEmployeeExps { get; set; }
        public virtual DbSet<ViewEmployeeLight> ViewEmployeeLights { get; set; }
        public virtual DbSet<ViewEmployeeLocation> ViewEmployeeLocations { get; set; }
        public virtual DbSet<ViewEmployeeSimple> ViewEmployeeSimples { get; set; }
        public virtual DbSet<ViewEmployeeTraining> ViewEmployeeTrainings { get; set; }
        public virtual DbSet<ViewFDP> ViewFDPs { get; set; }
        public virtual DbSet<ViewFDP2> ViewFDP2s { get; set; }
        public virtual DbSet<ViewFDPAB> ViewFDPABs { get; set; }
        public virtual DbSet<ViewFDPCrew> ViewFDPCrews { get; set; }
        public virtual DbSet<ViewFDPCrewDetail> ViewFDPCrewDetails { get; set; }
        public virtual DbSet<ViewFDPCrewDetailSM> ViewFDPCrewDetailSMs { get; set; }
        public virtual DbSet<ViewFDPFTL> ViewFDPFTLs { get; set; }
        public virtual DbSet<ViewFDPFlight> ViewFDPFlights { get; set; }
        public virtual DbSet<ViewFDPFlightDetail> ViewFDPFlightDetails { get; set; }
        public virtual DbSet<ViewFDPIdea> ViewFDPIdeas { get; set; }
        public virtual DbSet<ViewFDPItem> ViewFDPItems { get; set; }
        public virtual DbSet<ViewFDPItem2> ViewFDPItem2s { get; set; }
        public virtual DbSet<ViewFDPItemAb> ViewFDPItemAbs { get; set; }
        public virtual DbSet<ViewFDPKey> ViewFDPKeys { get; set; }
        public virtual DbSet<ViewFDPLog> ViewFDPLogs { get; set; }
        public virtual DbSet<ViewFDPRest> ViewFDPRests { get; set; }
        public virtual DbSet<ViewFDPShadow> ViewFDPShadows { get; set; }
        public virtual DbSet<ViewFDRReport> ViewFDRReports { get; set; }
        public virtual DbSet<ViewFLTGroup> ViewFLTGroups { get; set; }
        public virtual DbSet<ViewFMISFLT> ViewFMISFLTs { get; set; }
        public virtual DbSet<ViewFNRoute> ViewFNRoutes { get; set; }
        public virtual DbSet<ViewFTL> ViewFTLs { get; set; }
        public virtual DbSet<ViewFTLYear> ViewFTLYears { get; set; }
        public virtual DbSet<ViewFin> ViewFins { get; set; }
        public virtual DbSet<ViewFinMonthly> ViewFinMonthlies { get; set; }
        public virtual DbSet<ViewFinMonthlyPersian> ViewFinMonthlyPersians { get; set; }
        public virtual DbSet<ViewFinMonthlyReg> ViewFinMonthlyRegs { get; set; }
        public virtual DbSet<ViewFinMonthlyRoute> ViewFinMonthlyRoutes { get; set; }
        public virtual DbSet<ViewFinMonthlyRouteReg> ViewFinMonthlyRouteRegs { get; set; }
        public virtual DbSet<ViewFinYearlyRoute> ViewFinYearlyRoutes { get; set; }
        public virtual DbSet<ViewFixtimeRoute> ViewFixtimeRoutes { get; set; }
        public virtual DbSet<ViewFlighPlanAssignedRegister> ViewFlighPlanAssignedRegisters { get; set; }
        public virtual DbSet<ViewFlightAB> ViewFlightABs { get; set; }
        public virtual DbSet<ViewFlightChangeHistory> ViewFlightChangeHistories { get; set; }
        public virtual DbSet<ViewFlightCockpit> ViewFlightCockpits { get; set; }
        public virtual DbSet<ViewFlightCrew> ViewFlightCrews { get; set; }
        public virtual DbSet<ViewFlightCrew2> ViewFlightCrew2s { get; set; }
        public virtual DbSet<ViewFlightCrewArchive> ViewFlightCrewArchives { get; set; }
        public virtual DbSet<ViewFlightCrewArchived> ViewFlightCrewArchiveds { get; set; }
        public virtual DbSet<ViewFlightCrewNew> ViewFlightCrewNews { get; set; }
        public virtual DbSet<ViewFlightCrewNewX> ViewFlightCrewNewXes { get; set; }
        public virtual DbSet<ViewFlightCrewNewXTime> ViewFlightCrewNewXTimes { get; set; }
        public virtual DbSet<ViewFlightCrewX> ViewFlightCrewXes { get; set; }
        public virtual DbSet<ViewFlightCrewXOff> ViewFlightCrewXOffs { get; set; }
        public virtual DbSet<ViewFlightDelay> ViewFlightDelays { get; set; }
        public virtual DbSet<ViewFlightDelay2> ViewFlightDelay2s { get; set; }
        public virtual DbSet<ViewFlightDelayCode> ViewFlightDelayCodes { get; set; }
        public virtual DbSet<ViewFlightFDP> ViewFlightFDPs { get; set; }
        public virtual DbSet<ViewFlightFuel> ViewFlightFuels { get; set; }
        public virtual DbSet<ViewFlightGroupItem> ViewFlightGroupItems { get; set; }
        public virtual DbSet<ViewFlightInformation> ViewFlightInformations { get; set; }
        public virtual DbSet<ViewFlightMatchingList> ViewFlightMatchingLists { get; set; }
        public virtual DbSet<ViewFlightPlan> ViewFlightPlans { get; set; }
        public virtual DbSet<ViewFlightPlanCalander> ViewFlightPlanCalanders { get; set; }
        public virtual DbSet<ViewFlightPlanCalanderCrew> ViewFlightPlanCalanderCrews { get; set; }
        public virtual DbSet<ViewFlightPlanCalendarRegister> ViewFlightPlanCalendarRegisters { get; set; }
        public virtual DbSet<ViewFlightPlanCalendarRegisterAll> ViewFlightPlanCalendarRegisterAlls { get; set; }
        public virtual DbSet<ViewFlightPlanItem> ViewFlightPlanItems { get; set; }
        public virtual DbSet<ViewFlightPlanItemCalander> ViewFlightPlanItemCalanders { get; set; }
        public virtual DbSet<ViewFlightPlanItemPermit> ViewFlightPlanItemPermits { get; set; }
        public virtual DbSet<ViewFlightPlanRegister> ViewFlightPlanRegisters { get; set; }
        public virtual DbSet<ViewFlightPlanRegisterAssigned> ViewFlightPlanRegisterAssigneds { get; set; }
        public virtual DbSet<ViewFlightRoute> ViewFlightRoutes { get; set; }
        public virtual DbSet<ViewFlightSecurity> ViewFlightSecurities { get; set; }
        public virtual DbSet<ViewFlightSecurityDH> ViewFlightSecurityDHs { get; set; }
        public virtual DbSet<ViewFlightsAcType> ViewFlightsAcTypes { get; set; }
        public virtual DbSet<ViewFlightsFrom> ViewFlightsFroms { get; set; }
        public virtual DbSet<ViewFlightsGantt> ViewFlightsGantts { get; set; }
        public virtual DbSet<ViewFlightsGantt2> ViewFlightsGantt2s { get; set; }
        public virtual DbSet<ViewFlightsRegister> ViewFlightsRegisters { get; set; }
        public virtual DbSet<ViewFlightsTo> ViewFlightsTos { get; set; }
        public virtual DbSet<ViewFolderApplicable> ViewFolderApplicables { get; set; }
        public virtual DbSet<ViewFormA> ViewFormAs { get; set; }
        public virtual DbSet<ViewFormAMonthly> ViewFormAMonthlies { get; set; }
        public virtual DbSet<ViewFormAMonthlyDom> ViewFormAMonthlyDoms { get; set; }
        public virtual DbSet<ViewFormAMonthlyInt> ViewFormAMonthlyInts { get; set; }
        public virtual DbSet<ViewFormAYearly> ViewFormAYearlies { get; set; }
        public virtual DbSet<ViewFormAYearlyDom> ViewFormAYearlyDoms { get; set; }
        public virtual DbSet<ViewFormAYearlyInt> ViewFormAYearlyInts { get; set; }
        public virtual DbSet<ViewIPAccess> ViewIPAccesses { get; set; }
        public virtual DbSet<ViewIdeaLast> ViewIdeaLasts { get; set; }
        public virtual DbSet<ViewIdeaRank> ViewIdeaRanks { get; set; }
        public virtual DbSet<ViewIdeaSessionItem> ViewIdeaSessionItems { get; set; }
        public virtual DbSet<ViewIdeaSessionItemX> ViewIdeaSessionItemXes { get; set; }
        public virtual DbSet<ViewIdeaSessionUpdateError> ViewIdeaSessionUpdateErrors { get; set; }
        public virtual DbSet<ViewIdeaUnique> ViewIdeaUniques { get; set; }
        public virtual DbSet<ViewIdeaUniqueLast> ViewIdeaUniqueLasts { get; set; }
        public virtual DbSet<ViewImportPlan> ViewImportPlans { get; set; }
        public virtual DbSet<ViewJLog> ViewJLogs { get; set; }
        public virtual DbSet<ViewJobGroup> ViewJobGroups { get; set; }
        public virtual DbSet<ViewJobGroupMain> ViewJobGroupMains { get; set; }
        public virtual DbSet<ViewJobGroupType> ViewJobGroupTypes { get; set; }
        public virtual DbSet<ViewJournal> ViewJournals { get; set; }
        public virtual DbSet<ViewLayOver> ViewLayOvers { get; set; }
        public virtual DbSet<ViewLayOverNew> ViewLayOverNews { get; set; }
        public virtual DbSet<ViewLegCrew> ViewLegCrews { get; set; }
        public virtual DbSet<ViewLegFdpItem> ViewLegFdpItems { get; set; }
        public virtual DbSet<ViewLegFuel> ViewLegFuels { get; set; }
        public virtual DbSet<ViewLegTime> ViewLegTimes { get; set; }
        public virtual DbSet<ViewLegTime2> ViewLegTime2s { get; set; }
        public virtual DbSet<ViewLibraryFolder> ViewLibraryFolders { get; set; }
        public virtual DbSet<ViewLoadsheet> ViewLoadsheets { get; set; }
        public virtual DbSet<ViewLocation> ViewLocations { get; set; }
        public virtual DbSet<ViewMSN> ViewMSNs { get; set; }
        public virtual DbSet<ViewMandatoryCourse> ViewMandatoryCourses { get; set; }
        public virtual DbSet<ViewMandatoryCourseAll> ViewMandatoryCourseAlls { get; set; }
        public virtual DbSet<ViewMandatoryCourseEmployee> ViewMandatoryCourseEmployees { get; set; }
        public virtual DbSet<ViewManufacturer> ViewManufacturers { get; set; }
        public virtual DbSet<ViewMatchingList> ViewMatchingLists { get; set; }
        public virtual DbSet<ViewMonth> ViewMonths { get; set; }
        public virtual DbSet<ViewNotification> ViewNotifications { get; set; }
        public virtual DbSet<ViewNotificationGroup> ViewNotificationGroups { get; set; }
        public virtual DbSet<ViewOccurrenceCAO> ViewOccurrenceCAOs { get; set; }
        public virtual DbSet<ViewOffItem> ViewOffItems { get; set; }
        public virtual DbSet<ViewOption> ViewOptions { get; set; }
        public virtual DbSet<ViewOrganization> ViewOrganizations { get; set; }
        public virtual DbSet<ViewPersonActiveCourse> ViewPersonActiveCourses { get; set; }
        public virtual DbSet<ViewPersonAircraftType> ViewPersonAircraftTypes { get; set; }
        public virtual DbSet<ViewPersonCaoLicense> ViewPersonCaoLicenses { get; set; }
        public virtual DbSet<ViewPersonDocument> ViewPersonDocuments { get; set; }
        public virtual DbSet<ViewPersonDocumentFile> ViewPersonDocumentFiles { get; set; }
        public virtual DbSet<ViewPersonDocumentFileX> ViewPersonDocumentFilices { get; set; }
        public virtual DbSet<ViewPersonDocumentX> ViewPersonDocumentXes { get; set; }
        public virtual DbSet<ViewPersonEducation> ViewPersonEducations { get; set; }
        public virtual DbSet<ViewPersonExperiense> ViewPersonExperienses { get; set; }
        public virtual DbSet<ViewPersonMisc> ViewPersonMiscs { get; set; }
        public virtual DbSet<ViewPersonRating> ViewPersonRatings { get; set; }
        public virtual DbSet<ViewPlanFlight> ViewPlanFlights { get; set; }
        public virtual DbSet<ViewPlanItem> ViewPlanItems { get; set; }
        public virtual DbSet<ViewPositioning> ViewPositionings { get; set; }
        public virtual DbSet<ViewPost> ViewPosts { get; set; }
        public virtual DbSet<ViewRegHistory> ViewRegHistories { get; set; }
        public virtual DbSet<ViewRegHistory2> ViewRegHistory2s { get; set; }
        public virtual DbSet<ViewRegHistoryMonthly> ViewRegHistoryMonthlies { get; set; }
        public virtual DbSet<ViewRegHistoryYearly> ViewRegHistoryYearlies { get; set; }
        public virtual DbSet<ViewRegisterGround> ViewRegisterGrounds { get; set; }
        public virtual DbSet<ViewRole> ViewRoles { get; set; }
        public virtual DbSet<ViewRoleClaim> ViewRoleClaims { get; set; }
        public virtual DbSet<ViewRosterCrewCount> ViewRosterCrewCounts { get; set; }
        public virtual DbSet<ViewRosterReport> ViewRosterReports { get; set; }
        public virtual DbSet<ViewRosterReportFP> ViewRosterReportFPs { get; set; }
        public virtual DbSet<ViewRosterSheet> ViewRosterSheets { get; set; }
        public virtual DbSet<ViewRotserDailyCrew> ViewRotserDailyCrews { get; set; }
        public virtual DbSet<ViewRoute> ViewRoutes { get; set; }
        public virtual DbSet<ViewRouteFromAirport> ViewRouteFromAirports { get; set; }
        public virtual DbSet<ViewRouteToAirport> ViewRouteToAirports { get; set; }
        public virtual DbSet<ViewSMSHistory> ViewSMSHistories { get; set; }
        public virtual DbSet<ViewStudyField> ViewStudyFields { get; set; }
        public virtual DbSet<ViewTableDutyFDP> ViewTableDutyFDPs { get; set; }
        public virtual DbSet<ViewTeacher> ViewTeachers { get; set; }
        public virtual DbSet<ViewTeacherCourse> ViewTeacherCourses { get; set; }
        public virtual DbSet<ViewTeacherDocument> ViewTeacherDocuments { get; set; }
        public virtual DbSet<ViewTimeTable> ViewTimeTables { get; set; }
        public virtual DbSet<ViewTrainingDuty> ViewTrainingDuties { get; set; }
        public virtual DbSet<ViewTrainingSMSHistory> ViewTrainingSMSHistories { get; set; }
        public virtual DbSet<ViewUser> ViewUsers { get; set; }
        public virtual DbSet<ViewUserActivity> ViewUserActivities { get; set; }
        public virtual DbSet<ViewUserRole> ViewUserRoles { get; set; }
        public virtual DbSet<ViewUserRoleClaim> ViewUserRoleClaims { get; set; }
        public virtual DbSet<ViewWeek> ViewWeeks { get; set; }
        public virtual DbSet<VirtualMSN> VirtualMSNs { get; set; }
        public virtual DbSet<WeatherForecastIcingCondition> WeatherForecastIcingConditions { get; set; }
        public virtual DbSet<WeatherForecastSkyCondition> WeatherForecastSkyConditions { get; set; }
        public virtual DbSet<WeatherForecastTemperature> WeatherForecastTemperatures { get; set; }
        public virtual DbSet<WeatherForecastTurbulence> WeatherForecastTurbulences { get; set; }
        public virtual DbSet<WeatherMetar> WeatherMetars { get; set; }
        public virtual DbSet<WeatherMetarQualityControl> WeatherMetarQualityControls { get; set; }
        public virtual DbSet<WeatherMetarSkyCondition> WeatherMetarSkyConditions { get; set; }
        public virtual DbSet<WeatherSIGWX> WeatherSIGWXes { get; set; }
        public virtual DbSet<WeatherSIGWXIrimo> WeatherSIGWXIrimos { get; set; }
        public virtual DbSet<WeatherTaf> WeatherTafs { get; set; }
        public virtual DbSet<WeatherTafForecast> WeatherTafForecasts { get; set; }
        public virtual DbSet<XCrewAssigned> XCrewAssigneds { get; set; }
        public virtual DbSet<XCrewAssignedRpt> XCrewAssignedRpts { get; set; }
        public virtual DbSet<XDaily> XDailies { get; set; }
        public virtual DbSet<XFlight> XFlights { get; set; }
        public virtual DbSet<XInit> XInits { get; set; }
        public virtual DbSet<XLSFLT> XLSFLTs { get; set; }
        public virtual DbSet<_CSPN> _CSPNs { get; set; }
        public virtual DbSet<_CabinJSON> _CabinJSONs { get; set; }
        public virtual DbSet<_CrewsJSON> _CrewsJSONs { get; set; }
        public virtual DbSet<_DayGP> _DayGPs { get; set; }
        public virtual DbSet<_DayGPTest> _DayGPTests { get; set; }
        public virtual DbSet<_DayGPX> _DayGPXes { get; set; }
        public virtual DbSet<_DelayId> _DelayIds { get; set; }
        public virtual DbSet<_FDPItemRank> _FDPItemRanks { get; set; }
        public virtual DbSet<_FMISASSIGN> _FMISASSIGNs { get; set; }
        public virtual DbSet<_FMISCREW> _FMISCREWs { get; set; }
        public virtual DbSet<_FMISDATE> _FMISDATEs { get; set; }
        public virtual DbSet<_FMISFLIGHT> _FMISFLIGHTs { get; set; }
        public virtual DbSet<_FMISFLIGHT25> _FMISFLIGHT25s { get; set; }
        public virtual DbSet<_FMISLEG> _FMISLEGs { get; set; }
        public virtual DbSet<_FMISLEG25> _FMISLEG25s { get; set; }
        public virtual DbSet<_FMISREG> _FMISREGs { get; set; }
        public virtual DbSet<_FMISTRN> _FMISTRNs { get; set; }
        public virtual DbSet<_IdxFDPItem> _IdxFDPItems { get; set; }
        public virtual DbSet<_SC> _SCs { get; set; }
        public virtual DbSet<_VFMISASSIGN> _VFMISASSIGNs { get; set; }
        public virtual DbSet<_VFMISCREW> _VFMISCREWs { get; set; }
        public virtual DbSet<_VFMISTRN> _VFMISTRNs { get; set; }
        public virtual DbSet<_ViewFDP> _ViewFDPs { get; set; }
        public virtual DbSet<_ViewFlightsGantt> _ViewFlightsGantts { get; set; }
        public virtual DbSet<_ViewLegTime> _ViewLegTimes { get; set; }
        public virtual DbSet<_WeatherTafADD> _WeatherTafADDs { get; set; }
        public virtual DbSet<_XCREW> _XCREWs { get; set; }
        public virtual DbSet<_XFDP> _XFDPs { get; set; }
        public virtual DbSet<_XFDPITEM> _XFDPITEMs { get; set; }
        public virtual DbSet<_XFLT> _XFLTs { get; set; }
        public virtual DbSet<_XL> _XLs { get; set; }
        public virtual DbSet<_XLEG> _XLEGs { get; set; }
        public virtual DbSet<_XLEGASSIGN> _XLEGASSIGNs { get; set; }
        public virtual DbSet<_XLS2> _XLS2s { get; set; }
        public virtual DbSet<_XML> _XMLs { get; set; }
        public virtual DbSet<__MigrationHistory> __MigrationHistories { get; set; }
        public virtual DbSet<_dool> _dools { get; set; }
        public virtual DbSet<_fsg> _fsgs { get; set; }
        public virtual DbSet<_h2> _h2s { get; set; }
        public virtual DbSet<_index> _indices { get; set; }
        public virtual DbSet<_passcockpit> _passcockpits { get; set; }
        public virtual DbSet<_tempname> _tempnames { get; set; }
        public virtual DbSet<dood> doods { get; set; }
        public virtual DbSet<journals2> journals2s { get; set; }
        public virtual DbSet<newbl> newbls { get; set; }
        public virtual DbSet<updbl2> updbl2s { get; set; }
        public virtual DbSet<xy> xies { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Name=ConnectionStrings:EPDB");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Persian_100_CI_AI");

            modelBuilder.Entity<AbcTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AbcTest");

                entity.Property(e => e._0).HasColumnName("0");
            });

            modelBuilder.Entity<Ac_MSN>(entity =>
            {
                entity.ToTable("Ac_MSN");

                entity.HasComment("False = KG\r\nTrue = LBS");

                entity.Property(e => e.AC_Flag).HasComment("A/C Active or Passive Definition");

                entity.Property(e => e.Cabin_CrewVer).HasComment("A/C Crew Version");

                entity.Property(e => e.Cabin_Seat_Ver_B).HasComment("A/C Seat version Bussiness");

                entity.Property(e => e.Cabin_Seat_Ver_C).HasComment("A/C Seat version Economy");

                entity.Property(e => e.Cabin_Seat_Ver_F).HasComment("A/C Seat version First Class");

                entity.Property(e => e.Cabin_Seat_Ver_R).HasComment("A/C Seat version Royal");

                entity.Property(e => e.Color1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Color2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Last_WB)
                    .HasColumnType("smalldatetime")
                    .HasComment("A/C Weight & balance expiery Date");

                entity.Property(e => e.Lav_QTY).HasComment("A/C Lav data");

                entity.Property(e => e.MSN).HasComment("A/C MSN");

                entity.Property(e => e.ManDate)
                    .HasColumnType("date")
                    .HasComment("A/C Manufactuer Date");

                entity.Property(e => e.Previous_Register).HasMaxLength(50);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("A/C Reg.");

                entity.Property(e => e.TFC).HasComment("A/C total Flight Cycle");

                entity.Property(e => e.fkFlight_Range).HasComment("Foriegn Key for Range");

                entity.Property(e => e.pkAircraftMSN)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasComment("Primary Key for a/C MSN");

                entity.HasOne(d => d.AC_Model)
                    .WithMany(p => p.Ac_MSNs)
                    .HasForeignKey(d => d.AC_ModelID)
                    .HasConstraintName("FK_Ac_MSN_Ac_Model");

                entity.HasOne(d => d.AirlineOperators)
                    .WithMany(p => p.Ac_MSNs)
                    .HasForeignKey(d => d.AirlineOperatorsID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ac_MSN_G_AirlineOperators");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Ac_MSNs)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_acmsn_customer");
            });

            modelBuilder.Entity<Aircraft>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AircraftType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TotalSeat)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AircraftModel>(entity =>
            {
                entity.ToTable("AircraftModel");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.AircraftModels)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .HasConstraintName("FK_MODEL_TYPE");
            });

            modelBuilder.Entity<AircraftType>(entity =>
            {
                entity.ToTable("AircraftType");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.Manufacturer)
                    .WithMany(p => p.AircraftTypes)
                    .HasForeignKey(d => d.ManufacturerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ACTYPE_ORGAN");
            });

            modelBuilder.Entity<Airport>(entity =>
            {
                entity.ToTable("Airport");

                entity.HasIndex(e => e.IATA, "idx_iata");

                entity.Property(e => e.IATA).HasMaxLength(255);

                entity.Property(e => e.ICAO).HasMaxLength(255);

                entity.Property(e => e.ImportId)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Latitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Type).HasMaxLength(255);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Airports)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AIRPORT_CITY");
            });

            modelBuilder.Entity<AirportOpenFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AirportOpenFlight");

                entity.Property(e => e.City).HasMaxLength(255);

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.Country).HasMaxLength(255);

                entity.Property(e => e.F1).HasMaxLength(255);

                entity.Property(e => e.F2).HasMaxLength(255);

                entity.Property(e => e.F3).HasMaxLength(255);

                entity.Property(e => e.F4).HasMaxLength(255);

                entity.Property(e => e.F5).HasMaxLength(255);

                entity.Property(e => e.F6).HasMaxLength(255);

                entity.Property(e => e.IATA).HasMaxLength(255);

                entity.Property(e => e.ID).HasMaxLength(255);

                entity.Property(e => e.Lg).HasMaxLength(255);

                entity.Property(e => e.Lt).HasMaxLength(255);

                entity.Property(e => e.Title).HasMaxLength(255);
            });

            modelBuilder.Entity<AppCertificate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppCertificate");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppCrew");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.BaseAirport).HasMaxLength(255);

                entity.Property(e => e.CMCEmployedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CMCOccupation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.City).HasMaxLength(500);

                entity.Property(e => e.CityFullName).HasMaxLength(1009);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.Country)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CrewMemberCertificateExpireDate).HasColumnType("datetime");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUP).HasColumnType("date");

                entity.Property(e => e.DateNextCheckUP).HasColumnType("date");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateTypeExpire).HasColumnType("datetime");

                entity.Property(e => e.DateTypeIssue).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ICAOLPRValidUntil).HasColumnType("datetime");

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LicenceDescription).HasMaxLength(2000);

                entity.Property(e => e.LicenceIRExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LicenceInitialIssue).HasColumnType("datetime");

                entity.Property(e => e.LicenceIssueDate).HasColumnType("datetime");

                entity.Property(e => e.LicenceTitle).HasMaxLength(500);

                entity.Property(e => e.MedicalLimitation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NDTNumber).HasMaxLength(200);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ProficiencyDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RaitingCertificates).HasMaxLength(500);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.State).HasMaxLength(255);

                entity.Property(e => e.VisaExpireDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<AppCrewFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppCrewFlight");

                entity.Property(e => e.ALT1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT5)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ATCPlan)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ATL)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOffLocal).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.BlockOnLocal).HasColumnType("datetime");

                entity.Property(e => e.CARGO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelRemaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelTotal).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUsed).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IPName).HasMaxLength(1001);

                entity.Property(e => e.IPScheduleName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IStart).HasColumnType("datetime");

                entity.Property(e => e.JLApprover).HasMaxLength(1001);

                entity.Property(e => e.JLDate).HasColumnType("datetime");

                entity.Property(e => e.JLDateApproved).HasColumnType("datetime");

                entity.Property(e => e.JLDatePICApproved).HasColumnType("datetime");

                entity.Property(e => e.JLNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.JLSignedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JLUser).HasMaxLength(1001);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LTR)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.P1Name).HasMaxLength(1001);

                entity.Property(e => e.P1ScheduleName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.P2Name).HasMaxLength(1001);

                entity.Property(e => e.P2ScheduleName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PF)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PIC).HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.RVSM_FLT_CPT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_FLT_FO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_FLT_STBY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_CPT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_FO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_STBY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.SIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STADayLocal).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayLocal).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<AppCrewTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppCrewTime");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.RefDate).HasColumnType("date");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.YearMonthName).HasMaxLength(4000);
            });

            modelBuilder.Entity<AppFDPRest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppFDPRest");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.CanceledNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Customer)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateDutyEnd).HasColumnType("date");

                entity.Property(e => e.DateDutyStart).HasColumnType("date");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DaySTDLocal).HasColumnType("date");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FDPEnd).HasColumnType("datetime");

                entity.Property(e => e.FDPEndLocal).HasColumnType("datetime");

                entity.Property(e => e.FDPStart).HasColumnType("datetime");

                entity.Property(e => e.FDPStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.IStart).HasColumnType("datetime");

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark2).HasMaxLength(500);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.StandByStartLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppFTL>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppFTL");

                entity.Property(e => e.CDate).HasColumnType("date");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppFTLAb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppFTLAbs");

                entity.Property(e => e.CDate).HasColumnType("date");
            });

            modelBuilder.Entity<AppFuel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppFuel");

                entity.Property(e => e.ALT1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AVGFuelBurned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AVGFuelBurnedReg).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.AvgVar).HasColumnType("decimal(38, 15)");

                entity.Property(e => e.AvgVarReg).HasColumnType("decimal(38, 15)");

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.CARGO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FPTripFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FPVar).HasColumnType("numeric(38, 13)");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.IPName).HasMaxLength(1001);

                entity.Property(e => e.IPScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.P1Name).HasMaxLength(1001);

                entity.Property(e => e.P1ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P2Name).HasMaxLength(1001);

                entity.Property(e => e.P2ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PF)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PIC).HasMaxLength(1001);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Remaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.SIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.UpLift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<AppJL>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppJL");

                entity.Property(e => e.Flights).HasMaxLength(4000);

                entity.Property(e => e.INO)
                    .HasMaxLength(106)
                    .IsUnicode(false);

                entity.Property(e => e.JLNo)
                    .HasMaxLength(207)
                    .IsUnicode(false);

                entity.Property(e => e.PIC).HasMaxLength(1001);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Routes).HasMaxLength(4000);

                entity.Property(e => e.STDDay).HasColumnType("date");
            });

            modelBuilder.Entity<AppLeg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppLeg");

                entity.Property(e => e.ALT1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT5)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ATCPlan)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ATL)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOffLocal).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.BlockOnLocal).HasColumnType("datetime");

                entity.Property(e => e.CARGO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPRegister)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FPTripFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA2).HasMaxLength(255);

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelRemaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelTotal).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUsed).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IPName).HasMaxLength(1001);

                entity.Property(e => e.IPScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JLApprover).HasMaxLength(1001);

                entity.Property(e => e.JLDate).HasColumnType("datetime");

                entity.Property(e => e.JLDateApproved).HasColumnType("datetime");

                entity.Property(e => e.JLDatePICApproved).HasColumnType("datetime");

                entity.Property(e => e.JLNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.JLSignedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JLUser).HasMaxLength(1001);

                entity.Property(e => e.LTR)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.P1Name).HasMaxLength(1001);

                entity.Property(e => e.P1ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P2Name).HasMaxLength(1001);

                entity.Property(e => e.P2ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PF)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PIC).HasMaxLength(1001);

                entity.Property(e => e.RVSM_FLT_CPT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_FLT_FO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_FLT_STBY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_CPT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_FO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_STBY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.SIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STADayLocal).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayLocal).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportIATA2).HasMaxLength(255);
            });

            modelBuilder.Entity<AppLegHelper>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppLegHelper");

                entity.Property(e => e.IPName).HasMaxLength(1001);

                entity.Property(e => e.IPScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P1Name).HasMaxLength(1001);

                entity.Property(e => e.P1ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P2Name).HasMaxLength(1001);

                entity.Property(e => e.P2ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PIC).HasMaxLength(1001);

                entity.Property(e => e.SIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.STDDay).HasColumnType("date");
            });

            modelBuilder.Entity<AppLegJLHelper>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppLegJLHelper");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.PIC).HasMaxLength(1001);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayLocal).HasColumnType("date");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<AppLegOP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppLegOPS");

                entity.Property(e => e.ALT1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT5)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ASR_OPSConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.ASR_OPSRemark).HasMaxLength(4000);

                entity.Property(e => e.ASR_OPSRemarkDate).HasColumnType("datetime");

                entity.Property(e => e.ASR_OPSStaffConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.ASR_OPSStaffDateVisit).HasColumnType("datetime");

                entity.Property(e => e.ASR_OPSStaffRemark)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.ASR_OPSStaffRemarkDate).HasColumnType("datetime");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOffLocal).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.BlockOnLocal).HasColumnType("datetime");

                entity.Property(e => e.CARGO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPRegister)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelRemaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelTotal).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUsed).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IPName).HasMaxLength(1001);

                entity.Property(e => e.IPScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JLApprover).HasMaxLength(1001);

                entity.Property(e => e.JLDate).HasColumnType("datetime");

                entity.Property(e => e.JLDateApproved).HasColumnType("datetime");

                entity.Property(e => e.JLDatePICApproved).HasColumnType("datetime");

                entity.Property(e => e.JLNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.JLSignedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JLUser).HasMaxLength(1001);

                entity.Property(e => e.LTR)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.P1Name).HasMaxLength(1001);

                entity.Property(e => e.P1ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P2Name).HasMaxLength(1001);

                entity.Property(e => e.P2ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PF)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PIC).HasMaxLength(1001);

                entity.Property(e => e.RVSM_FLT_CPT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_FLT_FO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_FLT_STBY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_CPT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_FO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_STBY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.SIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STADayLocal).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayLocal).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.VR_OPSConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.VR_OPSRemark).HasMaxLength(4000);

                entity.Property(e => e.VR_OPSRemarkDate).HasColumnType("datetime");

                entity.Property(e => e.VR_OPSStaffConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.VR_OPSStaffDateVisit).HasColumnType("datetime");

                entity.Property(e => e.VR_OPSStaffRemark)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.VR_OPSStaffRemarkDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<AspNetRole>(entity =>
            {
                entity.HasIndex(e => e.Name, "RoleNameIndex")
                    .IsUnique();

                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetRoleClaim>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimValue)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AspNetUser>(entity =>
            {
                entity.HasIndex(e => e.UserName, "UserNameIndex")
                    .IsUnique();

                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetUserClaim>(entity =>
            {
                entity.HasIndex(e => e.UserId, "IX_UserId");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserLogin>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey, e.UserId })
                    .HasName("PK_dbo.AspNetUserLogins");

                entity.HasIndex(e => e.UserId, "IX_UserId");

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.ProviderKey).HasMaxLength(128);

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId })
                    .HasName("PK_dbo.AspNetUserRoles");

                entity.HasIndex(e => e.RoleId, "IX_RoleId");

                entity.HasIndex(e => e.UserId, "IX_UserId");

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.RoleId).HasMaxLength(128);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserToken>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider })
                    .HasName("PK__AspNetUs__7AB7EDC57CE24AB4");

                entity.Property(e => e.UserId)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Value)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Author>(entity =>
            {
                entity.ToTable("Author");

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(1000);
            });

            modelBuilder.Entity<AvgFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AvgFlight");

                entity.Property(e => e.Duration).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FlightH).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FlightM).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<BL>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BL");

                entity.Property(e => e.DES)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ORG)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Book>(entity =>
            {
                entity.ToTable("Book");

                entity.Property(e => e.Abstract).HasMaxLength(4000);

                entity.Property(e => e.BookKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Conference).HasMaxLength(500);

                entity.Property(e => e.DOI).HasMaxLength(200);

                entity.Property(e => e.DateConference).HasMaxLength(200);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDeadline).HasColumnType("datetime");

                entity.Property(e => e.DateEffective).HasMaxLength(500);

                entity.Property(e => e.DatePublished).HasColumnType("datetime");

                entity.Property(e => e.DateRelease).HasColumnType("date");

                entity.Property(e => e.DateValidUntil).HasColumnType("datetime");

                entity.Property(e => e.DeadLine).HasColumnType("datetime");

                entity.Property(e => e.Duration).HasMaxLength(100);

                entity.Property(e => e.Edition).HasMaxLength(500);

                entity.Property(e => e.ExternalUrl).HasMaxLength(1000);

                entity.Property(e => e.INSPECAccessionNumber).HasMaxLength(200);

                entity.Property(e => e.ISBN).HasMaxLength(500);

                entity.Property(e => e.ISSNElectronic).HasMaxLength(200);

                entity.Property(e => e.ISSNPrint).HasMaxLength(200);

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Pages).HasMaxLength(50);

                entity.Property(e => e.PublishedIn).HasMaxLength(500);

                entity.Property(e => e.Sender).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Books)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Book_Customer_Id");

                entity.HasOne(d => d.Publisher)
                    .WithMany(p => p.Books)
                    .HasForeignKey(d => d.PublisherId)
                    .HasConstraintName("FK_BOOK_ORG");
            });

            modelBuilder.Entity<BookAutor>(entity =>
            {
                entity.ToTable("BookAutor");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookAutors)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_BookAutor_Book_Id");

                entity.HasOne(d => d.PersonMisc)
                    .WithMany(p => p.BookAutors)
                    .HasForeignKey(d => d.PersonMiscId)
                    .HasConstraintName("FK_BookAutor_PersonMisc_Id");
            });

            modelBuilder.Entity<BookChapter>(entity =>
            {
                entity.ToTable("BookChapter");

                entity.Property(e => e.BookKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookChapters)
                    .HasForeignKey(d => d.BookId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_bc_b");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("fk_bf_bf");
            });

            modelBuilder.Entity<BookFile>(entity =>
            {
                entity.ToTable("BookFile");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookFiles)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_BookFile_Book_Id");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.BookFiles)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_BookFile_Document_Id");
            });

            modelBuilder.Entity<BookFileVisit>(entity =>
            {
                entity.ToTable("BookFileVisit");

                entity.Property(e => e.DateVisited).HasColumnType("datetime");
            });

            modelBuilder.Entity<BookKeyword>(entity =>
            {
                entity.ToTable("BookKeyword");

                entity.Property(e => e.Value).HasMaxLength(100);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookKeywords)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_BookKeyword_Book_Id");
            });

            modelBuilder.Entity<BookRelatedAircraftType>(entity =>
            {
                entity.ToTable("BookRelatedAircraftType");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.BookRelatedAircraftTypes)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BookAircraftType_AircraftType_Id");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookRelatedAircraftTypes)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_BookAircraftType_Book_Id");
            });

            modelBuilder.Entity<BookRelatedEmployee>(entity =>
            {
                entity.ToTable("BookRelatedEmployee");

                entity.Property(e => e.DateSigned).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookRelatedEmployees)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_BookRelatedEmployee_Book_Id");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.BookRelatedEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_BookRelatedEmployee_Employee_Id");
            });

            modelBuilder.Entity<BookRelatedGroup>(entity =>
            {
                entity.ToTable("BookRelatedGroup");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookRelatedGroups)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_BookRelatedGroup_Book_Id");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.BookRelatedGroups)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_BookRelatedGroup_JobGroup_Id");
            });

            modelBuilder.Entity<BookRelatedStudyField>(entity =>
            {
                entity.ToTable("BookRelatedStudyField");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookRelatedStudyFields)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_BookRelatedStudyField_Book_Id");
            });

            modelBuilder.Entity<BookSigned>(entity =>
            {
                entity.ToTable("BookSigned");

                entity.Property(e => e.DateSigned).HasColumnType("datetime");
            });

            modelBuilder.Entity<Box>(entity =>
            {
                entity.ToTable("Box");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DelayedReport).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");
            });

            modelBuilder.Entity<BoxCrew>(entity =>
            {
                entity.ToTable("BoxCrew");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.BoxCrews)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("fk_bc_box");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.BoxCrews)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_bc_emp");
            });

            modelBuilder.Entity<BoxFlightPlanItem>(entity =>
            {
                entity.ToTable("BoxFlightPlanItem");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.BoxFlightPlanItems)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("fk_bfp_box");
            });

            modelBuilder.Entity<BoxItem>(entity =>
            {
                entity.ToTable("BoxItem");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.BoxItems)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("fk_bi_b");

                entity.HasOne(d => d.PlanItem)
                    .WithMany(p => p.BoxItems)
                    .HasForeignKey(d => d.PlanItemId)
                    .HasConstraintName("fk_bi_pi");
            });

            modelBuilder.Entity<CaoBasic>(entity =>
            {
                entity.ToTable("CaoBasic");

                entity.Property(e => e.CaoGroup)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.CaoBasicLicenseType)
                    .WithMany(p => p.CaoBasics)
                    .HasForeignKey(d => d.CaoBasicLicenseTypeId)
                    .HasConstraintName("FK_CaoBasic_CaoBasicLicenseType");
            });

            modelBuilder.Entity<CaoBasicLicenseType>(entity =>
            {
                entity.ToTable("CaoBasicLicenseType");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.ResultTextCatA)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ResultTextCatB)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ResultTextCatC)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<CaoBasicType>(entity =>
            {
                entity.ToTable("CaoBasicType");

                entity.HasOne(d => d.CaoBasic)
                    .WithMany(p => p.CaoBasicTypes)
                    .HasForeignKey(d => d.CaoBasicId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaoBasicType_CaoBasic");

                entity.HasOne(d => d.CaoType)
                    .WithMany(p => p.CaoBasicTypes)
                    .HasForeignKey(d => d.CaoTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaoBasicType_CaoType");
            });

            modelBuilder.Entity<CaoCategory>(entity =>
            {
                entity.ToTable("CaoCategory");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CaoType>(entity =>
            {
                entity.ToTable("CaoType");

                entity.Property(e => e.CaoGroup)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.CaoTypes)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_CAOTYPE_AIRCRAFTTYPE");
            });

            modelBuilder.Entity<CateringItem>(entity =>
            {
                entity.ToTable("CateringItem");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.CateringItems)
                    .HasForeignKey(d => d.FlightId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_ctr_flight");

                entity.HasOne(d => d.Station)
                    .WithMany(p => p.CateringItems)
                    .HasForeignKey(d => d.StationId)
                    .HasConstraintName("fk_ctr_apt");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.CateringItems)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ctr_code");
            });

            modelBuilder.Entity<CateringItemCode>(entity =>
            {
                entity.ToTable("CateringItemCode");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CertificateType>(entity =>
            {
                entity.ToTable("CertificateType");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Certification>(entity =>
            {
                entity.ToTable("Certification");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.DateIRValid).HasColumnType("datetime");

                entity.Property(e => e.DateIssue).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.EmployedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Limitation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.No)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Occupation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Rating)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TypeTitle).HasMaxLength(500);
            });

            modelBuilder.Entity<Chapter>(entity =>
            {
                entity.ToTable("Chapter");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.Chapters)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_CHAPTER_BOOK");
            });

            modelBuilder.Entity<Charterer>(entity =>
            {
                entity.ToTable("Charterer");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NiraCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title2).HasMaxLength(500);
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.ToTable("City");

                entity.Property(e => e.AccuWeatherCode).HasMaxLength(255);

                entity.Property(e => e.Latitude).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ClaimRemark>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ClaimRemark");

                entity.Property(e => e.ClaimRemark1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ClaimRemark");

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.ToTable("Client");

                entity.Property(e => e.Id).HasMaxLength(500);

                entity.Property(e => e.AllowedOrigin).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Secret)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Coord>(entity =>
            {
                entity.ToTable("Coord");

                entity.Property(e => e.Lg).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.Lt).HasColumnType("decimal(20, 8)");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("Country");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Course>(entity =>
            {
                entity.ToTable("Course");

                entity.Property(e => e.DateDeadlineRegistration).HasColumnType("date");

                entity.Property(e => e.DateDeadlineRegistrationP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateEndP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateEndPractical).HasColumnType("date");

                entity.Property(e => e.DateEndPracticalP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateStartP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateStartPractical).HasColumnType("date");

                entity.Property(e => e.DateStartPracticalP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.Instructor).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);

                entity.HasOne(d => d.AircraftModel)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.AircraftModelId)
                    .HasConstraintName("FK_Course_ACMODEL");

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .HasConstraintName("FK_Course_ACTYPE");

                entity.HasOne(d => d.CaoType)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.CaoTypeId)
                    .HasConstraintName("FK_Course_CaoType");

                entity.HasOne(d => d.CourseType)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.CourseTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Course_Type");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("fk_course_instructor");
            });

            modelBuilder.Entity<CourseAircraftType>(entity =>
            {
                entity.ToTable("CourseAircraftType");

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.CourseAircraftTypes)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CRSACTYPE_ACTYPE");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseAircraftTypes)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_CRSACTYPE_CRS");
            });

            modelBuilder.Entity<CourseCatRate>(entity =>
            {
                entity.ToTable("CourseCatRate");

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseCatRates)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_CRSCATRATE_CRS");
            });

            modelBuilder.Entity<CourseCategory>(entity =>
            {
                entity.ToTable("CourseCategory");

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_CourseCategory_CourseCategory");
            });

            modelBuilder.Entity<CoursePerson>(entity =>
            {
                entity.Property(e => e.CertificateNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.DateIssue).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.ImgUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.StatusRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CoursePeople)
                    .HasForeignKey(d => d.CourseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_crp_cr");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.CoursePeople)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_CoursePeople_Person_Id");
            });

            modelBuilder.Entity<CourseRelatedAircraftType>(entity =>
            {
                entity.ToTable("CourseRelatedAircraftType");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.CourseRelatedAircraftTypes)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COURSEACTYPE_ACTYPE");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseRelatedAircraftTypes)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_COURSEACTYPE_COURSE");
            });

            modelBuilder.Entity<CourseRelatedCourse>(entity =>
            {
                entity.ToTable("CourseRelatedCourse");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseRelatedCourseCourses)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_COURSE_COURSE");

                entity.HasOne(d => d.RelatedCourse)
                    .WithMany(p => p.CourseRelatedCourseRelatedCourses)
                    .HasForeignKey(d => d.RelatedCourseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COURSE_COURSERELATED");
            });

            modelBuilder.Entity<CourseRelatedCourseType>(entity =>
            {
                entity.ToTable("CourseRelatedCourseType");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseRelatedCourseTypes)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_COURSETYPE_COURSE");

                entity.HasOne(d => d.CourseType)
                    .WithMany(p => p.CourseRelatedCourseTypes)
                    .HasForeignKey(d => d.CourseTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COURSETYPE_TYPE");
            });

            modelBuilder.Entity<CourseRelatedEmployee>(entity =>
            {
                entity.ToTable("CourseRelatedEmployee");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseRelatedEmployees)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_COURSEEMPLOYEE_COURSE");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.CourseRelatedEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_COURSEEMPLOYEE_EMPLOYEE");
            });

            modelBuilder.Entity<CourseRelatedGroup>(entity =>
            {
                entity.ToTable("CourseRelatedGroup");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseRelatedGroups)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_COURSEGROUP_COURSE");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.CourseRelatedGroups)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COURSEGROUP_GROUP");
            });

            modelBuilder.Entity<CourseRelatedStudyField>(entity =>
            {
                entity.ToTable("CourseRelatedStudyField");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseRelatedStudyFields)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_COURSESTUDYFIELD");
            });

            modelBuilder.Entity<CourseSMSHistory>(entity =>
            {
                entity.ToTable("CourseSMSHistory");

                entity.Property(e => e.Mobil)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Msg)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.PersonName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Statu)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CourseSession>(entity =>
            {
                entity.ToTable("CourseSession");

                entity.HasIndex(e => e.Key, "idx_csess_key");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndUtc).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartUtc).HasColumnType("datetime");

                entity.Property(e => e.Key)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseSessions)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("fk_session_course");
            });

            modelBuilder.Entity<CourseSessionFDP>(entity =>
            {
                entity.ToTable("CourseSessionFDP");

                entity.Property(e => e.SessionKey)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseSessionFDPs)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("fk_csf_course");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.CourseSessionFDPs)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_csf_emp");

                entity.HasOne(d => d.FDP)
                    .WithMany(p => p.CourseSessionFDPs)
                    .HasForeignKey(d => d.FDPId)
                    .HasConstraintName("fk_csf_fdp");
            });

            modelBuilder.Entity<CourseSessionPresence>(entity =>
            {
                entity.ToTable("CourseSessionPresence");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.SessionKey)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseSessionPresences)
                    .HasForeignKey(d => d.CourseId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_psco_course");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.CourseSessionPresences)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_psco_person");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.CourseSessionPresences)
                    .HasForeignKey(d => d.SessionId)
                    .HasConstraintName("FK_CourseSessionPresence_CourseSession_Id");
            });

            modelBuilder.Entity<CourseSessionPresenceDetail>(entity =>
            {
                entity.ToTable("CourseSessionPresenceDetail");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.SessionKey)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseSessionPresenceDetails)
                    .HasForeignKey(d => d.CourseId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_pscod_course");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.CourseSessionPresenceDetails)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_pscod_person");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.CourseSessionPresenceDetails)
                    .HasForeignKey(d => d.SessionId)
                    .HasConstraintName("FK_CourseSessionPresenceDetail_CourseSession_Id");
            });

            modelBuilder.Entity<CourseType>(entity =>
            {
                entity.ToTable("CourseType");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.HasOne(d => d.CertificateType)
                    .WithMany(p => p.CourseTypes)
                    .HasForeignKey(d => d.CertificateTypeId)
                    .HasConstraintName("fk_cty_certy");

                entity.HasOne(d => d.CourseCategory)
                    .WithMany(p => p.CourseTypes)
                    .HasForeignKey(d => d.CourseCategoryId)
                    .HasConstraintName("FK_UserCourseType_CourseCategory");

                entity.HasOne(d => d.LicenseResultBasic)
                    .WithMany(p => p.CourseTypes)
                    .HasForeignKey(d => d.LicenseResultBasicId)
                    .HasConstraintName("FK_CourseType_LicenseResultBasic");
            });

            modelBuilder.Entity<CourseTypeJobGroup>(entity =>
            {
                entity.HasKey(e => new { e.CourseTypeId, e.JobGroupId })
                    .HasName("PK__CourseTy__0A5E3E1382F36728");

                entity.ToTable("CourseTypeJobGroup");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.CourseType)
                    .WithMany(p => p.CourseTypeJobGroups)
                    .HasForeignKey(d => d.CourseTypeId)
                    .HasConstraintName("fk_ctjg_ct");

                entity.HasOne(d => d.JobGroup)
                    .WithMany(p => p.CourseTypeJobGroups)
                    .HasForeignKey(d => d.JobGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ctjg_jg");
            });

            modelBuilder.Entity<CrewAvailability>(entity =>
            {
                entity.ToTable("CrewAvailability");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrewAvailabilityStatus>(entity =>
            {
                entity.ToTable("CrewAvailabilityStatus");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrewPickupSM>(entity =>
            {
                entity.ToTable("CrewPickupSMS");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.Property(e => e.DutyDate).HasColumnType("datetime");

                entity.Property(e => e.DutyType).HasMaxLength(500);

                entity.Property(e => e.FltIds)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Flts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.RecMobile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RecName).HasMaxLength(500);

                entity.Property(e => e.RefId)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Routes)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sender)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.FDP)
                    .WithMany(p => p.CrewPickupSMs)
                    .HasForeignKey(d => d.FDPId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("cps_fdp");
            });

            modelBuilder.Entity<CrewSecretCode>(entity =>
            {
                entity.HasKey(e => new { e.CrewId, e.Code })
                    .HasName("PK__CrewSecr__F3993983347B45C3");

                entity.ToTable("CrewSecretCode");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrewTypeRequirement>(entity =>
            {
                entity.ToTable("CrewTypeRequirement");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.ToTable("Currency");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.Symbol).HasMaxLength(255);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("Customer");

                entity.Property(e => e.Address)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IDNo)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.MapUrl)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NID)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Phone1)
                    .HasMaxLength(100)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Phone2)
                    .HasMaxLength(100)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Phone3)
                    .HasMaxLength(100)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Website)
                    .HasMaxLength(200)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_CSUTOMER_COUNTRY");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_CUSTOMER_OPTION");
            });

            modelBuilder.Entity<Day>(entity =>
            {
                entity.HasKey(e => e.Date)
                    .HasName("PK__Day__77387D064D3A9941");

                entity.ToTable("Day");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<DayFlight>(entity =>
            {
                entity.ToTable("DayFlight");

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<DayGP>(entity =>
            {
                entity.HasKey(e => e.GDate)
                    .HasName("PK__DayGP__869A7EA480228815");

                entity.ToTable("DayGP");

                entity.Property(e => e.GDate).HasColumnType("datetime");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PYearName).HasMaxLength(255);

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);
            });

            modelBuilder.Entity<DelayAvgByAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DelayAvgByAirport");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<DelayAvgByAirportCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DelayAvgByAirportCategory");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<DelayAvgByCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DelayAvgByCategory");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DelayAvgByRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DelayAvgByRegister");

                entity.Property(e => e.Register).HasMaxLength(50);
            });

            modelBuilder.Entity<DelayAvgByRegisterCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DelayAvgByRegisterCategory");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);
            });

            modelBuilder.Entity<DelayCode>(entity =>
            {
                entity.ToTable("DelayCode");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ICategory)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.DelayCategory)
                    .WithMany(p => p.DelayCodes)
                    .HasForeignKey(d => d.DelayCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_dc_cdc");
            });

            modelBuilder.Entity<DelayCodeCategory>(entity =>
            {
                entity.ToTable("DelayCodeCategory");

                entity.Property(e => e.MainCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<DelayNotified>(entity =>
            {
                entity.ToTable("DelayNotified");
            });

            modelBuilder.Entity<DlyGrp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrp");

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<DlyGrpAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpAirport");

                entity.Property(e => e.FromAirportIATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<DlyGrpAirportAb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpAirportAbs");
            });

            modelBuilder.Entity<DlyGrpAirportCat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpAirportCat");

                entity.Property(e => e.FromAirportIATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<DlyGrpAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpAirportDaily");

                entity.Property(e => e.FromAirportIATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<DlyGrpAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpAll");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DlyGrpCat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpCat");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<DlyGrpCatAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpCatAirportDaily");

                entity.Property(e => e.FromAirportIATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<DlyGrpCatDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpCatDaily");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<DlyGrpCatRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpCatRegister");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DlyGrpCatRegisterDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpCatRegisterDaily");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DlyGrpDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpDaily");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<DlyGrpFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpFlight");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<DlyGrpFlightAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpFlightAirport");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<DlyGrpFlightCat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpFlightCat");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ICategory).HasMaxLength(500);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<DlyGrpFlightCatAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpFlightCatAirport");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ICategory).HasMaxLength(500);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<DlyGrpFlightCatRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpFlightCatRegister");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.ICategory).HasMaxLength(500);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);
            });

            modelBuilder.Entity<Doc>(entity =>
            {
                entity.HasKey(e => new { e.FDPId, e.FlightId, e.Type })
                    .HasName("PK__Doc__27536C5523F966C1");

                entity.ToTable("Doc");

                entity.Property(e => e.Type)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Data).IsUnicode(false);
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.ToTable("Document");

                entity.Property(e => e.FileType).HasMaxLength(500);

                entity.Property(e => e.FileUrl).HasMaxLength(1000);

                entity.Property(e => e.SysUrl).HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_DOC_DOC");
            });

            modelBuilder.Entity<EFBASR>(entity =>
            {
                entity.ToTable("EFBASR");

                entity.Property(e => e.AATATCInstruction).HasMaxLength(255);

                entity.Property(e => e.AATCallSign).HasMaxLength(255);

                entity.Property(e => e.AATClearedAltitude).HasMaxLength(255);

                entity.Property(e => e.AATFrequency).HasMaxLength(255);

                entity.Property(e => e.AATHeading).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.AATIsActionTaken).HasComment("Yes or No");

                entity.Property(e => e.AATIsRAFollowed).HasComment("Yes or No");

                entity.Property(e => e.AATLighting).HasMaxLength(255);

                entity.Property(e => e.AATMarkingColour).HasMaxLength(255);

                entity.Property(e => e.AATMinHorizontalSep)
                    .HasMaxLength(255)
                    .HasComment("M/Nm");

                entity.Property(e => e.AATMinVerticalSep)
                    .HasMaxLength(255)
                    .HasComment("Ft");

                entity.Property(e => e.AATOtherACType).HasMaxLength(255);

                entity.Property(e => e.AATReportedToATC).HasMaxLength(255);

                entity.Property(e => e.AATTypeRA).HasMaxLength(255);

                entity.Property(e => e.AATVerticalDeviation).HasMaxLength(255);

                entity.Property(e => e.ACConfigAP).HasMaxLength(255);

                entity.Property(e => e.ACConfigATHR).HasMaxLength(255);

                entity.Property(e => e.ACConfigFlap).HasMaxLength(255);

                entity.Property(e => e.ACConfigGear).HasMaxLength(255);

                entity.Property(e => e.ACConfigSlat).HasMaxLength(255);

                entity.Property(e => e.ACConfigSpoilers).HasMaxLength(255);

                entity.Property(e => e.ACWeight)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("KGs/Lbs");

                entity.Property(e => e.ActualWX).HasMaxLength(500);

                entity.Property(e => e.Altitude).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.BSBirdType).HasMaxLength(255);

                entity.Property(e => e.BSImpactDec).HasMaxLength(1000);

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EventTypeId).HasComment("ASR-AIRPROX/ATC-TCAS RA-WAKE TURBULENCE-BIRD STRIKE");

                entity.Property(e => e.FuelJettisoned)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("KGs/Lbs");

                entity.Property(e => e.JLDatePICApproved).HasColumnType("datetime");

                entity.Property(e => e.JLSignedBy)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LOCAirport).HasMaxLength(255);

                entity.Property(e => e.LOCGEOAltitude).HasMaxLength(255);

                entity.Property(e => e.LOCGEOLongtitude).HasMaxLength(255);

                entity.Property(e => e.LOCRunway).HasMaxLength(255);

                entity.Property(e => e.LOCStand).HasMaxLength(255);

                entity.Property(e => e.OPSConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.OPSRemark).HasMaxLength(4000);

                entity.Property(e => e.OPSRemarkDate).HasColumnType("datetime");

                entity.Property(e => e.OPSStaffConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.OPSStaffDateVisit).HasColumnType("datetime");

                entity.Property(e => e.OPSStaffRemark)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.OPSStaffRemarkDate).HasColumnType("datetime");

                entity.Property(e => e.OPSStaffUser)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OPSUser)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OccurrenceDate)
                    .HasColumnType("datetime")
                    .HasComment("Date of Occurrence & UTCTime");

                entity.Property(e => e.OthersInfo).HasMaxLength(2000);

                entity.Property(e => e.PIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PICDate).HasColumnType("date");

                entity.Property(e => e.Result).HasMaxLength(2000);

                entity.Property(e => e.SQUAWK).HasMaxLength(255);

                entity.Property(e => e.Summary).HasMaxLength(2000);

                entity.Property(e => e.TechLogItemNO)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TechLogPageNO)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WTAttitudeChangeDeg).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.WTDescribeVA).HasMaxLength(1000);

                entity.Property(e => e.WTHeading).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.WTIsAware).HasComment("Yes or No");

                entity.Property(e => e.WTIsBuffet).HasComment("Yes or No");

                entity.Property(e => e.WTIsStickShaker).HasComment("Yes or No");

                entity.Property(e => e.WTPrecedingAC).HasMaxLength(255);

                entity.Property(e => e.WTSuspect).HasMaxLength(1000);

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.EFBASRs)
                    .HasForeignKey(d => d.FlightId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_asr_flt");
            });

            modelBuilder.Entity<EFBBirdStrikeCAO>(entity =>
            {
                entity.ToTable("EFBBirdStrikeCAO");

                entity.Property(e => e.A_CPartEngineNO1).HasColumnName("A/CPartEngineNO1");

                entity.Property(e => e.A_CPartEngineNO2).HasColumnName("A/CPartEngineNO2");

                entity.Property(e => e.A_CPartEngineNO3).HasColumnName("A/CPartEngineNO3");

                entity.Property(e => e.A_CPartEngineNO4).HasColumnName("A/CPartEngineNO4");

                entity.Property(e => e.A_CPartFuselage).HasColumnName("A/CPartFuselage");

                entity.Property(e => e.A_CPartLandingGear).HasColumnName("A/CPartLandingGear");

                entity.Property(e => e.A_CPartLight).HasColumnName("A/CPartLight");

                entity.Property(e => e.A_CPartNose).HasColumnName("A/CPartNose");

                entity.Property(e => e.A_CPartOther_Specify_).HasColumnName("A/CPartOther(Specify)");

                entity.Property(e => e.A_CPartPropeller).HasColumnName("A/CPartPropeller");

                entity.Property(e => e.A_CPartRadom)
                    .HasColumnName("A/CPartRadom")
                    .HasComment("0:Struck 1:Damaged");

                entity.Property(e => e.A_CPartTail).HasColumnName("A/CPartTail");

                entity.Property(e => e.A_CPartWindShield)
                    .HasColumnName("A/CPartWindShield")
                    .HasComment("0:Struck 1:Damaged");

                entity.Property(e => e.A_CPartWing_Rotor).HasColumnName("A/CPartWing/Rotor");

                entity.Property(e => e.AerodromeName).HasMaxLength(255);

                entity.Property(e => e.BirdSpecies).HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EnRouteLoc).HasMaxLength(255);

                entity.Property(e => e.EngineModel).HasMaxLength(255);

                entity.Property(e => e.HeightAGl)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("Ft");

                entity.Property(e => e.IsEffect__None).HasColumnName("IsEffect\r\nNone");

                entity.Property(e => e.IsPrecipitationFog).HasComment("");

                entity.Property(e => e.IsPrecipitationRain).HasComment("");

                entity.Property(e => e.IsPrecipitationSnow).HasComment("");

                entity.Property(e => e.Remarks).HasMaxLength(1000);

                entity.Property(e => e.RunwayUsed).HasMaxLength(255);

                entity.Property(e => e.Speed_IAS_)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("Speed(IAS)")
                    .HasComment("kt");
            });

            modelBuilder.Entity<EFBConfidentialReport>(entity =>
            {
                entity.ToTable("EFBConfidentialReport");

                entity.Property(e => e.ActionTaken).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasMaxLength(255);

                entity.Property(e => e.EventSummary).HasMaxLength(2000);

                entity.Property(e => e.LocalTime).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Other).HasMaxLength(2000);

                entity.Property(e => e.Phone).HasMaxLength(255);

                entity.Property(e => e.Resolve).HasMaxLength(2000);

                entity.Property(e => e.SafetyRECO).HasMaxLength(2000);

                entity.Property(e => e.UTCTime).HasColumnType("datetime");

                entity.Property(e => e.User).HasMaxLength(255);

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.EFBConfidentialReports)
                    .HasForeignKey(d => d.FlightId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_cr_flight");
            });

            modelBuilder.Entity<EFBDSPRelease>(entity =>
            {
                entity.ToTable("EFBDSPRelease");

                entity.Property(e => e.ATCFlightPlanCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.ATCFlightPlanDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.AVSECIncidentReportCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.AVSECIncidentReportDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.ActualWXCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.ActualWXDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.ComputedFligthPlanCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.ComputedFligthPlanDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.DateConfirmed).HasColumnType("date");

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightReportCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.FlightReportDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.FlightSafetyReportCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.FlightSafetyReportDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.GeneralDeclarationCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.GeneralDeclarationDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.GoodDeclarationCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.GoodDeclarationDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.IPADCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.IPADDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.JLDatePICApproved).HasColumnType("datetime");

                entity.Property(e => e.JLSignedBy)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.JeppesenAirwayManualCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.JeppesenAirwayManualDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.LoadSheetCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.LoadSheetDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.MinFuelRequiredCFP).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.MinFuelRequiredPilotReq).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.NotamCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.NotamDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.OperationEngineeringCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.OperationEngineeringDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.PIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PIFCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.PIFDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.PermissionsCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.PermissionsDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.SigxWXCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.SigxWXDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.TOLndCardsCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.TOLndCardsDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.VoyageReportCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.VoyageReportDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.WXForcastCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.WXForcastDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.WindChartCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.WindChartDSPRemark).HasMaxLength(1000);

                entity.HasOne(d => d.Dispatcher)
                    .WithMany(p => p.EFBDSPReleases)
                    .HasForeignKey(d => d.DispatcherId)
                    .HasConstraintName("fk_EFB_EMP");

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.EFBDSPReleases)
                    .HasForeignKey(d => d.FlightId)
                    .HasConstraintName("fk_EFB_FI");
            });

            modelBuilder.Entity<EFBFlightIrregularity>(entity =>
            {
                entity.ToTable("EFBFlightIrregularity");

                entity.HasOne(d => d.VoyageReport)
                    .WithMany(p => p.EFBFlightIrregularities)
                    .HasForeignKey(d => d.VoyageReportId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk-Irr-vr");
            });

            modelBuilder.Entity<EFBOccurrenceCAO>(entity =>
            {
                entity.ToTable("EFBOccurrenceCAO");

                entity.Property(e => e.ACFlightPhaseRemark).HasMaxLength(500);

                entity.Property(e => e.Altitude).HasMaxLength(255);

                entity.Property(e => e.DamageDetail).HasMaxLength(1000);

                entity.Property(e => e.EquipmentAirportPlacard).HasMaxLength(255);

                entity.Property(e => e.EquipmentCompany).HasMaxLength(255);

                entity.Property(e => e.EquipmentContan).HasMaxLength(255);

                entity.Property(e => e.EquipmentDriverName).HasMaxLength(255);

                entity.Property(e => e.EquipmentIdNO).HasMaxLength(1);

                entity.Property(e => e.EquipmentType).HasMaxLength(255);

                entity.Property(e => e.EventTimeWX).HasMaxLength(1);

                entity.Property(e => e.ForcastWX).HasMaxLength(255);

                entity.Property(e => e.IsDay).HasComment("Day / Night");

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.OccurrenceDate).HasColumnType("datetime");

                entity.Property(e => e.OtherDangerousGood).HasMaxLength(255);

                entity.Property(e => e.PriorEventWX).HasMaxLength(255);
            });

            modelBuilder.Entity<EFBReason>(entity =>
            {
                entity.ToTable("EFBReason");

                entity.HasOne(d => d.VoyageReport)
                    .WithMany(p => p.EFBReasons)
                    .HasForeignKey(d => d.VoyageReportId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk-reason-vr");
            });

            modelBuilder.Entity<EFBVoyageReport>(entity =>
            {
                entity.ToTable("EFBVoyageReport");

                entity.Property(e => e.DateActioned).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("date");

                entity.Property(e => e.DatePICSignature).HasColumnType("date");

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.JLDatePICApproved).HasColumnType("datetime");

                entity.Property(e => e.JLSignedBy)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OPSConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.OPSRemark).HasMaxLength(4000);

                entity.Property(e => e.OPSRemarkDate).HasColumnType("datetime");

                entity.Property(e => e.OPSStaffConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.OPSStaffDateVisit).HasColumnType("datetime");

                entity.Property(e => e.OPSStaffRemark)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.OPSStaffRemarkDate).HasColumnType("datetime");

                entity.Property(e => e.OPSStaffUser)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OPSUser)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Route).HasMaxLength(255);

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.EFBVoyageReports)
                    .HasForeignKey(d => d.FlightId)
                    .HasConstraintName("fk_vr_flt");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("Employee");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(500);

                entity.HasOne(d => d.BaseAirport)
                    .WithMany(p => p.EmployeeBaseAirports)
                    .HasForeignKey(d => d.BaseAirportId)
                    .HasConstraintName("fk_emp_baseairport");

                entity.HasOne(d => d.CurrentLocationAirportNavigation)
                    .WithMany(p => p.EmployeeCurrentLocationAirportNavigations)
                    .HasForeignKey(d => d.CurrentLocationAirport)
                    .HasConstraintName("fk_emp_airport");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.Employee)
                    .HasForeignKey<Employee>(d => d.Id)
                    .HasConstraintName("FK_EMPLOYEE_PERSONCUSTOMER");
            });

            modelBuilder.Entity<EmployeeBookStatus>(entity =>
            {
                entity.ToTable("EmployeeBookStatus");

                entity.Property(e => e.DateDownload).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.EmployeeBookStatuses)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_EmployeeBookStatus_Book_Id");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeBookStatuses)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_EmployeeBookStatus_Employee_Id");
            });

            modelBuilder.Entity<EmployeeCalendar>(entity =>
            {
                entity.ToTable("EmployeeCalendar");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateCease).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.HasOne(d => d.FDP)
                    .WithMany(p => p.EmployeeCalendars)
                    .HasForeignKey(d => d.FDPId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ec_fdpid");
            });

            modelBuilder.Entity<EmployeeCalendarSplited>(entity =>
            {
                entity.ToTable("EmployeeCalendarSplited");

                entity.Property(e => e.DateCease).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.EmployeeCalendarSpliteds)
                    .HasForeignKey(d => d.BoxId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ecs_bc");

                entity.HasOne(d => d.Master)
                    .WithMany(p => p.EmployeeCalendarSpliteds)
                    .HasForeignKey(d => d.MasterId)
                    .HasConstraintName("fk_cd_cm");
            });

            modelBuilder.Entity<EmployeeLocation>(entity =>
            {
                entity.ToTable("EmployeeLocation");

                entity.Property(e => e.DateActiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateActiveEndP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateActiveStart).HasColumnType("datetime");

                entity.Property(e => e.DateActiveStartP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeLocations)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_EMPLOCATION_EMPLOYEE");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.EmployeeLocations)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOCATION_LOCATION");
            });

            modelBuilder.Entity<ExpFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ExpFlight");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalDay).HasColumnType("date");

                entity.Property(e => e.ArrivalDayLocal).HasColumnType("date");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureDay).HasColumnType("date");

                entity.Property(e => e.DepartureDayLocal).HasColumnType("date");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Destination).HasMaxLength(255);

                entity.Property(e => e.DestinationICAO).HasMaxLength(255);

                entity.Property(e => e.FlightNo).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.Origin).HasMaxLength(255);

                entity.Property(e => e.OriginICAO).HasMaxLength(255);

                entity.Property(e => e.PersianDate).HasMaxLength(500);

                entity.Property(e => e.PersianDayName).HasMaxLength(255);

                entity.Property(e => e.PersianMonthName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<ExtIdea>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ExtIdea");

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.City)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ClassID)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Days)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Expire).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Instructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Issue).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NID)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PersonalCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Extension>(entity =>
            {
                entity.ToTable("Extension");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<ExtensionHistory>(entity =>
            {
                entity.ToTable("ExtensionHistory");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.FDP)
                    .WithMany(p => p.ExtensionHistories)
                    .HasForeignKey(d => d.FDPId)
                    .HasConstraintName("fk_exh_fdp");
            });

            modelBuilder.Entity<FDM>(entity =>
            {
                entity.ToTable("FDM");

                entity.Property(e => e.Context)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasPrecision(0);

                entity.Property(e => e.EventName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.P1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.P2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PFLR)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Phase)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Severity)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StateName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TDDatetime).HasPrecision(0);

                entity.Property(e => e.TDRunway)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TODatetime).HasPrecision(0);

                entity.Property(e => e.TORunway)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Units)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValueName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.FDMs)
                    .HasForeignKey(d => d.FlightId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_fdm_flight");
            });

            modelBuilder.Entity<FDMView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMView");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Context)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasPrecision(0);

                entity.Property(e => e.EventName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.P1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.P2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PFLR)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Phase)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Severity)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StateName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TDDatetime).HasPrecision(0);

                entity.Property(e => e.TODatetime).HasPrecision(0);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Type)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Units)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValueName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FDP>(entity =>
            {
                entity.ToTable("FDP");

                entity.HasIndex(e => e.CrewId, "idx_fdp_crewid");

                entity.Property(e => e.CanceledNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.FDPReportingTime).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.GUID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.InitEnd).HasColumnType("datetime");

                entity.Property(e => e.InitFlights)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFromIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitGroup)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRank)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitRestTo).HasColumnType("datetime");

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitStart).HasColumnType("datetime");

                entity.Property(e => e.InitToIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Key)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MaxFDP).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark2).HasMaxLength(500);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.FDPs)
                    .HasForeignKey(d => d.BoxId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_fdp_box");

                entity.HasOne(d => d.Crew)
                    .WithMany(p => p.FDPs)
                    .HasForeignKey(d => d.CrewId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_fdp_employee");

                entity.HasOne(d => d.FDPNavigation)
                    .WithMany(p => p.InverseFDPNavigation)
                    .HasForeignKey(d => d.FDPId)
                    .HasConstraintName("fk_fdp_fdp");
            });

            modelBuilder.Entity<FDPExtra>(entity =>
            {
                entity.ToTable("FDPExtra");

                entity.HasIndex(e => e.FDPId, "idx_fpdextra_fdp");

                entity.Property(e => e.MaxFDP).HasColumnType("decimal(10, 5)");

                entity.HasOne(d => d.FDP)
                    .WithMany(p => p.FDPExtras)
                    .HasForeignKey(d => d.FDPId)
                    .HasConstraintName("fk_fdpextra_fdp");
            });

            modelBuilder.Entity<FDPItem>(entity =>
            {
                entity.ToTable("FDPItem");

                entity.HasIndex(e => e.FlightId, "idx_fdpi_f");

                entity.HasIndex(e => e.FDPId, "idx_fdpis_fdp");

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.FDP)
                    .WithMany(p => p.FDPItems)
                    .HasForeignKey(d => d.FDPId)
                    .HasConstraintName("fk_fdpitem_fdp");

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.FDPItems)
                    .HasForeignKey(d => d.FlightId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_fdpitem_flight");
            });

            modelBuilder.Entity<FDPLog>(entity =>
            {
                entity.ToTable("FDPLog");

                entity.Property(e => e.Action)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledRoute)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateAction).HasColumnType("datetime");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.InitEnd).HasColumnType("datetime");

                entity.Property(e => e.InitFlights)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFromIATA)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRank)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRestTo).HasColumnType("datetime");

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitStart).HasColumnType("datetime");

                entity.Property(e => e.InitToIATA)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FDPMaxDaily>(entity =>
            {
                entity.ToTable("FDPMaxDaily");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<FDPVisibleDate>(entity =>
            {
                entity.ToTable("FDPVisibleDate");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FLTGroup>(entity =>
            {
                entity.ToTable("FLTGroup");

                entity.Property(e => e.CDate).HasColumnType("date");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FLTGroupItem>(entity =>
            {
                entity.ToTable("FLTGroupItem");

                entity.HasOne(d => d.FLTGroup)
                    .WithMany(p => p.FLTGroupItems)
                    .HasForeignKey(d => d.FLTGroupId)
                    .HasConstraintName("fk_fltgrpitem_fltgrp");

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.FLTGroupItems)
                    .HasForeignKey(d => d.FlightId)
                    .HasConstraintName("fk_fltgrpitem_flt");
            });

            modelBuilder.Entity<FMISFLT>(entity =>
            {
                entity.HasKey(e => new { e.DateUTC, e.FltNo, e.DepStn, e.ArrStn })
                    .HasName("PK__FMISFLT__AC5E205AE27F2E7B");

                entity.ToTable("FMISFLT");

                entity.Property(e => e.DateUTC).HasColumnType("datetime");

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ATA).HasMaxLength(255);

                entity.Property(e => e.ATD).HasMaxLength(255);

                entity.Property(e => e.AlternateStation).HasMaxLength(255);

                entity.Property(e => e.BagPiece).HasMaxLength(255);

                entity.Property(e => e.Baggage).HasMaxLength(255);

                entity.Property(e => e.CargoPiece).HasMaxLength(255);

                entity.Property(e => e.CargoUnit).HasMaxLength(255);

                entity.Property(e => e.CargoWeight).HasMaxLength(255);

                entity.Property(e => e.DelayReason).HasMaxLength(255);

                entity.Property(e => e.Distance).HasMaxLength(255);

                entity.Property(e => e.ExtraBag).HasMaxLength(255);

                entity.Property(e => e.ExtraBagAmount).HasMaxLength(255);

                entity.Property(e => e.ExtraBagPiece).HasMaxLength(255);

                entity.Property(e => e.Female).HasMaxLength(255);

                entity.Property(e => e.FlightCharterer).HasMaxLength(255);

                entity.Property(e => e.FlightNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightType).HasMaxLength(255);

                entity.Property(e => e.FuelDefuel).HasMaxLength(255);

                entity.Property(e => e.FuelRemain).HasMaxLength(255);

                entity.Property(e => e.FuelTaxi).HasMaxLength(255);

                entity.Property(e => e.FuelTotal).HasMaxLength(255);

                entity.Property(e => e.FuelTrip).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(255);

                entity.Property(e => e.FuelUpLift).HasMaxLength(255);

                entity.Property(e => e.Key)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Male).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasColumnType("datetime");

                entity.Property(e => e.OnBlock).HasColumnType("datetime");

                entity.Property(e => e.OnRunway).HasColumnType("datetime");

                entity.Property(e => e.OverPax).HasMaxLength(255);

                entity.Property(e => e.PAXStation).HasMaxLength(255);

                entity.Property(e => e.Parking).HasMaxLength(255);

                entity.Property(e => e.PaxADL).HasMaxLength(255);

                entity.Property(e => e.PaxCHD).HasMaxLength(255);

                entity.Property(e => e.PaxINF).HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.SaveTime).HasMaxLength(255);

                entity.Property(e => e.SavingTime).HasMaxLength(255);

                entity.Property(e => e.StationIncome).HasMaxLength(255);

                entity.Property(e => e.StationIncomeCurrency).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Tag1).HasMaxLength(2000);

                entity.Property(e => e.Tag2).HasMaxLength(2000);

                entity.Property(e => e.Tag3).HasMaxLength(2000);

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TotalSeats).HasMaxLength(255);

                entity.Property(e => e.UpdateTime).HasMaxLength(255);

                entity.Property(e => e.UpdateUser).HasMaxLength(255);
            });

            modelBuilder.Entity<FMISLEG>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FMISLEG");

                entity.HasIndex(e => e.Key, "idx_xleg_copy1");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ArrTime).HasMaxLength(255);

                entity.Property(e => e.ArrTimeLCL).HasMaxLength(255);

                entity.Property(e => e.Change).HasMaxLength(255);

                entity.Property(e => e.ChangedCorrectedTime).HasMaxLength(255);

                entity.Property(e => e.Comment).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.DepTime).HasMaxLength(255);

                entity.Property(e => e.DepTimeLCL).HasMaxLength(255);

                entity.Property(e => e.FlightNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Flt).HasMaxLength(255);

                entity.Property(e => e.FltGroup).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.Holyday).HasMaxLength(255);

                entity.Property(e => e.HolydayName).HasMaxLength(255);

                entity.Property(e => e.Importance).HasMaxLength(255);

                entity.Property(e => e.Key)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateScher).HasMaxLength(255);

                entity.Property(e => e.LastUpdateTime).HasMaxLength(255);

                entity.Property(e => e.LegDesc).HasMaxLength(255);

                entity.Property(e => e.NormalCorrectedTime).HasMaxLength(255);

                entity.Property(e => e.RouteType).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STC).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.ScheduleGroup).HasMaxLength(255);

                entity.Property(e => e.StandardTime).HasMaxLength(255);

                entity.Property(e => e.TurnType).HasMaxLength(255);

                entity.Property(e => e.UpdateFlag).HasMaxLength(255);
            });

            modelBuilder.Entity<FMISLEGASSIGN>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FMISLEGASSIGN");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ArrTime).HasMaxLength(255);

                entity.Property(e => e.ArrTimeLCL).HasMaxLength(255);

                entity.Property(e => e.Change).HasMaxLength(255);

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.DepTime).HasMaxLength(255);

                entity.Property(e => e.DepTimeLCL).HasMaxLength(255);

                entity.Property(e => e.Expr1).HasMaxLength(255);

                entity.Property(e => e.Flt).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.InitGroup)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitRank)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.JobType).HasMaxLength(255);

                entity.Property(e => e.Key)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.Pos).HasMaxLength(255);

                entity.Property(e => e.Rank).HasMaxLength(255);

                entity.Property(e => e.Route).HasMaxLength(255);

                entity.Property(e => e.RouteType).HasMaxLength(255);

                entity.Property(e => e.ScheduleGroup).HasMaxLength(255);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Scheduler).HasMaxLength(255);

                entity.Property(e => e.StandardTime).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.TurnType).HasMaxLength(255);
            });

            modelBuilder.Entity<FTLFlightTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FTLFlightTime");

                entity.Property(e => e.STDDay).HasColumnType("date");
            });

            modelBuilder.Entity<FTLFlightTimeActual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FTLFlightTimeActual");

                entity.Property(e => e.STDDay).HasColumnType("date");
            });

            modelBuilder.Entity<FTLFlightTimeActualDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FTLFlightTimeActualDaily");

                entity.Property(e => e.STDDay).HasColumnType("date");
            });

            modelBuilder.Entity<FTLFlightTimeRatioMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FTLFlightTimeRatioMonthly");

                entity.Property(e => e.Ratio).HasColumnType("numeric(24, 12)");
            });

            modelBuilder.Entity<FTLFlightTimeRatioTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FTLFlightTimeRatioTotal");

                entity.Property(e => e.Ratio).HasColumnType("numeric(24, 12)");
            });

            modelBuilder.Entity<FTLSummary>(entity =>
            {
                entity.HasKey(e => new { e.CDate, e.CrewId })
                    .HasName("PK__FTLSumma__B21FDD89AB233C95");

                entity.ToTable("FTLSummary");

                entity.Property(e => e.CDate).HasColumnType("date");

                entity.Property(e => e.FlightCYear).HasComment("current year");

                entity.Property(e => e.FlightYear).HasComment("12 month");
            });

            modelBuilder.Entity<FileType>(entity =>
            {
                entity.ToTable("FileType");

                entity.Property(e => e.FileExtension)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.IconUrl).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<FixTimeRoute>(entity =>
            {
                entity.HasKey(e => e.Route)
                    .HasName("PK__FixTimeR__FF6D13710E491661");

                entity.ToTable("FixTimeRoute");

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FixTimeRouteHistory>(entity =>
            {
                entity.ToTable("FixTimeRouteHistory");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FlighPlanCalendar>(entity =>
            {
                entity.ToTable("FlighPlanCalendar");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlighPlanCalendars)
                    .HasForeignKey(d => d.FlightPlanId)
                    .HasConstraintName("fp_fpca_fp");
            });

            modelBuilder.Entity<FlightCard>(entity =>
            {
                entity.ToTable("FlightCard");

                entity.Property(e => e.FltNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Key)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Reg)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FlightChangeHistory>(entity =>
            {
                entity.ToTable("FlightChangeHistory");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.NewFlightNumber)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NewLanding).HasColumnType("datetime");

                entity.Property(e => e.NewOffBlock).HasColumnType("datetime");

                entity.Property(e => e.NewOnBlock).HasColumnType("datetime");

                entity.Property(e => e.NewSTA).HasColumnType("datetime");

                entity.Property(e => e.NewSTD).HasColumnType("datetime");

                entity.Property(e => e.NewTakeOff).HasColumnType("datetime");

                entity.Property(e => e.OldFlightNumer)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OldLanding).HasColumnType("datetime");

                entity.Property(e => e.OldOffBlock).HasColumnType("datetime");

                entity.Property(e => e.OldOnBlock).HasColumnType("datetime");

                entity.Property(e => e.OldSTA).HasColumnType("datetime");

                entity.Property(e => e.OldSTD).HasColumnType("datetime");

                entity.Property(e => e.OldTakeOff).HasColumnType("datetime");

                entity.Property(e => e.User).HasMaxLength(500);
            });

            modelBuilder.Entity<FlightCrew>(entity =>
            {
                entity.ToTable("FlightCrew");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Status).HasComment("Crew Change");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.FlightCrews)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("fk_flightcrew_employee");

                entity.HasOne(d => d.FlightInformation)
                    .WithMany(p => p.FlightCrews)
                    .HasForeignKey(d => d.FlightInformationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FlightCrew_FlightInformation");

                entity.HasOne(d => d.FlightPlanCrew)
                    .WithMany(p => p.FlightCrews)
                    .HasForeignKey(d => d.FlightPlanCrewId)
                    .HasConstraintName("fk_flightcrew_fpc");
            });

            modelBuilder.Entity<FlightCrewArchived>(entity =>
            {
                entity.ToTable("FlightCrewArchived");

                entity.HasIndex(e => e.FlightId, "idx_arc_flightid");

                entity.HasIndex(e => e.Position, "idx_arc_position");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FlightNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Position)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.FlightCrewArchiveds)
                    .HasForeignKey(d => d.FlightId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_FLTARC_FLT");
            });

            modelBuilder.Entity<FlightCrewChangeHistory>(entity =>
            {
                entity.ToTable("FlightCrewChangeHistory");

                entity.Property(e => e.DateChange).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FlightDatePart>(entity =>
            {
                entity.ToTable("FlightDatePart");

                entity.Property(e => e.DateAfter).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateRef).HasColumnType("datetime");
            });

            modelBuilder.Entity<FlightDelay>(entity =>
            {
                entity.ToTable("FlightDelay");

                entity.Property(e => e.HH).HasComment("Hour");

                entity.Property(e => e.ICategory)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MM).HasComment("Minute");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.HasOne(d => d.DelayCode)
                    .WithMany(p => p.FlightDelays)
                    .HasForeignKey(d => d.DelayCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FlightDelay_G_DelayCode");

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.FlightDelays)
                    .HasForeignKey(d => d.FlightId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FlightDelay_FlightInformation");
            });

            modelBuilder.Entity<FlightExtra>(entity =>
            {
                entity.ToTable("FlightExtra");

                entity.Property(e => e.Airline)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<FlightGroup>(entity =>
            {
                entity.ToTable("FlightGroup");

                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.FlightGroups)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_flightgroup_employee");
            });

            modelBuilder.Entity<FlightInformation>(entity =>
            {
                entity.ToTable("FlightInformation");

                entity.HasIndex(e => e.DepartureRemark, "idx_dep");

                entity.HasIndex(e => e.FlightPlanId, "idx_flt_fpi");

                entity.HasIndex(e => e.RegisterID, "idx_flt_registerid");

                entity.Property(e => e.ALT1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT5)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ATCPlan)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ATL)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.BlockH).HasComment("Actual Time Hours");

                entity.Property(e => e.BlockM).HasComment("Actual Time Minute");

                entity.Property(e => e.CARGO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPRegister)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.Charterer)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ChocksIn)
                    .HasColumnType("datetime")
                    .HasComment("ChocksIn");

                entity.Property(e => e.ChocksOut)
                    .HasColumnType("datetime")
                    .HasComment("ChocksOut");

                entity.Property(e => e.ChrCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ChrTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.DLI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DOI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DateApplied).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FPTripFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightH).HasComment("Flight Time Hours");

                entity.Property(e => e.FlightM).HasComment("Flight Time Minute");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GWLand)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("Gross Weight at Landing");

                entity.Property(e => e.GWTO)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("Gross Weight at take-off");

                entity.Property(e => e.JLDate).HasColumnType("datetime");

                entity.Property(e => e.JLDateApproved).HasColumnType("datetime");

                entity.Property(e => e.JLDatePICApproved).HasColumnType("datetime");

                entity.Property(e => e.JLLanding).HasColumnType("datetime");

                entity.Property(e => e.JLNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.JLOffBlock).HasColumnType("datetime");

                entity.Property(e => e.JLOnBlock).HasColumnType("datetime");

                entity.Property(e => e.JLSignedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JLTakeOff).HasColumnType("datetime");

                entity.Property(e => e.LILNW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LITOW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LIZFW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LNW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LTR)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Landing)
                    .HasColumnType("datetime")
                    .HasComment("Landing");

                entity.Property(e => e.MACLNW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MACTOW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MACZFW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PF)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PantryCode).HasMaxLength(1);

                entity.Property(e => e.RVSM_FLT_CPT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_FLT_FO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_FLT_STBY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_CPT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_FO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_STBY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.SIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.STA)
                    .HasColumnType("datetime")
                    .HasComment("Standard Time of Arrival");

                entity.Property(e => e.STD)
                    .HasColumnType("datetime")
                    .HasComment("Scheduled Time of Departure");

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StabTrimFifteen).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.StabTrimFive).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Takeoff)
                    .HasColumnType("datetime")
                    .HasComment("Takeoff");

                entity.Property(e => e.UPDNOTE)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ZFW).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.AirlineOperators)
                    .WithMany(p => p.FlightInformations)
                    .HasForeignKey(d => d.AirlineOperatorsID)
                    .HasConstraintName("FK_FlightInformation_G_AirlineOperators");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.FlightInformations)
                    .HasForeignKey(d => d.BoxId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_flighti_box");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.FlightInformations)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("fk_flightinformation_customer");

                entity.HasOne(d => d.FlightGroup)
                    .WithMany(p => p.FlightInformations)
                    .HasForeignKey(d => d.FlightGroupID)
                    .HasConstraintName("FK_FlightInformation_FlightGroup");

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlightInformations)
                    .HasForeignKey(d => d.FlightPlanId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_flightinformation_fpi");

                entity.HasOne(d => d.FlightStatus)
                    .WithMany(p => p.FlightInformations)
                    .HasForeignKey(d => d.FlightStatusID)
                    .HasConstraintName("FK_FlightInformation_FlightStatus");

                entity.HasOne(d => d.FromAirport)
                    .WithMany(p => p.FlightInformationFromAirports)
                    .HasForeignKey(d => d.FromAirportId)
                    .HasConstraintName("fk_flightinformation_fromairport");

                entity.HasOne(d => d.Register)
                    .WithMany(p => p.FlightInformations)
                    .HasForeignKey(d => d.RegisterID)
                    .HasConstraintName("FK_FlightInformation_Ac_MSN");

                entity.HasOne(d => d.ToAirport)
                    .WithMany(p => p.FlightInformationToAirports)
                    .HasForeignKey(d => d.ToAirportId)
                    .HasConstraintName("fk_flightinformation_toairport");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.FlightInformations)
                    .HasForeignKey(d => d.TypeID)
                    .HasConstraintName("FK_FlightInformation_Ac_Type");
            });

            modelBuilder.Entity<FlightLink>(entity =>
            {
                entity.HasKey(e => new { e.Flight1Id, e.Flight2Id })
                    .HasName("PK__FlightLi__919C0265DDC5053B");

                entity.ToTable("FlightLink");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Flight1)
                    .WithMany(p => p.FlightLinkFlight1s)
                    .HasForeignKey(d => d.Flight1Id)
                    .HasConstraintName("fk_fll_flight1");

                entity.HasOne(d => d.Flight2)
                    .WithMany(p => p.FlightLinkFlight2s)
                    .HasForeignKey(d => d.Flight2Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fll_flight2");
            });

            modelBuilder.Entity<FlightPermit>(entity =>
            {
                entity.ToTable("FlightPermit");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<FlightPlan>(entity =>
            {
                entity.ToTable("FlightPlan");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateFirst).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateLast).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.FlightPlans)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_flightplan_customrt");
            });

            modelBuilder.Entity<FlightPlanCalanderCrew>(entity =>
            {
                entity.ToTable("FlightPlanCalanderCrew");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.FlightPlanCalanderCrews)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("fk_crew_box");

                entity.HasOne(d => d.Calander)
                    .WithMany(p => p.FlightPlanCalanderCrews)
                    .HasForeignKey(d => d.CalanderId)
                    .HasConstraintName("fk_crew_cal");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.FlightPlanCalanderCrews)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_crew_employee");

                entity.HasOne(d => d.FlightPlanItem)
                    .WithMany(p => p.FlightPlanCalanderCrews)
                    .HasForeignKey(d => d.FlightPlanItemId)
                    .HasConstraintName("fk_crew_item");
            });

            modelBuilder.Entity<FlightPlanDay>(entity =>
            {
                entity.HasKey(e => new { e.FlightPlanId, e.Day })
                    .HasName("PK__FlightPl__FFEDC54E1E096E66");

                entity.ToTable("FlightPlanDay");

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlightPlanDays)
                    .HasForeignKey(d => d.FlightPlanId)
                    .HasConstraintName("fk_fpd_fp");
            });

            modelBuilder.Entity<FlightPlanGroup>(entity =>
            {
                entity.ToTable("FlightPlanGroup");

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlightPlanGroups)
                    .HasForeignKey(d => d.FlightPlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_flightplangroup_flightplan");
            });

            modelBuilder.Entity<FlightPlanItem>(entity =>
            {
                entity.ToTable("FlightPlanItem");

                entity.Property(e => e.DepartureRemark)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(255);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.Unknown).HasMaxLength(255);

                entity.HasOne(d => d.AirlineOperators)
                    .WithMany(p => p.FlightPlanItems)
                    .HasForeignKey(d => d.AirlineOperatorsID)
                    .HasConstraintName("fk_fpi_organ");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.FlightPlanItems)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("fk_fpi_box");

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlightPlanItems)
                    .HasForeignKey(d => d.FlightPlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fpi_flightplan");

                entity.HasOne(d => d.FromAirportNavigation)
                    .WithMany(p => p.FlightPlanItemFromAirportNavigations)
                    .HasForeignKey(d => d.FromAirport)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fpi_airportfrom");

                entity.HasOne(d => d.Register)
                    .WithMany(p => p.FlightPlanItems)
                    .HasForeignKey(d => d.RegisterID)
                    .HasConstraintName("fk_fpi_msn");

                entity.HasOne(d => d.ToAirportNavigation)
                    .WithMany(p => p.FlightPlanItemToAirportNavigations)
                    .HasForeignKey(d => d.ToAirport)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fpi_airportto");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.FlightPlanItems)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("fk_fpi_actype");
            });

            modelBuilder.Entity<FlightPlanItemPermit>(entity =>
            {
                entity.ToTable("FlightPlanItemPermit");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateFlight).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlightPlanItemPermits)
                    .HasForeignKey(d => d.FlightPlanId)
                    .HasConstraintName("fk_pip_plani");

                entity.HasOne(d => d.Permit)
                    .WithMany(p => p.FlightPlanItemPermits)
                    .HasForeignKey(d => d.PermitId)
                    .HasConstraintName("fk_pip_permit");
            });

            modelBuilder.Entity<FlightPlanMonth>(entity =>
            {
                entity.HasKey(e => new { e.FlightPlanId, e.Month })
                    .HasName("PK__FlightPl__FC478EA946B7FA1F");

                entity.ToTable("FlightPlanMonth");

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlightPlanMonths)
                    .HasForeignKey(d => d.FlightPlanId)
                    .HasConstraintName("fk_fpm_fp");
            });

            modelBuilder.Entity<FlightPlanRegister>(entity =>
            {
                entity.ToTable("FlightPlanRegister");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateApproved).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlightPlanRegisters)
                    .HasForeignKey(d => d.FlightPlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fpr_fp");

                entity.HasOne(d => d.PlannedRegister)
                    .WithMany(p => p.FlightPlanRegisterPlannedRegisters)
                    .HasForeignKey(d => d.PlannedRegisterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fpr_pmsn");

                entity.HasOne(d => d.Register)
                    .WithMany(p => p.FlightPlanRegisterRegisters)
                    .HasForeignKey(d => d.RegisterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fpr_msn");
            });

            modelBuilder.Entity<FlightPlanStatus>(entity =>
            {
                entity.ToTable("FlightPlanStatus");

                entity.Property(e => e.DateApproved).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Approver)
                    .WithMany(p => p.FlightPlanStatuses)
                    .HasForeignKey(d => d.ApproverId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_fpa_approver");

                entity.HasOne(d => d.FlighPlan)
                    .WithMany(p => p.FlightPlanStatuses)
                    .HasForeignKey(d => d.FlighPlanId)
                    .HasConstraintName("fk_fpa_fp");
            });

            modelBuilder.Entity<FlightRegisterChangeLog>(entity =>
            {
                entity.ToTable("FlightRegisterChangeLog");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(1000);
            });

            modelBuilder.Entity<FlightRoute>(entity =>
            {
                entity.ToTable("FlightRoute");

                entity.Property(e => e.Equipment)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FlightStatus>(entity =>
            {
                entity.ToTable("FlightStatus");

                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.BgColor).HasMaxLength(255);

                entity.Property(e => e.Class).HasMaxLength(255);

                entity.Property(e => e.Color).HasMaxLength(255);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FlightStatus1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("FlightStatus");
            });

            modelBuilder.Entity<FlightStatusLog>(entity =>
            {
                entity.ToTable("FlightStatusLog");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(50);

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.FlightStatusLogs)
                    .HasForeignKey(d => d.FlightID)
                    .HasConstraintName("FK_FlightStatusLog_FlightInformation");
            });

            modelBuilder.Entity<FlightStatusWeather>(entity =>
            {
                entity.ToTable("FlightStatusWeather");

                entity.Property(e => e.CloudCover).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.DewPoint).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Humidity).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Icon).HasMaxLength(500);

                entity.Property(e => e.Pressure).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Summary).HasMaxLength(1000);

                entity.Property(e => e.Temprature).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Visibility).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.WindBearing).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.WindSpeed).HasColumnType("decimal(10, 4)");

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.FlightStatusWeathers)
                    .HasForeignKey(d => d.FlightId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fsw_flight");
            });

            modelBuilder.Entity<FlightTemplate>(entity =>
            {
                entity.ToTable("FlightTemplate");

                entity.HasIndex(e => new { e.FlightNumber, e.OriginId, e.DestinationId }, "fk_fltemp_idx");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Origin)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FlightUploadHistory>(entity =>
            {
                entity.ToTable("FlightUploadHistory");

                entity.Property(e => e.DateCreate).HasPrecision(0);

                entity.Property(e => e.DateFrom).HasPrecision(0);

                entity.Property(e => e.DateTo).HasPrecision(0);

                entity.Property(e => e.FileName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Key)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.URL)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FormVacation>(entity =>
            {
                entity.ToTable("FormVacation");

                entity.Property(e => e.OperationRemak)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonStr)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.SchedulingRemark)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FuelAvg>(entity =>
            {
                entity.HasKey(e => new { e.FromAirportIATA, e.ToAirportIATA, e.TypeId })
                    .HasName("PK__FuelAvg__4F09351D82BA0D8E");

                entity.ToTable("FuelAvg");

                entity.Property(e => e.FromAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AVGFuelBurned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AircraftType)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FuelAvgReg>(entity =>
            {
                entity.HasKey(e => new { e.FromAirportIATA, e.ToAirportIATA, e.TypeId, e.RegisterID })
                    .HasName("PK__FuelAvgR__52D3CBE42A427708");

                entity.ToTable("FuelAvgReg");

                entity.Property(e => e.FromAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AVGFuelBurned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AircraftType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GRPCourseTypeExpiring>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GRPCourseTypeExpiring");

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<GRPCourseTypeExpiringGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GRPCourseTypeExpiringGroup");

                entity.Property(e => e.JobGroup)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupCode2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupMain).HasMaxLength(500);

                entity.Property(e => e.JobGroupMainCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<GRPCourseTypeExpiringMainGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GRPCourseTypeExpiringMainGroup");

                entity.Property(e => e.JobGroupMain)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroupMainCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<GRPGroupsCourseTypeExpiring>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GRPGroupsCourseTypeExpiring");

                entity.Property(e => e.JobGroup)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroupCode2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupMain)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroupMainCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<GRPGroupsExpiring>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GRPGroupsExpiring");

                entity.Property(e => e.JobGroup)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroupCode2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupMain)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroupMainCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GRPMainGroupsExpiring>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GRPMainGroupsExpiring");

                entity.Property(e => e.JobGroupMain)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroupMainCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<G_DelayCode>(entity =>
            {
                entity.ToTable("G_DelayCode");

                entity.Property(e => e.DelayCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentID)
                    .HasConstraintName("FK_G_DelayCode_G_DelayCode");
            });

            modelBuilder.Entity<G_OpOneDelayType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("G_OpOneDelayType");

                entity.Property(e => e.DelayCodeStartWith)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.PKG_OpOneDelayType).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<GrpAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpAirport");

                entity.Property(e => e.FromAirportIATA)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<GrpDelayCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpDelayCategory");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<GrpFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpFlight");

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<GrpFlightAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpFlightAirport");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<GrpFlightAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpFlightAirportDaily");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<GrpFlightCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpFlightCal");

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.TotalPaxAllDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.TotalPaxDiff).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<GrpFlightDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpFlightDaily");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<GrpFlightReg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpFlightReg");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);
            });

            modelBuilder.Entity<GrpSessionAttendance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpSessionAttendance");

                entity.Property(e => e.AttendancePercent).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.SessionEnd).HasColumnType("datetime");

                entity.Property(e => e.SessionKey)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SessionStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperAirportFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperAirportFlight");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.STDDay).HasColumnType("date");
            });

            modelBuilder.Entity<HelperApplicableCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperApplicableCourse");
            });

            modelBuilder.Entity<HelperBook>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBook");

                entity.Property(e => e.Abstract).HasMaxLength(4000);

                entity.Property(e => e.Category).HasMaxLength(1000);

                entity.Property(e => e.DOI).HasMaxLength(200);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateExposure).HasColumnType("datetime");

                entity.Property(e => e.DateRelease).HasColumnType("date");

                entity.Property(e => e.ISBN).HasMaxLength(500);

                entity.Property(e => e.ISSNElectronic).HasMaxLength(200);

                entity.Property(e => e.ISSNPrint).HasMaxLength(200);

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pages).HasMaxLength(50);

                entity.Property(e => e.Publisher).HasMaxLength(1000);

                entity.Property(e => e.PublisherWebsite).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HelperBookApplicableEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBookApplicableEmployee");
            });

            modelBuilder.Entity<HelperBookApplicableEmployeeStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBookApplicableEmployeeStatus");

                entity.Property(e => e.DateDownload).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperBookVisited>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBookVisited");
            });

            modelBuilder.Entity<HelperBox>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBox");

                entity.Property(e => e.DefaultEnd).HasColumnType("datetime");

                entity.Property(e => e.DefaultStart).HasColumnType("datetime");

                entity.Property(e => e.DelayedReport).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperBoxCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBoxCrew");

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<HelperBoxCrewTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBoxCrewTime");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperBoxFlightPlanItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBoxFlightPlanItem");

                entity.Property(e => e.ItemArrival).HasColumnType("datetime");

                entity.Property(e => e.ItemDeparture).HasColumnType("datetime");

                entity.Property(e => e.PairItemArrival).HasColumnType("datetime");

                entity.Property(e => e.PairItemDeparture).HasColumnType("datetime");

                entity.Property(e => e.SplitDutyExtension).HasColumnType("numeric(12, 1)");
            });

            modelBuilder.Entity<HelperBoxSector>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBoxSector");
            });

            modelBuilder.Entity<HelperBoxTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBoxTime");

                entity.Property(e => e.ActualArrival).HasColumnType("datetime");

                entity.Property(e => e.ActualDeparture).HasColumnType("datetime");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperCalanderAssignedRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCalanderAssignedRegister");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<HelperCalendarDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCalendarDate");

                entity.Property(e => e.CDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperCertAVSEC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertAVSEC");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertCCRM>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertCCRM");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertCMC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertCMC");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertCOLDWX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertCOLDWX");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertCRM>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertCRM");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertDG>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertDG");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertFIRSTAID>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertFIRSTAID");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertHOTWX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertHOTWX");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertLICENSE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertLICENSE");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertLINE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertLINE");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertLPC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertLPC");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertLPR>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertLPR");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertMEDICAL>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertMEDICAL");

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.IssueDate).HasColumnType("date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertOPC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertOPC");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertRECURRENT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertRECURRENT");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertSEPTP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertSEPTP");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertSEPTT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertSEPTT");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertSM>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertSMS");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertTRE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertTRE");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertTRI>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertTRI");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertificate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertificate");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeTitle).HasMaxLength(300);

                entity.Property(e => e.CerNumber).HasMaxLength(500);

                entity.Property(e => e.CerUrl).HasMaxLength(255);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CourseCalendarType).HasMaxLength(1000);

                entity.Property(e => e.CourseCategoryTitle).HasMaxLength(500);

                entity.Property(e => e.CourseDateStart).HasColumnType("date");

                entity.Property(e => e.CourseDepartment).HasMaxLength(500);

                entity.Property(e => e.CourseDuration2).HasMaxLength(1031);

                entity.Property(e => e.CourseDurationUnit).HasMaxLength(1000);

                entity.Property(e => e.CourseInstructor).HasMaxLength(500);

                entity.Property(e => e.CourseLocation).HasMaxLength(500);

                entity.Property(e => e.CourseNo).HasMaxLength(500);

                entity.Property(e => e.CourseOrganization).HasMaxLength(1000);

                entity.Property(e => e.CourseRemark).HasMaxLength(2000);

                entity.Property(e => e.CourseTitle).HasMaxLength(500);

                entity.Property(e => e.CourseTrainingDirector).HasMaxLength(500);

                entity.Property(e => e.CourseTypeTitle).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateIssueNDT).HasColumnType("date");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NDTIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.NDTNumber).HasMaxLength(200);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HelperCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCourse");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<HelperCrewTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCrewTime");

                entity.Property(e => e.CDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperCrewTimeSubQuery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCrewTimeSubQueries");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DateStr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Year_Duty).HasColumnType("numeric(2, 1)");
            });

            modelBuilder.Entity<HelperCurrentLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCurrentLocation");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDay");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateStr)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HelperDelayAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayAirportDaily");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperDelayAirportMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayAirportMonthly");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayTotalRatio).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperDelayAllMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayAllMonthly");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HelperDelayCatAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayCatAirportDaily");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperDelayCatAirportMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayCatAirportMonthly");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperDelayCatDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayCatDaily");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperDelayCatMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayCatMonthly");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperDelayCatRegisterDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayCatRegisterDaily");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HelperDelayCatRegisterMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayCatRegisterMonthly");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HelperDelayDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayDaily");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.OnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperDelayMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayMonthly");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.OnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperDutyCalendar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDutyCalendar");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DateEndActual).HasColumnType("datetime");

                entity.Property(e => e.DateEndActualLocal).HasColumnType("datetime");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<HelperDutyStart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDutyStart");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperEmployee");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HelperEmployeeName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperEmployeeName");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.UserId).HasMaxLength(128);
            });

            modelBuilder.Entity<HelperFDP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDP");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FDPEnd).HasColumnType("datetime");

                entity.Property(e => e.FDPStart).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperFDPBox>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPBox");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLCL).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperFDPDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPDates");

                entity.Property(e => e.CDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperFDPFirst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPFirst");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperFDPItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPItem");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HelperFDPItemNODH>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPItemNODH");

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HelperFDPItemSex>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPItemSex");

                entity.Property(e => e.Sex).HasMaxLength(1000);
            });

            modelBuilder.Entity<HelperFDPRanked>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPRanked");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperFDPRest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPRest");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperFDPTemplateMFError>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPTemplateMFError");
            });

            modelBuilder.Entity<HelperFixTimeRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFixTimeRoute");

                entity.Property(e => e.Route)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HelperFlightCrewMatchingList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightCrewMatchingList");
            });

            modelBuilder.Entity<HelperFlightCrewSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightCrewSum");
            });

            modelBuilder.Entity<HelperFlightLink>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightLink");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);
            });

            modelBuilder.Entity<HelperFlightMovement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightMovement");

                entity.Property(e => e.ActualArrival).HasColumnType("datetime");

                entity.Property(e => e.ActualDeparture).HasColumnType("datetime");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperFlightPlanItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightPlanItem");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<HelperFlightPlanItemCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightPlanItemCrew");
            });

            modelBuilder.Entity<HelperFlightPlanRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightPlanRegister");
            });

            modelBuilder.Entity<HelperFlightPlanRegisterAssigned>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightPlanRegisterAssigned");

                entity.Property(e => e.MaxDateTo).HasColumnType("datetime");

                entity.Property(e => e.MinDateFrom).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperFlightPlanType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightPlanType");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<HelperFlightSexSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightSexSum");

                entity.Property(e => e.Sex).HasMaxLength(1000);
            });

            modelBuilder.Entity<HelperFuelAVG>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFuelAVG");

                entity.Property(e => e.AVGFuelBurned).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperFuelAvgReg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFuelAvgReg");

                entity.Property(e => e.AVGFuelBurned).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperFuelMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFuelMonthly");

                entity.Property(e => e.AvgUsed).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.FPFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.FPFuelKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.FPFuelPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.FPFuelPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.MaxUsed).HasColumnType("decimal(20, 6)");

                entity.Property(e => e.MinUsed).HasColumnType("decimal(20, 6)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.SeatBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFPFuel).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTimeAvg).HasColumnType("numeric(38, 18)");

                entity.Property(e => e.UsedPerSeatBlockTimeAvg).HasColumnType("numeric(38, 18)");

                entity.Property(e => e.UsedPerUpLift).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<HelperFuelMonthlyDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFuelMonthlyDay");

                entity.Property(e => e.MaxUsed).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");
            });

            modelBuilder.Entity<HelperFuelMonthlyReg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFuelMonthlyReg");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.FPFuelPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<HelperFuelMonthlyRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFuelMonthlyRoute");

                entity.Property(e => e.FPFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.FPFuelPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<HelperFuelMonthlyType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFuelMonthlyType");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.FPFuelPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<HelperGrpFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperGrpFlight");

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperIdeaUnique>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperIdeaUnique");

                entity.Property(e => e.ClassID)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CourseType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CrewNID).HasMaxLength(500);

                entity.Property(e => e.CrewPID).HasMaxLength(500);

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HelperLayOver>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperLayOver");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.STADayLocal).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STDDayLocal).HasColumnType("date");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperLayOverRanked>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperLayOverRanked");

                entity.Property(e => e.DestinationIATA).HasMaxLength(255);

                entity.Property(e => e.DestinationIATALag).HasMaxLength(255);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STADayLag).HasColumnType("date");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HelperLayOverSource>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperLayOverSource");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.STADayLocal).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STDDayLocal).HasColumnType("date");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperMSN>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperMSN");

                entity.Property(e => e.MaxWeighUnit)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperMatchingList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperMatchingList");
            });

            modelBuilder.Entity<HelperMaxFDP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperMaxFDP");
            });

            modelBuilder.Entity<HelperPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperPerson");

                entity.Property(e => e.DateExpireNDT).HasColumnType("date");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<HelperPersonModified>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperPersonModified");

                entity.Property(e => e.DateExpireNDT).HasColumnType("date");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<HelperRealMSN>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperRealMSN");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HelperRestPeriod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperRestPeriod");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperUsedAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperUsedAirport");

                entity.Property(e => e.Airport).HasMaxLength(255);
            });

            modelBuilder.Entity<IDEAPEOPLE2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IDEAPEOPLE2");

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.NID).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);
            });

            modelBuilder.Entity<IDEAPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IDEAPEOPLE");

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.NID).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.PID).HasMaxLength(255);
            });

            modelBuilder.Entity<IMPORT2020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IMPORT2020");

                entity.Property(e => e.ADULT).HasMaxLength(255);

                entity.Property(e => e.BAG).HasMaxLength(255);

                entity.Property(e => e.CARGO).HasMaxLength(255);

                entity.Property(e => e.CHILD).HasMaxLength(255);

                entity.Property(e => e.DATE).HasMaxLength(255);

                entity.Property(e => e.FLIGHTNO).HasMaxLength(255);

                entity.Property(e => e.FROM).HasMaxLength(255);

                entity.Property(e => e.INFANT).HasMaxLength(255);

                entity.Property(e => e.LANDING).HasMaxLength(255);

                entity.Property(e => e.OFFBLOCK).HasMaxLength(255);

                entity.Property(e => e.ONBLOCK).HasMaxLength(255);

                entity.Property(e => e.REGISTER).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STATUS).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.TAKEOFF).HasMaxLength(255);

                entity.Property(e => e.TO).HasMaxLength(255);

                entity.Property(e => e.TOTAL).HasMaxLength(255);

                entity.Property(e => e.UPLIFT).HasMaxLength(255);

                entity.Property(e => e.USED).HasMaxLength(255);
            });

            modelBuilder.Entity<IPAccess>(entity =>
            {
                entity.ToTable("IPAccess");

                entity.Property(e => e.IP)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Idea>(entity =>
            {
                entity.ToTable("Idea");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.BeginDate).HasMaxLength(255);

                entity.Property(e => e.City).HasMaxLength(255);

                entity.Property(e => e.ClassID).HasMaxLength(255);

                entity.Property(e => e.CourseCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CourseTitle).HasMaxLength(255);

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasMaxLength(255);

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PID).HasMaxLength(255);

                entity.Property(e => e.expire).HasMaxLength(255);

                entity.Property(e => e.instructor).HasMaxLength(255);

                entity.Property(e => e.issue).HasMaxLength(255);
            });

            modelBuilder.Entity<IdeaAll>(entity =>
            {
                entity.ToTable("IdeaAll");

                entity.Property(e => e.ClassID)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NID)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalStr)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.PID)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IdeaSession>(entity =>
            {
                entity.ToTable("IdeaSession");

                entity.Property(e => e.ClassID)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NID)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PID)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SessionsStr)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IdeaSessionItem>(entity =>
            {
                entity.ToTable("IdeaSessionItem");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromUtc).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToUtc).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.FDP)
                    .WithMany(p => p.IdeaSessionItems)
                    .HasForeignKey(d => d.FDPId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_sesitem_fdp");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.IdeaSessionItems)
                    .HasForeignKey(d => d.SessionId)
                    .HasConstraintName("fk_sesitem_ses");
            });

            modelBuilder.Entity<IdeaSessionItemTemp>(entity =>
            {
                entity.ToTable("IdeaSessionItemTemp");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromUtc).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToUtc).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.IdeaSessionItemTemps)
                    .HasForeignKey(d => d.SessionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_sessitem_sesstemp");
            });

            modelBuilder.Entity<IdeaSessionTemp>(entity =>
            {
                entity.ToTable("IdeaSessionTemp");

                entity.Property(e => e.ClassID)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NID)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PID)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SessionsStr)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IdeaSessionUpdateError>(entity =>
            {
                entity.ToTable("IdeaSessionUpdateError");

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.Flights)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SessionDateFrom).HasColumnType("datetime");

                entity.Property(e => e.SessionDateTo).HasColumnType("datetime");

                entity.Property(e => e.VisitDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<IdeaUnique>(entity =>
            {
                entity.ToTable("IdeaUnique");

                entity.Property(e => e.ClassID)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NID)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalStr)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.PID)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IdxFDPItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IdxFDPItem");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");
            });

            modelBuilder.Entity<ImportPlan>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.Base, e.Reg, e.No, e.From, e.To })
                    .HasName("PK__ImportPl__AE719FA8E7193C53")
                    .IsClustered(false);

                entity.ToTable("ImportPlan");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Base).HasMaxLength(255);

                entity.Property(e => e.Reg).HasMaxLength(255);

                entity.Property(e => e.No).HasMaxLength(255);

                entity.Property(e => e.From).HasMaxLength(255);

                entity.Property(e => e.To).HasMaxLength(255);

                entity.Property(e => e.Duration).HasMaxLength(255);

                entity.Property(e => e.Line).HasMaxLength(255);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<IrimoFlightFolderHistory>(entity =>
            {
                entity.ToTable("IrimoFlightFolderHistory");

                entity.Property(e => e.DT)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FL)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VT)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JobGroup>(entity =>
            {
                entity.ToTable("JobGroup");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_JOBGROUP_PARENT");
            });

            modelBuilder.Entity<Journal>(entity =>
            {
                entity.ToTable("Journal");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<LibraryFolder>(entity =>
            {
                entity.ToTable("LibraryFolder");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LicenseResultBasic>(entity =>
            {
                entity.ToTable("LicenseResultBasic");

                entity.Property(e => e.Result).HasMaxLength(200);
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.ToTable("Location");

                entity.Property(e => e.Address)
                    .HasMaxLength(2000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.FullCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(200)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Website)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Locations)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LOCATION_CUSTOMER");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_LOCATION_LOCATION");

                entity.HasOne(d => d.RootLocationNavigation)
                    .WithMany(p => p.InverseRootLocationNavigation)
                    .HasForeignKey(d => d.RootLocation)
                    .HasConstraintName("FK_LOCATION_ROOT");
            });

            modelBuilder.Entity<LogProp>(entity =>
            {
                entity.ToTable("LogProp");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdateLocal).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PropName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PropValue)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.PropValueOld)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.User)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LoginInfo>(entity =>
            {
                entity.ToTable("LoginInfo");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.IP)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Info).IsUnicode(false);

                entity.Property(e => e.LocationCity)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.User)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MBAircraftIndex>(entity =>
            {
                entity.ToTable("MBAircraftIndex");

                entity.Property(e => e.CPT1).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CPT2).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CPT3).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CPT4).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OASec).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OBSec).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OCSec).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ODSec).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<MBFuelIndex>(entity =>
            {
                entity.ToTable("MBFuelIndex");
            });

            modelBuilder.Entity<MBPantryIndex>(entity =>
            {
                entity.ToTable("MBPantryIndex");

                entity.Property(e => e.DOI).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PantryCode).HasMaxLength(255);
            });

            modelBuilder.Entity<MBStabTrim>(entity =>
            {
                entity.ToTable("MBStabTrim");

                entity.Property(e => e.FlapFifteen).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlapFive).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<MV>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MV");

                entity.Property(e => e.CDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<MVT>(entity =>
            {
                entity.ToTable("MVT");

                entity.Property(e => e.Bag)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CPT)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DL)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.ETA).HasColumnType("datetime");

                entity.Property(e => e.FlightNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FromIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OffBlock).HasColumnType("datetime");

                entity.Property(e => e.OnBlock).HasColumnType("datetime");

                entity.Property(e => e.Pax)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SendFrom)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SendTo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.ToIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.MVTs)
                    .HasForeignKey(d => d.FlightId)
                    .HasConstraintName("fk_mvt_flight");
            });

            modelBuilder.Entity<MVTAPI>(entity =>
            {
                entity.ToTable("MVTAPI");

                entity.Property(e => e.Bag)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CPT)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DL)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.ETA).HasColumnType("datetime");

                entity.Property(e => e.FlightNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FromIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OffBlock).HasColumnType("datetime");

                entity.Property(e => e.OnBlock).HasColumnType("datetime");

                entity.Property(e => e.Pax)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SendFrom)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SendTo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.ToIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.MVTAPIs)
                    .HasForeignKey(d => d.FlightId)
                    .HasConstraintName("fk_mvtapi_flight");
            });

            modelBuilder.Entity<MainType>(entity =>
            {
                entity.ToTable("MainType");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MapDelayRemark>(entity =>
            {
                entity.ToTable("MapDelayRemark");

                entity.Property(e => e.DelayRemark).HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.Title2).HasMaxLength(500);
            });

            modelBuilder.Entity<MatchingList>(entity =>
            {
                entity.ToTable("MatchingList");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");
            });

            modelBuilder.Entity<MonthGP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MonthGP");

                entity.Property(e => e.PMonthName).HasMaxLength(255);
            });

            modelBuilder.Entity<MonthGPG>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MonthGPG");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.YearMonthName).HasMaxLength(4000);
            });

            modelBuilder.Entity<NBL>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NBL");

                entity.Property(e => e.DES).HasMaxLength(255);

                entity.Property(e => e.FLT).HasMaxLength(255);

                entity.Property(e => e.FLT2).HasMaxLength(255);

                entity.Property(e => e.ORG).HasMaxLength(255);
            });

            modelBuilder.Entity<NOTAM>(entity =>
            {
                entity.ToTable("NOTAM");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDay).HasColumnType("datetime");

                entity.Property(e => e.StationId)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NOTAMItem>(entity =>
            {
                entity.ToTable("NOTAMItem");

                entity.Property(e => e.Text)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.HasOne(d => d.NOTAM)
                    .WithMany(p => p.NOTAMItems)
                    .HasForeignKey(d => d.NOTAMId)
                    .HasConstraintName("fk_nti_nt");
            });

            modelBuilder.Entity<NiraHistory>(entity =>
            {
                entity.ToTable("NiraHistory");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.CHTIME).HasMaxLength(1000);

                entity.Property(e => e.DateReplied).HasColumnType("datetime");

                entity.Property(e => e.DateSend).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.FLIGHT).HasMaxLength(1000);

                entity.Property(e => e.NEWAIRCRAFT).HasMaxLength(1000);

                entity.Property(e => e.NEWSTATUS).HasMaxLength(1000);

                entity.Property(e => e.Register)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(1000);
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.ToTable("Notification");

                entity.Property(e => e.AppIssue).HasMaxLength(500);

                entity.Property(e => e.DateAppSent).HasColumnType("datetime");

                entity.Property(e => e.DateAppVisited).HasColumnType("datetime");

                entity.Property(e => e.DateEmailSent).HasColumnType("datetime");

                entity.Property(e => e.DateSMSSent).HasColumnType("datetime");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.EmailIssue).HasMaxLength(500);

                entity.Property(e => e.Message).IsRequired();

                entity.Property(e => e.SMSIssue).HasMaxLength(500);

                entity.Property(e => e.Subject).HasMaxLength(500);
            });

            modelBuilder.Entity<NotificationGroup>(entity =>
            {
                entity.ToTable("NotificationGroup");

                entity.HasIndex(e => e.GroupTitle, "idx_notgrp");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.GroupTitle)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.NotificationGroups)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("idx_notgrp_user");
            });

            modelBuilder.Entity<OFPImport>(entity =>
            {
                entity.ToTable("OFPImport");

                entity.Property(e => e.DOW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateFlight).HasColumnType("date");

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FLL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FPTripFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.JAPlan1).IsUnicode(false);

                entity.Property(e => e.JAPlan2).IsUnicode(false);

                entity.Property(e => e.JFuel).IsUnicode(false);

                entity.Property(e => e.JLDatePICApproved).HasColumnType("datetime");

                entity.Property(e => e.JLSignedBy)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.JPlan).IsUnicode(false);

                entity.Property(e => e.MCI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Origin)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Text).IsUnicode(false);

                entity.Property(e => e.TextOutput).IsUnicode(false);

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserConfirmed)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.OFPImports)
                    .HasForeignKey(d => d.FlightId)
                    .HasConstraintName("fk_ofp_flt");
            });

            modelBuilder.Entity<OFPImportItem>(entity =>
            {
                entity.ToTable("OFPImportItem");

                entity.Property(e => e.Line)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.HasOne(d => d.OFP)
                    .WithMany(p => p.OFPImportItems)
                    .HasForeignKey(d => d.OFPId)
                    .HasConstraintName("fk_ofpl_ofp");
            });

            modelBuilder.Entity<OFPImportProp>(entity =>
            {
                entity.ToTable("OFPImportProp");

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateUpdateLocal).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PropName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PropType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PropValue)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.OFP)
                    .WithMany(p => p.OFPImportProps)
                    .HasForeignKey(d => d.OFPId)
                    .HasConstraintName("fk_ofpp_ofp");
            });

            modelBuilder.Entity<OFPSkyPuter>(entity =>
            {
                entity.ToTable("OFPSkyPuter");

                entity.Property(e => e.AIRLINE)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OFP).IsUnicode(false);

                entity.Property(e => e.UploadMessage)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OffItem>(entity =>
            {
                entity.HasKey(e => new { e.FDPId, e.FlightId })
                    .HasName("PK__OffItem__ACAAD4F14B61A96F");

                entity.ToTable("OffItem");

                entity.Property(e => e.Remark)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.FDP)
                    .WithMany(p => p.OffItems)
                    .HasForeignKey(d => d.FDPId)
                    .HasConstraintName("off_fdp");

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.OffItems)
                    .HasForeignKey(d => d.FlightId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("off_flight");
            });

            modelBuilder.Entity<OpsCrewPhone>(entity =>
            {
                entity.HasKey(e => new { e.FName, e.LName, e.CellPhone })
                    .HasName("PK__OpsCrewP__47B503A6EDE4DC69");

                entity.ToTable("OpsCrewPhone");

                entity.Property(e => e.FName).HasMaxLength(255);

                entity.Property(e => e.LName).HasMaxLength(255);

                entity.Property(e => e.CellPhone).HasMaxLength(255);
            });

            modelBuilder.Entity<Option>(entity =>
            {
                entity.ToTable("Option");

                entity.Property(e => e.Prop1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<Organization>(entity =>
            {
                entity.ToTable("Organization");

                entity.Property(e => e.Address).HasMaxLength(1000);

                entity.Property(e => e.ContactPerson).HasMaxLength(1000);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.Fax)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LogoUrl)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Tel)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<PLUPD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PLUPD");

                entity.Property(e => e.DayName).HasMaxLength(30);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.NSTA).HasColumnType("datetime");

                entity.Property(e => e.NSTD).HasColumnType("datetime");

                entity.Property(e => e.NewSTA).HasColumnType("datetime");

                entity.Property(e => e.NewSTD).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.ToTable("Person");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AviationSecurityExpireDate).HasColumnType("datetime");

                entity.Property(e => e.AviationSecurityIssueDate).HasColumnType("datetime");

                entity.Property(e => e.CCRMExpireDate).HasColumnType("datetime");

                entity.Property(e => e.CCRMIssueDate).HasColumnType("datetime");

                entity.Property(e => e.CMCEmployedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CMCOccupation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CRMExpireDate).HasColumnType("datetime");

                entity.Property(e => e.CRMIssueDate).HasColumnType("datetime");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ColdWeatherOperationExpireDate).HasColumnType("datetime");

                entity.Property(e => e.ColdWeatherOperationIssueDate).HasColumnType("datetime");

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CrewMemberCertificateExpireDate).HasColumnType("datetime");

                entity.Property(e => e.DangerousGoodsExpireDate).HasColumnType("datetime");

                entity.Property(e => e.DangerousGoodsIssueDate).HasColumnType("datetime");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateExpireNDT).HasColumnType("date");

                entity.Property(e => e.DateIssueNDT).HasColumnType("date");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUP).HasColumnType("date");

                entity.Property(e => e.DateNextCheckUP).HasColumnType("date");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateTREExpired).HasColumnType("datetime");

                entity.Property(e => e.DateTRIExpired).HasColumnType("datetime");

                entity.Property(e => e.DateTypeExpire).HasColumnType("datetime");

                entity.Property(e => e.DateTypeIssue).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.EGPWSExpireDate).HasColumnType("datetime");

                entity.Property(e => e.EGPWSIssueDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.EmailPassword).HasMaxLength(500);

                entity.Property(e => e.FMTExpireDate).HasColumnType("datetime");

                entity.Property(e => e.FMTIssueDate).HasColumnType("datetime");

                entity.Property(e => e.FatherName).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstAidExpireDate).HasColumnType("datetime");

                entity.Property(e => e.FirstAidIssueDate).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.HotWeatherOperationExpireDate).HasColumnType("datetime");

                entity.Property(e => e.HotWeatherOperationIssueDate).HasColumnType("datetime");

                entity.Property(e => e.ICAOLPRValidUntil).HasColumnType("datetime");

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.LanguageCourseExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LicenceDescription).HasMaxLength(2000);

                entity.Property(e => e.LicenceExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LicenceIRExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LicenceInitialIssue).HasColumnType("datetime");

                entity.Property(e => e.LicenceIssueDate).HasColumnType("datetime");

                entity.Property(e => e.LicenceTitle).HasMaxLength(500);

                entity.Property(e => e.LineExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LineIssueDate).HasColumnType("datetime");

                entity.Property(e => e.LinkedIn).HasMaxLength(500);

                entity.Property(e => e.MedicalLimitation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.MultiType)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.NDTNumber).HasMaxLength(200);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Nickname).HasMaxLength(50);

                entity.Property(e => e.PBNRNAVExpireDate).HasColumnType("datetime");

                entity.Property(e => e.PBNRNAVIssueDate).HasColumnType("datetime");

                entity.Property(e => e.PFirstName).HasMaxLength(500);

                entity.Property(e => e.PLastName).HasMaxLength(500);

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ProficiencyCheckDate).HasColumnType("datetime");

                entity.Property(e => e.ProficiencyCheckDateOPC).HasColumnType("datetime");

                entity.Property(e => e.ProficiencyDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProficiencyDescriptionOPC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProficiencyExpireDate).HasColumnType("datetime");

                entity.Property(e => e.ProficiencyValidUntil).HasColumnType("datetime");

                entity.Property(e => e.ProficiencyValidUntilOPC).HasColumnType("datetime");

                entity.Property(e => e.RaitingCertificates).HasMaxLength(500);

                entity.Property(e => e.RampPassExpireDate).HasColumnType("datetime");

                entity.Property(e => e.RampPassNo).HasMaxLength(500);

                entity.Property(e => e.RecurrentExpireDate).HasColumnType("datetime");

                entity.Property(e => e.RecurrentIssueDate).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.SEPTExpireDate).HasColumnType("datetime");

                entity.Property(e => e.SEPTIssueDate).HasColumnType("datetime");

                entity.Property(e => e.SEPTPExpireDate).HasColumnType("datetime");

                entity.Property(e => e.SEPTPIssueDate).HasColumnType("datetime");

                entity.Property(e => e.SMSExpireDate).HasColumnType("datetime");

                entity.Property(e => e.SMSIssueDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SimulatorLastCheck).HasColumnType("datetime");

                entity.Property(e => e.SimulatorNextCheck).HasColumnType("datetime");

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Telegram).HasMaxLength(255);

                entity.Property(e => e.UpsetRecoveryTrainingExpireDate).HasColumnType("datetime");

                entity.Property(e => e.UpsetRecoveryTrainingIssueDate).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.VisaExpireDate).HasColumnType("datetime");

                entity.Property(e => e.WhatsApp).HasMaxLength(500);

                entity.HasOne(d => d.CaoIntervalCalanderType)
                    .WithMany(p => p.PersonCaoIntervalCalanderTypes)
                    .HasForeignKey(d => d.CaoIntervalCalanderTypeId)
                    .HasConstraintName("FK_PERSON_OPTION_ICAO");

                entity.HasOne(d => d.Marriage)
                    .WithMany(p => p.PersonMarriages)
                    .HasForeignKey(d => d.MarriageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PERSON_OPTION_MARRIAGE");

                entity.HasOne(d => d.NDTIntervalCalanderType)
                    .WithMany(p => p.PersonNDTIntervalCalanderTypes)
                    .HasForeignKey(d => d.NDTIntervalCalanderTypeId)
                    .HasConstraintName("FK_PERSON_OPTION_INDT");
            });

            modelBuilder.Entity<PersonAircraftType>(entity =>
            {
                entity.ToTable("PersonAircraftType");

                entity.Property(e => e.DateLimitBegin).HasColumnType("datetime");

                entity.Property(e => e.DateLimitEnd).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.PersonAircraftTypes)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UM_Type_Access_Ac_Type");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonAircraftTypes)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_UM_Type_Access_UM_Users");
            });

            modelBuilder.Entity<PersonCaoLicenceHistory>(entity =>
            {
                entity.ToTable("PersonCaoLicenceHistory");

                entity.Property(e => e.DateLicense).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.HasOne(d => d.CaoBasicType)
                    .WithMany(p => p.PersonCaoLicenceHistories)
                    .HasForeignKey(d => d.CaoBasicTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaoUserLicenceHistory_CaoBasicType");

                entity.HasOne(d => d.CaoCategory)
                    .WithMany(p => p.PersonCaoLicenceHistories)
                    .HasForeignKey(d => d.CaoCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaoUserLicenceHistory_CaoCategory");

                entity.HasOne(d => d.CaoUserLicense)
                    .WithMany(p => p.PersonCaoLicenceHistories)
                    .HasForeignKey(d => d.CaoUserLicenseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaoUserLicenceHistory_CaoUserLicence");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonCaoLicenceHistories)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaoUserLicenceHistory_Person");
            });

            modelBuilder.Entity<PersonCaoLicense>(entity =>
            {
                entity.ToTable("PersonCaoLicense");

                entity.Property(e => e.DateLicense).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Result)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CaoBasic)
                    .WithMany(p => p.PersonCaoLicenses)
                    .HasForeignKey(d => d.CaoBasicId)
                    .HasConstraintName("FK_TRN_CaoUserLicence_TRN_CaoBasic");

                entity.HasOne(d => d.CaoBasicType)
                    .WithMany(p => p.PersonCaoLicenses)
                    .HasForeignKey(d => d.CaoBasicTypeId)
                    .HasConstraintName("FK_CaoUserLicence_CaoBasicType");

                entity.HasOne(d => d.CaoCategory)
                    .WithMany(p => p.PersonCaoLicenses)
                    .HasForeignKey(d => d.CaoCategoryId)
                    .HasConstraintName("FK_CaoUserLicence_CaoCategory");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonCaoLicenses)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_CaoUserLicence_Person");
            });

            modelBuilder.Entity<PersonCourse>(entity =>
            {
                entity.ToTable("PersonCourse");

                entity.Property(e => e.CerNumber).HasMaxLength(500);

                entity.Property(e => e.CerUrl).HasMaxLength(255);

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateExpireP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateIssueP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Grade).HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.PersonCourses)
                    .HasForeignKey(d => d.CourseId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PersonCourse_Course");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonCourses)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_UserCourse_Person");
            });

            modelBuilder.Entity<PersonCustomer>(entity =>
            {
                entity.ToTable("PersonCustomer");

                entity.Property(e => e.DateActiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateActiveStart).HasColumnType("datetime");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateConfirmedP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateJoinCompanyP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateLastLogin).HasColumnType("datetime");

                entity.Property(e => e.DateLastLoginP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateRegisterP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Username).HasMaxLength(1000);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.PersonCustomers)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_PERSONCUSTOMER_CUSTOMER");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.PersonCustomers)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_PERSONCUSTOMER_GROUP");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonCustomers)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_PERSONCUSTOMER_PERSON");
            });

            modelBuilder.Entity<PersonDocument>(entity =>
            {
                entity.ToTable("PersonDocument");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonDocuments)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_PD_PERS");
            });

            modelBuilder.Entity<PersonDocumentFile>(entity =>
            {
                entity.HasKey(e => e.DocumentId)
                    .HasName("PK__PersonDo__1ABEEF0FFDB54387");

                entity.ToTable("PersonDocumentFile");

                entity.Property(e => e.DocumentId).ValueGeneratedNever();

                entity.HasOne(d => d.Document)
                    .WithOne(p => p.PersonDocumentFile)
                    .HasForeignKey<PersonDocumentFile>(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DF_DOC");

                entity.HasOne(d => d.PersonDocument)
                    .WithMany(p => p.PersonDocumentFiles)
                    .HasForeignKey(d => d.PersonDocumentId)
                    .HasConstraintName("FK_DF_PERSDOC");
            });

            modelBuilder.Entity<PersonEducation>(entity =>
            {
                entity.ToTable("PersonEducation");

                entity.Property(e => e.College).HasMaxLength(500);

                entity.Property(e => e.DateCatch).HasColumnType("date");

                entity.Property(e => e.FileTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.SysUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(60);

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonEducations)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_PERSONEDUCATION_PERSON");
            });

            modelBuilder.Entity<PersonEducationDocument>(entity =>
            {
                entity.HasKey(e => new { e.PersonEducationId, e.DocumentId })
                    .HasName("PK__PersonEd__543611E0F36BBB46");

                entity.ToTable("PersonEducationDocument");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.PersonEducationDocuments)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PERSONEDUDOC_DOC");

                entity.HasOne(d => d.PersonEducation)
                    .WithMany(p => p.PersonEducationDocuments)
                    .HasForeignKey(d => d.PersonEducationId)
                    .HasConstraintName("FK_PERSONEDUDOC_PERSONEDU");
            });

            modelBuilder.Entity<PersonExperiense>(entity =>
            {
                entity.ToTable("PersonExperiense");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.Employer).HasMaxLength(500);

                entity.Property(e => e.JobTitle).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonExperienses)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_PersonExperience_Person");
            });

            modelBuilder.Entity<PersonHistory>(entity =>
            {
                entity.ToTable("PersonHistory");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.User)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonMisc>(entity =>
            {
                entity.ToTable("PersonMisc");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.ImageUrl).HasMaxLength(500);

                entity.Property(e => e.Instagram).HasMaxLength(500);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LinkedIn).HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Tel).HasMaxLength(500);

                entity.Property(e => e.Telegram).HasMaxLength(500);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<PersonRating>(entity =>
            {
                entity.ToTable("PersonRating");

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.PersonRatings)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonRating_AcType");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonRatings)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_PersonRating_Person");

                entity.HasOne(d => d.Rating)
                    .WithMany(p => p.PersonRatings)
                    .HasForeignKey(d => d.RatingId)
                    .HasConstraintName("FK_PersonRating_Rating");
            });

            modelBuilder.Entity<PersonRatingDocument>(entity =>
            {
                entity.HasKey(e => e.PersonRatingId)
                    .HasName("PK__PersonRa__F36BF0D3784006F3");

                entity.ToTable("PersonRatingDocument");

                entity.Property(e => e.PersonRatingId).ValueGeneratedNever();

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.PersonRatingDocuments)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PRD_DOC");

                entity.HasOne(d => d.PersonRating)
                    .WithOne(p => p.PersonRatingDocument)
                    .HasForeignKey<PersonRatingDocument>(d => d.PersonRatingId)
                    .HasConstraintName("FK_PRD_PERSONRATING");
            });

            modelBuilder.Entity<PlanItem>(entity =>
            {
                entity.ToTable("PlanItem");

                entity.Property(e => e.Arr).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.Day)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Dep).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(500);

                entity.Property(e => e.Line)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RV_Aircraft>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Aircraft");

                entity.Property(e => e.FuelCapacity).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(255);

                entity.Property(e => e.GanttShowOrder).HasMaxLength(255);

                entity.Property(e => e.Id).HasMaxLength(255);

                entity.Property(e => e.MaxCargoWeight).HasMaxLength(255);

                entity.Property(e => e.Owner).HasMaxLength(255);

                entity.Property(e => e.Real).HasMaxLength(255);

                entity.Property(e => e.Reg).HasMaxLength(255);

                entity.Property(e => e.Seat).HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<RV_Assign>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Assign");

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.Id).HasMaxLength(255);

                entity.Property(e => e.JobType).HasMaxLength(255);

                entity.Property(e => e.PlanDesc).HasMaxLength(255);

                entity.Property(e => e.Rank).HasMaxLength(255);

                entity.Property(e => e.Route).HasMaxLength(255);

                entity.Property(e => e.RouteGroup).HasMaxLength(255);

                entity.Property(e => e.Scheduler).HasMaxLength(255);
            });

            modelBuilder.Entity<RV_Crew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Crew");

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.Active).HasMaxLength(255);

                entity.Property(e => e.Additional).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.AddressRegion).HasMaxLength(255);

                entity.Property(e => e.BaseStation).HasMaxLength(255);

                entity.Property(e => e.BirthDate).HasMaxLength(255);

                entity.Property(e => e.BirthPlace).HasMaxLength(255);

                entity.Property(e => e.BoxNo).HasMaxLength(255);

                entity.Property(e => e.CMCExpire).HasMaxLength(255);

                entity.Property(e => e.CellPhone).HasMaxLength(255);

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CrewType).HasMaxLength(255);

                entity.Property(e => e.DigitCode).HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.EmployeeNo).HasMaxLength(255);

                entity.Property(e => e.FLName).HasMaxLength(255);

                entity.Property(e => e.FName).HasMaxLength(255);

                entity.Property(e => e.FScheduleName).HasMaxLength(255);

                entity.Property(e => e.Faddress).HasMaxLength(255);

                entity.Property(e => e.FatherName).HasMaxLength(255);

                entity.Property(e => e.Fax).HasMaxLength(255);

                entity.Property(e => e.Ffname).HasMaxLength(255);

                entity.Property(e => e.Gender).HasMaxLength(255);

                entity.Property(e => e.HireDate).HasMaxLength(255);

                entity.Property(e => e.Id).HasMaxLength(255);

                entity.Property(e => e.IdNo).HasMaxLength(255);

                entity.Property(e => e.InstructorType).HasMaxLength(255);

                entity.Property(e => e.JobPosition).HasMaxLength(255);

                entity.Property(e => e.JobShift).HasMaxLength(255);

                entity.Property(e => e.L4Expire).HasMaxLength(255);

                entity.Property(e => e.LName).HasMaxLength(255);

                entity.Property(e => e.LastDoctor).HasMaxLength(255);

                entity.Property(e => e.LastFltTime).HasMaxLength(255);

                entity.Property(e => e.LicenceExpire).HasMaxLength(255);

                entity.Property(e => e.LicenceNo).HasMaxLength(255);

                entity.Property(e => e.MedicalAudio).HasMaxLength(255);

                entity.Property(e => e.MedicalCheckup).HasMaxLength(255);

                entity.Property(e => e.MedicalECG).HasMaxLength(255);

                entity.Property(e => e.MedicalExpire).HasMaxLength(255);

                entity.Property(e => e.MedicalHistory).HasMaxLength(255);

                entity.Property(e => e.MultiType).HasMaxLength(255);

                entity.Property(e => e.NationalNo).HasMaxLength(255);

                entity.Property(e => e.Native).HasMaxLength(255);

                entity.Property(e => e.PassportExpire).HasMaxLength(255);

                entity.Property(e => e.PassportNo).HasMaxLength(255);

                entity.Property(e => e.Phone).HasMaxLength(255);

                entity.Property(e => e.ProductiveDate).HasMaxLength(255);

                entity.Property(e => e.ProficiencyExpire).HasMaxLength(255);

                entity.Property(e => e.RampPassExpire).HasMaxLength(255);

                entity.Property(e => e.RampPassNo).HasMaxLength(255);

                entity.Property(e => e.ScheduleName).HasMaxLength(255);

                entity.Property(e => e.Seniority).HasMaxLength(255);

                entity.Property(e => e.SetGroup).HasMaxLength(255);

                entity.Property(e => e.Simulator8MonthCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorAnnual).HasMaxLength(255);

                entity.Property(e => e.SimulatorAnnualCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorLastCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorNextCheck).HasMaxLength(255);

                entity.Property(e => e.Skill).HasMaxLength(255);

                entity.Property(e => e.Training_Seat_Los).HasMaxLength(255);

                entity.Property(e => e.Training_Seat_Rev).HasMaxLength(255);

                entity.Property(e => e.Training_Seat_Tre_).HasMaxLength(255);
            });

            modelBuilder.Entity<RV_CrewRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_CrewRpt");

                entity.Property(e => e.CODE).HasMaxLength(255);

                entity.Property(e => e.FN).HasMaxLength(255);

                entity.Property(e => e.PDATE).HasMaxLength(255);

                entity.Property(e => e.SCH).HasMaxLength(255);
            });

            modelBuilder.Entity<RV_Daily>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Daily");

                entity.Property(e => e.ADL).HasMaxLength(255);

                entity.Property(e => e.Amount).HasMaxLength(255);

                entity.Property(e => e.Arr).HasMaxLength(255);

                entity.Property(e => e.Bag).HasMaxLength(255);

                entity.Property(e => e.Block).HasMaxLength(255);

                entity.Property(e => e.CHD).HasMaxLength(255);

                entity.Property(e => e.Cargo).HasMaxLength(255);

                entity.Property(e => e.Currency).HasMaxLength(255);

                entity.Property(e => e.Date).HasMaxLength(255);

                entity.Property(e => e.Dep).HasMaxLength(255);

                entity.Property(e => e.Fix).HasMaxLength(255);

                entity.Property(e => e.Flight).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.INF).HasMaxLength(255);

                entity.Property(e => e.Land_)
                    .HasMaxLength(255)
                    .HasColumnName("Land.");

                entity.Property(e => e.No).HasMaxLength(255);

                entity.Property(e => e.Off_B)
                    .HasMaxLength(255)
                    .HasColumnName("Off.B");

                entity.Property(e => e.On_B)
                    .HasMaxLength(255)
                    .HasColumnName("On.B");

                entity.Property(e => e.Reg).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.Station).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.T_off)
                    .HasMaxLength(255)
                    .HasColumnName("T.off");

                entity.Property(e => e.Total).HasMaxLength(255);

                entity.Property(e => e.Total1).HasMaxLength(255);

                entity.Property(e => e.Trip).HasMaxLength(255);

                entity.Property(e => e.UpLift).HasMaxLength(255);

                entity.Property(e => e.f10).HasMaxLength(255);

                entity.Property(e => e.f12).HasMaxLength(255);

                entity.Property(e => e.f18).HasMaxLength(255);

                entity.Property(e => e.f20).HasMaxLength(255);

                entity.Property(e => e.f27).HasMaxLength(255);

                entity.Property(e => e.f32).HasMaxLength(255);

                entity.Property(e => e.f34).HasMaxLength(255);

                entity.Property(e => e.f6).HasMaxLength(255);
            });

            modelBuilder.Entity<RV_Delivery>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Delivery");

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.Id).HasMaxLength(255);

                entity.Property(e => e.PeriodId).HasMaxLength(255);

                entity.Property(e => e.Revision).HasMaxLength(255);

                entity.Property(e => e.Web).HasMaxLength(255);
            });

            modelBuilder.Entity<RV_Flight>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Flight");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ATA).HasMaxLength(255);

                entity.Property(e => e.ATD).HasMaxLength(255);

                entity.Property(e => e.AlternateStation).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.BagPiece).HasMaxLength(255);

                entity.Property(e => e.Baggage).HasMaxLength(255);

                entity.Property(e => e.CargoPiece).HasMaxLength(255);

                entity.Property(e => e.CargoWeight).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.Female).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.FuelDefuel).HasMaxLength(255);

                entity.Property(e => e.FuelRemain).HasMaxLength(255);

                entity.Property(e => e.FuelTaxi).HasMaxLength(255);

                entity.Property(e => e.FuelTotal).HasMaxLength(255);

                entity.Property(e => e.FuelTrip).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(255);

                entity.Property(e => e.FuelUpLift).HasMaxLength(255);

                entity.Property(e => e.Male).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.OnRunway).HasMaxLength(255);

                entity.Property(e => e.OverPax).HasMaxLength(255);

                entity.Property(e => e.PAXStation).HasMaxLength(255);

                entity.Property(e => e.Parking).HasMaxLength(255);

                entity.Property(e => e.PaxADL).HasMaxLength(255);

                entity.Property(e => e.PaxCHD).HasMaxLength(255);

                entity.Property(e => e.PaxINF).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.SaveTime).HasMaxLength(255);

                entity.Property(e => e.StationIncomeCurrency).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Tag1).HasMaxLength(255);

                entity.Property(e => e.Tag2).HasMaxLength(255);

                entity.Property(e => e.Tag3).HasMaxLength(255);

                entity.Property(e => e.TakeOff).HasMaxLength(255);

                entity.Property(e => e.TotalSeats).HasMaxLength(255);
            });

            modelBuilder.Entity<RV_FlightInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_FlightInformation");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ATA).HasMaxLength(255);

                entity.Property(e => e.ATD).HasMaxLength(255);

                entity.Property(e => e.AlternateStation).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.BagPiece).HasMaxLength(255);

                entity.Property(e => e.Baggage).HasMaxLength(255);

                entity.Property(e => e.CargoPiece).HasMaxLength(255);

                entity.Property(e => e.CargoWeight).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.Female).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.FuelDefuel).HasMaxLength(255);

                entity.Property(e => e.FuelRemain).HasMaxLength(255);

                entity.Property(e => e.FuelTaxi).HasMaxLength(255);

                entity.Property(e => e.FuelTotal).HasMaxLength(255);

                entity.Property(e => e.FuelTrip).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(255);

                entity.Property(e => e.FuelUpLift).HasMaxLength(255);

                entity.Property(e => e.Male).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.OnRunway).HasMaxLength(255);

                entity.Property(e => e.OverPax).HasMaxLength(255);

                entity.Property(e => e.PAXStation).HasMaxLength(255);

                entity.Property(e => e.Parking).HasMaxLength(255);

                entity.Property(e => e.PaxADL).HasMaxLength(255);

                entity.Property(e => e.PaxCHD).HasMaxLength(255);

                entity.Property(e => e.PaxINF).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.SaveTime).HasMaxLength(255);

                entity.Property(e => e.StationIncomeCurrency).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Tag1).HasMaxLength(255);

                entity.Property(e => e.Tag2).HasMaxLength(255);

                entity.Property(e => e.Tag3).HasMaxLength(255);

                entity.Property(e => e.TakeOff).HasMaxLength(255);

                entity.Property(e => e.TotalSeats).HasMaxLength(255);
            });

            modelBuilder.Entity<RV_Leg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Leg");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ArrTime).HasMaxLength(255);

                entity.Property(e => e.ArrTimeLCL).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.DepTime).HasMaxLength(255);

                entity.Property(e => e.DepTimeLCL).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STC).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);
            });

            modelBuilder.Entity<RV_Training>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Training");

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.CourseName).HasMaxLength(255);

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.CrewType).HasMaxLength(255);

                entity.Property(e => e.Date).HasMaxLength(255);

                entity.Property(e => e.Grade).HasMaxLength(255);

                entity.Property(e => e.ScheduleName).HasMaxLength(255);

                entity.Property(e => e.StartDate).HasMaxLength(255);

                entity.Property(e => e.Teacher).HasMaxLength(255);
            });

            modelBuilder.Entity<Rating>(entity =>
            {
                entity.ToTable("Rating");

                entity.Property(e => e.Rate).HasMaxLength(50);

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Ratings)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RATING_ORG");
            });

            modelBuilder.Entity<RefreshToken>(entity =>
            {
                entity.ToTable("RefreshToken");

                entity.Property(e => e.Id).HasMaxLength(500);

                entity.Property(e => e.ClientId)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ExpiresUtc).HasColumnType("datetime");

                entity.Property(e => e.IssuedUtc).HasColumnType("datetime");

                entity.Property(e => e.ProtectedTicket)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<RegisterGround>(entity =>
            {
                entity.ToTable("RegisterGround");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportRoster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReportRoster");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.PDATE).HasMaxLength(4000);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.STA)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.STALOC)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STAx).HasColumnType("datetime");

                entity.Property(e => e.STD)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLOC)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.STDx).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<Report_Crew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Report_Crew");

                entity.Property(e => e.Arr_Stn)
                    .HasMaxLength(255)
                    .HasColumnName("Arr Stn");

                entity.Property(e => e.Block_Time)
                    .HasMaxLength(255)
                    .HasColumnName("Block Time");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.Crew_Type)
                    .HasMaxLength(255)
                    .HasColumnName("Crew Type");

                entity.Property(e => e.Dep_Stn)
                    .HasMaxLength(255)
                    .HasColumnName("Dep Stn");

                entity.Property(e => e.Flight_Time)
                    .HasMaxLength(255)
                    .HasColumnName("Flight Time");

                entity.Property(e => e.Flt_No)
                    .HasMaxLength(255)
                    .HasColumnName("Flt No");

                entity.Property(e => e.Int__Flt)
                    .HasMaxLength(255)
                    .HasColumnName("Int. Flt");

                entity.Property(e => e.Job_Type)
                    .HasMaxLength(255)
                    .HasColumnName("Job Type");

                entity.Property(e => e.Office_Time)
                    .HasMaxLength(255)
                    .HasColumnName("Office Time");

                entity.Property(e => e.Pay_Time)
                    .HasMaxLength(255)
                    .HasColumnName("Pay Time");

                entity.Property(e => e.Pos).HasMaxLength(255);

                entity.Property(e => e.Reg).HasMaxLength(255);

                entity.Property(e => e.STBTime).HasMaxLength(255);

                entity.Property(e => e.Standard_Time)
                    .HasMaxLength(255)
                    .HasColumnName("Standard Time");

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.TRNTime).HasMaxLength(255);

                entity.Property(e => e._UTC_Date)
                    .HasMaxLength(255)
                    .HasColumnName(" UTC Date");

                entity.Property(e => e.f12).HasMaxLength(255);

                entity.Property(e => e.f13).HasMaxLength(255);

                entity.Property(e => e.f18).HasMaxLength(255);

                entity.Property(e => e.f23).HasMaxLength(255);
            });

            modelBuilder.Entity<Report_Crew_XML>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Report_Crew_XML");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ArrTime).HasMaxLength(255);

                entity.Property(e => e.BRFTime).HasMaxLength(255);

                entity.Property(e => e.BlockTime).HasMaxLength(255);

                entity.Property(e => e.Change).HasMaxLength(255);

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.CrewType).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.DepTime).HasMaxLength(255);

                entity.Property(e => e.FixTime).HasMaxLength(255);

                entity.Property(e => e.FlightTime).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.IntFlt).HasMaxLength(255);

                entity.Property(e => e.JalaliUTCDate).HasMaxLength(255);

                entity.Property(e => e.JobPosition).HasMaxLength(255);

                entity.Property(e => e.JobType).HasMaxLength(255);

                entity.Property(e => e.Landing).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OfficeTime).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.PaymentTime).HasMaxLength(255);

                entity.Property(e => e.Pos).HasMaxLength(255);

                entity.Property(e => e.Route).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STBTime).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.ScheduleName).HasMaxLength(255);

                entity.Property(e => e.StandardTime).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.TRNTime).HasMaxLength(255);

                entity.Property(e => e.TakeOff).HasMaxLength(255);
            });

            modelBuilder.Entity<Report_Delay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Report_Delay");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.Amount).HasMaxLength(255);

                entity.Property(e => e.Amountfloat).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DelayTime).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.Department).HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Description1).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.JalaliDate).HasMaxLength(255);

                entity.Property(e => e.No).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.TakeOff).HasMaxLength(255);
            });

            modelBuilder.Entity<Report_Flight>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Report_Flight");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.Bag).HasMaxLength(255);

                entity.Property(e => e.BlockTime).HasMaxLength(255);

                entity.Property(e => e.CHarterer).HasMaxLength(255);

                entity.Property(e => e.Cargo).HasMaxLength(255);

                entity.Property(e => e.Change).HasMaxLength(255);

                entity.Property(e => e.Date).HasMaxLength(255);

                entity.Property(e => e.DelayAmount).HasMaxLength(255);

                entity.Property(e => e.DelayReason).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.Distance).HasMaxLength(255);

                entity.Property(e => e.FixTimeCommercial).HasMaxLength(255);

                entity.Property(e => e.FixTimeStandard).HasMaxLength(255);

                entity.Property(e => e.FlightTime).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.FuelTrip).HasMaxLength(255);

                entity.Property(e => e.FuelUpLift).HasMaxLength(255);

                entity.Property(e => e.Landing).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.PAXStation).HasMaxLength(255);

                entity.Property(e => e.PaxADL).HasMaxLength(255);

                entity.Property(e => e.PaxCHD).HasMaxLength(255);

                entity.Property(e => e.PaxINF).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STC).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.StationIncome).HasMaxLength(255);

                entity.Property(e => e.StationIncomeCurrency).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.TakeOff).HasMaxLength(255);

                entity.Property(e => e.TotalPax).HasMaxLength(255);

                entity.Property(e => e.TotalWeight).HasMaxLength(255);
            });

            modelBuilder.Entity<RoleOrganizational>(entity =>
            {
                entity.ToTable("RoleOrganizational");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<RosterCrewSheet>(entity =>
            {
                entity.ToTable("RosterCrewSheet");

                entity.HasOne(d => d.FDPItem)
                    .WithMany(p => p.RosterCrewSheets)
                    .HasForeignKey(d => d.FDPItemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_roster_fdpitem");
            });

            modelBuilder.Entity<RosterDailyReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RosterDailyReport");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.PickupLocal).HasColumnType("datetime");

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<RouteDistance>(entity =>
            {
                entity.ToTable("RouteDistance");

                entity.Property(e => e.FromIATA)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ToIATA)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptAirportDaily");

                entity.Property(e => e.Airline)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Delays).HasMaxLength(4000);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasColumnType("datetime");

                entity.Property(e => e.OffBlockLocal).HasColumnType("datetime");

                entity.Property(e => e.PDate).HasMaxLength(4000);

                entity.Property(e => e.PDateOffBlock).HasMaxLength(4000);

                entity.Property(e => e.PDateTakeOff).HasMaxLength(4000);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Uplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<RptDeadHead>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDeadHead");

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.DateFDP).HasColumnType("date");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingStn).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayLocal).HasColumnType("date");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffStn).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<RptDelayAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayAirportDaily");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayAirportDailyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayAirportDailyCal");

                entity.Property(e => e.ABlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.CountPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBLDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.YearMonth)
                    .HasMaxLength(201)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptDelayAirportMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayAirportMonthly");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayTotalRatio).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayAirportMonthlyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayAirportMonthlyCal");

                entity.Property(e => e.ABlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.CountPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBLDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayTotalRatio).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayCatAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatAirportDaily");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayCatAirportDailyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatAirportDailyCal");

                entity.Property(e => e.ABlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.CountPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBLDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.YearMonth)
                    .HasMaxLength(201)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptDelayCatAirportMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatAirportMonthly");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayAirportRatio).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayCatAirportMonthlyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatAirportMonthlyCal");

                entity.Property(e => e.ABlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.CountPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayAirportRatio).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBLDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayCatDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatDaily");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayCatDailyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatDailyCal");

                entity.Property(e => e.ABlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.CountPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBLDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.YearMonth)
                    .HasMaxLength(201)
                    .IsUnicode(false);

                entity.Property(e => e.YearMonthCat).HasMaxLength(702);
            });

            modelBuilder.Entity<RptDelayCatMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatMonthly");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayCatMonthlyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatMonthlyCal");

                entity.Property(e => e.ABlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.CountPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBLDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayCatRegisterDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatRegisterDaily");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RptDelayCatRegisterDailyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatRegisterDailyCal");

                entity.Property(e => e.ABlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.CountPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBLDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearMonth)
                    .HasMaxLength(201)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptDelayCatRegisterMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatRegisterMonthly");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RptDelayCatRegisterMonthlyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatRegisterMonthlyCal");

                entity.Property(e => e.ABlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.CountPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBLDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RptDelayDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayDaily");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.OnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver240PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreOnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayDailyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayDailyCal");

                entity.Property(e => e.ABlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ATotalPaxAllDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ATotalPaxDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBLDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedPaxPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.OnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.OnTimeFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PaxDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver30).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreOnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.TotalPaxAllDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.TotalPaxDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.YearMonth)
                    .HasMaxLength(201)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptDelayLeg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayLeg");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.BaseIATA)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BaseName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.DelayRemark).HasMaxLength(500);

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeAbr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportCity).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName).HasMaxLength(255);

                entity.Property(e => e.ICategory).HasMaxLength(500);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PYearMonthName).HasMaxLength(511);

                entity.Property(e => e.PYearName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayLocal).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.SeasonTitle)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ToAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName).HasMaxLength(255);

                entity.Property(e => e.YearName).HasMaxLength(4000);

                entity.Property(e => e.duration).HasColumnType("numeric(19, 6)");
            });

            modelBuilder.Entity<RptDelayLegBI>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayLegBI");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.BaseIATA)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BaseName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.DelayRemark).HasMaxLength(500);

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeAbr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportCity).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName).HasMaxLength(255);

                entity.Property(e => e.ICategory).HasMaxLength(500);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PYearMonthName).HasMaxLength(511);

                entity.Property(e => e.PYearName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayLocal).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.SeasonTitle)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ToAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName).HasMaxLength(255);

                entity.Property(e => e.YearName).HasMaxLength(4000);

                entity.Property(e => e.duration).HasColumnType("numeric(19, 6)");
            });

            modelBuilder.Entity<RptDelayLegMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayLegMap");

                entity.Property(e => e.CategoryIATA)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Categoty).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.MapTitle).HasMaxLength(500);

                entity.Property(e => e.MapTitle2).HasMaxLength(500);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.STDDay).HasColumnType("date");
            });

            modelBuilder.Entity<RptDelayLegPivot>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayLegPivot");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.BaseIATA)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BaseName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.DelayRemark).HasMaxLength(500);

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeAbr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportCity).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName).HasMaxLength(255);

                entity.Property(e => e.ICategory)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PYearMonthName).HasMaxLength(511);

                entity.Property(e => e.PYearName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayLocal).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.SeasonTitle)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ToAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName).HasMaxLength(255);

                entity.Property(e => e.YearName).HasMaxLength(4000);

                entity.Property(e => e.duration).HasColumnType("numeric(19, 6)");
            });

            modelBuilder.Entity<RptDelayMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayMonthly");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.OnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver240PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreOnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayMonthlyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayMonthlyCal");

                entity.Property(e => e.ABlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.AFlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ATotalPaxAllDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.ATotalPaxDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBLDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedPaxPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.OnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.OnTimeFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.PaxDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver30).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayPerBL).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreOnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.TotalPaxAllDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.TotalPaxDiff).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptFDP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFDP");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Flights).HasMaxLength(4000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.Route).HasMaxLength(4000);

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STADayUTC).HasColumnType("date");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayUTC).HasColumnType("date");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptFDPItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFDPItem");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STADayUTC).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayUTC).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirport).HasMaxLength(255);
            });

            modelBuilder.Entity<RptFDPMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFDPMonthly");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptFDPMonthlyPersian>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFDPMonthlyPersian");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptFDPOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFDPOld");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Flights).HasMaxLength(4000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.Route).HasMaxLength(4000);

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STADayUTC).HasColumnType("date");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayUTC).HasColumnType("date");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFlight");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<RptFuelDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelDaily");

                entity.Property(e => e.Date).HasMaxLength(500);

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFPFuel).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerUpLift).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelDailyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelDailyCal");

                entity.Property(e => e.ArgStr).HasMaxLength(500);

                entity.Property(e => e.Date)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiff).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiffPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerLegPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerPaxPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerWeightPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFPFuel).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerUpLift).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelDailyRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelDailyRegister");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Date).HasMaxLength(500);

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelDailyRegisterCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelDailyRegisterCal");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.ArgStr).HasMaxLength(500);

                entity.Property(e => e.Date)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiff).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiffPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerLegPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerPaxPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerWeightPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelDailyRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelDailyRoute");

                entity.Property(e => e.Date).HasMaxLength(500);

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelDailyRouteX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelDailyRouteX");

                entity.Property(e => e.Date).HasMaxLength(500);

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelDailyRouteXCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelDailyRouteXCal");

                entity.Property(e => e.ArgStr).HasMaxLength(500);

                entity.Property(e => e.Date)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiff).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiffPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerLegPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerPaxPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerWeightPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelDailyType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelDailyType");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Date).HasMaxLength(500);

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelDailyTypeCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelDailyTypeCal");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.ArgStr).HasMaxLength(500);

                entity.Property(e => e.Date)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiff).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiffPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerLegPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerPaxPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerWeightPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelLeg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelLeg");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FPFuelKilo).HasColumnType("numeric(25, 10)");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FreightTone).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PYearMonthName).HasMaxLength(511);

                entity.Property(e => e.PYearName).HasMaxLength(255);

                entity.Property(e => e.PaxBlockTime).HasColumnType("numeric(17, 6)");

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(17, 6)");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Remaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.SeasonTitle)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.SeatBlockTime).HasColumnType("numeric(17, 6)");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TakeoffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.TotalPaxAllKilo).HasColumnType("numeric(17, 6)");

                entity.Property(e => e.TotalPaxKilo).HasColumnType("numeric(17, 6)");

                entity.Property(e => e.UpLift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("numeric(25, 10)");

                entity.Property(e => e.Used).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("numeric(25, 10)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 16)");

                entity.Property(e => e.UsedPerFPFuel).HasColumnType("numeric(38, 18)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(32, 16)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 18)");

                entity.Property(e => e.UsedPerSeatBlockTime).HasColumnType("numeric(38, 18)");

                entity.Property(e => e.UsedPerUpLift).HasColumnType("numeric(38, 18)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 12)");

                entity.Property(e => e.WeightBlockTime).HasColumnType("numeric(28, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(17, 6)");

                entity.Property(e => e.WeightToneBlockTime).HasColumnType("numeric(35, 12)");
            });

            modelBuilder.Entity<RptFuelMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelMonthly");

                entity.Property(e => e.AvgUsed).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.CBL).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.CBP).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.FPFuelKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.FPFuelPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.FPFuelPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.MaxUsed).HasColumnType("decimal(20, 6)");

                entity.Property(e => e.MinUsed).HasColumnType("decimal(20, 6)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.PreUsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerFPFuel).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerUpLift).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.SeatBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFPFuel).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTimeAvg).HasColumnType("numeric(38, 18)");

                entity.Property(e => e.UsedPerSeatBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerSeatBlockTimeAvg).HasColumnType("numeric(38, 18)");

                entity.Property(e => e.UsedPerUpLift).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelMonthlyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelMonthlyCal");

                entity.Property(e => e.ArgStr).HasMaxLength(255);

                entity.Property(e => e.AvgUsed).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FPFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.FPFuelKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.FPFuelPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.FPFuelPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.LegsDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.MaxUsed).HasColumnType("decimal(20, 6)");

                entity.Property(e => e.MinUsed).HasColumnType("decimal(20, 6)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.PreUsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerFPFuel).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerUpLift).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.TotalPaxDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiff).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiffPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerPaxPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerWeightPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerBlockTimeDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFPFuel).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFPFuelDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTimeAvg).HasColumnType("numeric(38, 18)");

                entity.Property(e => e.UsedPerPaxBlockTimeDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerSeatBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerSeatBlockTimeAvg).HasColumnType("numeric(38, 18)");

                entity.Property(e => e.UsedPerUpLift).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerUpLiftDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightToneDiff).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelMonthlyRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelMonthlyRegister");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.PreUsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelMonthlyRegisterCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelMonthlyRegisterCal");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FPFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.LegsDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.PreUsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.TotalPaxAllDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.TotalPaxDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerBlockTimeDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTimeDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerLegDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTimeDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTimeDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightToneDiff).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelMonthlyRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelMonthlyRoute");

                entity.Property(e => e.ArgStr).HasMaxLength(255);

                entity.Property(e => e.FPFuelPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.Route2).HasMaxLength(510);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloAvg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerLegAvg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxAvg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelMonthlyRouteX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelMonthlyRouteX");

                entity.Property(e => e.FPFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.PreUsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelMonthlyRouteXCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelMonthlyRouteXCal");

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FPFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.LegsDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.PreUsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.TotalPaxAllDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.TotalPaxDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerBlockTimeDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTimeDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerLegDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTimeDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTimeDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightToneDiff).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelMonthlyType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelMonthlyType");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.PreUsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelMonthlyTypeCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelMonthlyTypeCal");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FPFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.LegsDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.PreUsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PreUsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.TotalPaxAllDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.TotalPaxDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerBlockTimeDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTimeDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerLegDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxBlockTimeDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightToneBlockTimeDiff).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightToneDiff).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelYearlyRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelYearlyRegister");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.FPFuelPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelYearlyRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelYearlyRoute");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelYearlyType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelYearlyType");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.FPFuelPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FPFuelPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerBlockTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerFlightTime).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptNoFDP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptNoFDP");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptNoFDPMonthlyPersian>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptNoFDPMonthlyPersian");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptRedirect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptRedirect");

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.DateFDP).HasColumnType("date");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayLocal).HasColumnType("date");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<RptReposition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptReposition");

                entity.Property(e => e.DateFDP).HasColumnType("date");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Flights)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SMSGroup>(entity =>
            {
                entity.ToTable("SMSGroup");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SMSHistory>(entity =>
            {
                entity.ToTable("SMSHistory");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.Delivery)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RecMobile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RecName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Ref)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ResDate).HasColumnType("datetime");

                entity.Property(e => e.ResFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ResStr)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sender)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Text)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<State>(entity =>
            {
                entity.ToTable("State");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<SumActiveCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumActiveCourse");
            });

            modelBuilder.Entity<SumBoxTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumBoxTime");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<SumCarelessEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumCarelessEmployee");
            });

            modelBuilder.Entity<SumCarelessEmployeeTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumCarelessEmployeeTotal");
            });

            modelBuilder.Entity<SumCertificateStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumCertificateStatus");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SumCertificateType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumCertificateType");

                entity.Property(e => e.CourseTypeTitle).HasMaxLength(500);
            });

            modelBuilder.Entity<SumEmployeeAge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeAge");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SumEmployeeDateAlert>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeDateAlert");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SumEmployeeDegree>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeDegree");

                entity.Property(e => e.EducationDegree).HasMaxLength(1000);
            });

            modelBuilder.Entity<SumEmployeeExp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeExp");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SumEmployeeJobGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeJobGroup");

                entity.Property(e => e.GroupCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RootTitle).HasMaxLength(500);
            });

            modelBuilder.Entity<SumEmployeeLibraryAlert>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeLibraryAlert");
            });

            modelBuilder.Entity<SumEmployeeLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeLocation");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Title)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<SumEmployeeMaritalStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeMaritalStatus");

                entity.Property(e => e.MaritalStatus).HasMaxLength(1000);
            });

            modelBuilder.Entity<SumEmployeeSex>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeSex");

                entity.Property(e => e.Sex).HasMaxLength(1000);
            });

            modelBuilder.Entity<SumEmployeeStudyField>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeStudyField");

                entity.Property(e => e.StudyField).HasMaxLength(1000);
            });

            modelBuilder.Entity<SumFlightDelay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumFlightDelay");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.STDDay).HasColumnType("date");
            });

            modelBuilder.Entity<SumLibraryAddedByMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumLibraryAddedByMonth");

                entity.Property(e => e.MonthName)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<SumLibraryDownloadByMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumLibraryDownloadByMonth");

                entity.Property(e => e.MonthName)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<SumMandatoryCourseExpired>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumMandatoryCourseExpired");

                entity.Property(e => e.CourseType).HasMaxLength(500);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SunTime>(entity =>
            {
                entity.ToTable("SunTime");

                entity.Property(e => e.AstronomicalTwilightBegin).HasColumnType("datetime");

                entity.Property(e => e.AstronomicalTwilightEnd).HasColumnType("datetime");

                entity.Property(e => e.CivilTwilightBegin).HasColumnType("datetime");

                entity.Property(e => e.CivilTwilightEnd).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.NauticalTwilightBegin).HasColumnType("datetime");

                entity.Property(e => e.NauticalTwilightEnd).HasColumnType("datetime");

                entity.Property(e => e.SolarNoon).HasColumnType("datetime");

                entity.Property(e => e.Sunrise).HasColumnType("datetime");

                entity.Property(e => e.Sunset).HasColumnType("datetime");
            });

            modelBuilder.Entity<TableBlockTime>(entity =>
            {
                entity.ToTable("TableBlockTime");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.HasOne(d => d.FDP)
                    .WithMany(p => p.TableBlockTimes)
                    .HasForeignKey(d => d.FDPId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_tableblocktime_fdp");
            });

            modelBuilder.Entity<TableCrewTime>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.CDate })
                    .HasName("PK__TableCre__3214EC0761A1F1AC");

                entity.ToTable("TableCrewTime");

                entity.Property(e => e.CDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TableDutyFDP>(entity =>
            {
                entity.HasKey(e => new { e.FDPId, e.CDate })
                    .HasName("PK__TableDut__540335BF91B8B812");

                entity.ToTable("TableDutyFDP");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<TableFlightFDP>(entity =>
            {
                entity.HasKey(e => new { e.FDPItemId, e.CDate })
                    .HasName("PK__TableDut__540335BF91B8B812_copy1");

                entity.ToTable("TableFlightFDP");

                entity.HasIndex(e => e.CrewId, "idx_tdf_crewid_copy1");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<Teacher>(entity =>
            {
                entity.HasKey(e => e.PersonId)
                    .HasName("PK__Teacher__AA2FFBE507DAB9C2");

                entity.ToTable("Teacher");

                entity.Property(e => e.PersonId).ValueGeneratedNever();

                entity.Property(e => e.Remark)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.HasOne(d => d.Person)
                    .WithOne(p => p.Teacher)
                    .HasForeignKey<Teacher>(d => d.PersonId)
                    .HasConstraintName("fk_teacher_person");
            });

            modelBuilder.Entity<TeacherDocument>(entity =>
            {
                entity.ToTable("TeacherDocument");

                entity.Property(e => e.FileUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.TeacherDocuments)
                    .HasForeignKey(d => d.TeacherId)
                    .HasConstraintName("fk_td_t");
            });

            modelBuilder.Entity<Teleng>(entity =>
            {
                entity.ToTable("Teleng");
            });

            modelBuilder.Entity<TempAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempAirport");

                entity.Property(e => e.continent).HasMaxLength(255);

                entity.Property(e => e.elevation_ft).HasMaxLength(255);

                entity.Property(e => e.gps_code).HasMaxLength(255);

                entity.Property(e => e.home_link).HasMaxLength(255);

                entity.Property(e => e.iata_code).HasMaxLength(255);

                entity.Property(e => e.id).HasMaxLength(255);

                entity.Property(e => e.ident).HasMaxLength(255);

                entity.Property(e => e.iso_country).HasMaxLength(255);

                entity.Property(e => e.iso_region).HasMaxLength(255);

                entity.Property(e => e.keywords).HasMaxLength(255);

                entity.Property(e => e.latitude_deg).HasMaxLength(255);

                entity.Property(e => e.local_code).HasMaxLength(255);

                entity.Property(e => e.longitude_deg).HasMaxLength(255);

                entity.Property(e => e.municipality).HasMaxLength(255);

                entity.Property(e => e.name).HasMaxLength(255);

                entity.Property(e => e.scheduled_service).HasMaxLength(255);

                entity.Property(e => e.type).HasMaxLength(255);

                entity.Property(e => e.wikipedia_link).HasMaxLength(255);
            });

            modelBuilder.Entity<TempGunt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TempGunt");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPRegister)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelReason).HasMaxLength(1000);

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FlightStatusBgColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusClass).HasMaxLength(255);

                entity.Property(e => e.FlightStatusColor).HasMaxLength(255);

                entity.Property(e => e.FromAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.GWLand).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.GWTO).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LinkedFlightNumber).HasMaxLength(50);

                entity.Property(e => e.LinkedReasonTitle).HasMaxLength(1000);

                entity.Property(e => e.LinkedRemark).HasMaxLength(500);

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampReason).HasMaxLength(1000);

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectReason).HasMaxLength(1000);

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STAPlanned).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.STDPlanned).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.duration).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.notes)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.startDate).HasColumnType("datetime");

                entity.Property(e => e.taskName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempUser>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEP).HasMaxLength(255);

                entity.Property(e => e.MOBILE).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.PID).HasMaxLength(255);

                entity.Property(e => e.Username).HasMaxLength(255);
            });

            modelBuilder.Entity<ThirdPartySyncHistory>(entity =>
            {
                entity.ToTable("ThirdPartySyncHistory");

                entity.Property(e => e.App)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DateSync).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UM_User>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CaoCardNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FKDepartmentsLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FaxTelNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.I_Calander_Type_NDT)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsFinancialManager)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IsMRFApprover)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IsQaManager)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NDTNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NationalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nickname)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PassportNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RoomNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sex)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Stamp)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StampNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.fkLocationID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.fkRootLocation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.fkShifts)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.pkUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UpdBL>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UpdBL");

                entity.Property(e => e.DES)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ORG)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UpdatedPlanFlight>(entity =>
            {
                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<UserActivity>(entity =>
            {
                entity.ToTable("UserActivity");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Url).HasMaxLength(500);
            });

            modelBuilder.Entity<UserActivityMenuHit>(entity =>
            {
                entity.ToTable("UserActivityMenuHit");

                entity.Property(e => e.DateLastHit).HasColumnType("datetime");

                entity.Property(e => e.Key).HasMaxLength(500);
            });

            modelBuilder.Entity<UserExt>(entity =>
            {
                entity.ToTable("UserExt");

                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.UserExt)
                    .HasForeignKey<UserExt>(d => d.Id)
                    .HasConstraintName("fk_ext_users");
            });

            modelBuilder.Entity<UserLogin>(entity =>
            {
                entity.ToTable("UserLogin");

                entity.Property(e => e.DateAction).HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewAircraftType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewAircraftType");

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewAirport");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ICAO).HasMaxLength(255);

                entity.Property(e => e.Latitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewApplicableCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewApplicableCourse");

                entity.Property(e => e.CC_Title).HasMaxLength(500);

                entity.Property(e => e.CT_Remark).HasMaxLength(2000);

                entity.Property(e => e.CT_Title).HasMaxLength(500);

                entity.Property(e => e.CalendarType).HasMaxLength(1000);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeRemark).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeTitle).HasMaxLength(300);

                entity.Property(e => e.CerNumber).HasMaxLength(500);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CourseRemark).HasMaxLength(2000);

                entity.Property(e => e.CourseStatus)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Currency).HasMaxLength(1000);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateDeadlineRegistration).HasColumnType("date");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndPractical).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateIssueNDT).HasColumnType("date");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateStartPractical).HasColumnType("date");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.Duration2).HasMaxLength(1031);

                entity.Property(e => e.DurationPracticalUnit).HasMaxLength(1000);

                entity.Property(e => e.DurationUnit).HasMaxLength(1000);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.Instructor).HasMaxLength(500);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NDTIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.NDTNumber).HasMaxLength(200);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.Status).HasMaxLength(1000);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewApplicableCoursePerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewApplicableCoursePerson");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.CerNumber).HasMaxLength(500);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateIssueNDT).HasColumnType("date");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NDTIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.NDTNumber).HasMaxLength(200);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.Status).HasMaxLength(1000);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewBirdStrikeCAO>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBirdStrikeCAO");

                entity.Property(e => e.BirdNrSeen)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.BirdNrStruck)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.BirdSize)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.LocalTime)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.OperatorName)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PhaseOrFlight)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ReportedByName)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.SkyCondition)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewBoardSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBoardSummary");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FuelActual).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.PaxLoad).HasColumnType("numeric(38, 12)");
            });

            modelBuilder.Entity<ViewBook>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBook");

                entity.Property(e => e.Abstract).HasMaxLength(4000);

                entity.Property(e => e.Category).HasMaxLength(1000);

                entity.Property(e => e.Conference).HasMaxLength(500);

                entity.Property(e => e.DOI).HasMaxLength(200);

                entity.Property(e => e.DateConference).HasMaxLength(200);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDeadline).HasColumnType("datetime");

                entity.Property(e => e.DateEffective).HasMaxLength(500);

                entity.Property(e => e.DateExposure).HasColumnType("datetime");

                entity.Property(e => e.DateRelease).HasColumnType("date");

                entity.Property(e => e.DateValidUntil).HasColumnType("datetime");

                entity.Property(e => e.DeadLine).HasColumnType("datetime");

                entity.Property(e => e.Duration).HasMaxLength(100);

                entity.Property(e => e.Edition).HasMaxLength(500);

                entity.Property(e => e.ExternalUrl).HasMaxLength(1000);

                entity.Property(e => e.FullCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.INSPECAccessionNumber).HasMaxLength(200);

                entity.Property(e => e.ISBN).HasMaxLength(500);

                entity.Property(e => e.ISSNElectronic).HasMaxLength(200);

                entity.Property(e => e.ISSNPrint).HasMaxLength(200);

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Journal).HasMaxLength(1000);

                entity.Property(e => e.Language).HasMaxLength(1000);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Pages).HasMaxLength(50);

                entity.Property(e => e.PublishedIn).HasMaxLength(500);

                entity.Property(e => e.Publisher).HasMaxLength(1000);

                entity.Property(e => e.PublisherWebsite).HasMaxLength(500);

                entity.Property(e => e.Sender).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Type).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewBookApplicableEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBookApplicableEmployee");

                entity.Property(e => e.Abstract).HasMaxLength(4000);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.Category).HasMaxLength(1000);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.Conference).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DOI).HasMaxLength(200);

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConference).HasMaxLength(200);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDeadline).HasColumnType("datetime");

                entity.Property(e => e.DateDownload).HasColumnType("datetime");

                entity.Property(e => e.DateEffective).HasMaxLength(500);

                entity.Property(e => e.DateExposure).HasColumnType("datetime");

                entity.Property(e => e.DateIssueNDT).HasColumnType("date");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateRelease).HasColumnType("date");

                entity.Property(e => e.DateSigned).HasColumnType("datetime");

                entity.Property(e => e.DateValidUntil).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.DeadLine).HasColumnType("datetime");

                entity.Property(e => e.Duration).HasMaxLength(100);

                entity.Property(e => e.Edition).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.EmployeeImageUrl).HasMaxLength(1000);

                entity.Property(e => e.ExternalUrl).HasMaxLength(1000);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FileUrl).HasMaxLength(1000);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FolderCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.INSPECAccessionNumber).HasMaxLength(200);

                entity.Property(e => e.ISBN).HasMaxLength(500);

                entity.Property(e => e.ISSNElectronic).HasMaxLength(200);

                entity.Property(e => e.ISSNPrint).HasMaxLength(200);

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Journal).HasMaxLength(1000);

                entity.Property(e => e.Language).HasMaxLength(1000);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NDTIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.NDTNumber).HasMaxLength(200);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Pages).HasMaxLength(50);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.PublishedIn).HasMaxLength(500);

                entity.Property(e => e.Publisher).HasMaxLength(1000);

                entity.Property(e => e.PublisherWebsite).HasMaxLength(500);

                entity.Property(e => e.Sender).HasMaxLength(1000);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Type).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewBookApplicableEmployeeAb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBookApplicableEmployeeAbs");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateDownload).HasColumnType("datetime");

                entity.Property(e => e.DateIssueNDT).HasColumnType("date");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NDTIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.NDTNumber).HasMaxLength(200);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewBookAuthor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBookAuthor");

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(511);

                entity.Property(e => e.PersonType)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewBookChapter>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBookChapter");

                entity.Property(e => e.BookKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fullcode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.TitleFormated).HasMaxLength(4000);

                entity.Property(e => e.TitleFormatedSpace).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewBookFile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBookFile");

                entity.Property(e => e.Chapter).HasMaxLength(500);

                entity.Property(e => e.FileType).HasMaxLength(500);

                entity.Property(e => e.FileUrl).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.SysUrl).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ViewBookFileVisited>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBookFileVisited");

                entity.Property(e => e.Chapter).HasMaxLength(4000);

                entity.Property(e => e.ChapterS).HasMaxLength(4000);

                entity.Property(e => e.DateVisited).HasColumnType("datetime");

                entity.Property(e => e.FileType).HasMaxLength(500);

                entity.Property(e => e.FileUrl).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.SysUrl).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ViewBox>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBox");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DefaultEnd).HasColumnType("datetime");

                entity.Property(e => e.DefaultStart).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Flights)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewBoxCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBoxCrew");

                entity.Property(e => e.ATPLDateExpire).HasColumnType("date");

                entity.Property(e => e.ATPLDateIssue).HasColumnType("date");

                entity.Property(e => e.ATPLNumber).HasMaxLength(500);

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.CPLDateExpire).HasColumnType("date");

                entity.Property(e => e.CPLDateIssue).HasColumnType("date");

                entity.Property(e => e.CPLNumber).HasMaxLength(500);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CurrentLocationAirporIATA).HasMaxLength(255);

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUP).HasColumnType("date");

                entity.Property(e => e.DateNextCheckUP).HasColumnType("date");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.DefaultEnd).HasColumnType("datetime");

                entity.Property(e => e.DefaultStart).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MCCDateExpire).HasColumnType("date");

                entity.Property(e => e.MCCDateIssue).HasColumnType("date");

                entity.Property(e => e.MCCNumber).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PPLDateExpire).HasColumnType("date");

                entity.Property(e => e.PPLDateIssue).HasColumnType("date");

                entity.Property(e => e.PPLNumber).HasMaxLength(500);

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewBoxCrewFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBoxCrewFlight");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateStr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DutyTime).HasColumnType("numeric(1, 1)");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightTime).HasColumnType("numeric(1, 1)");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STAFirst).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDFirst).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewBoxCrewRequirement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBoxCrewRequirement");

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<ViewCaoType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCaoType");

                entity.Property(e => e.CaoGroup)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<ViewCateringItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCateringItem");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.IATA).HasMaxLength(255);

                entity.Property(e => e.ICAO).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewCertificate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCertificate");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeTitle).HasMaxLength(300);

                entity.Property(e => e.CerNumber).HasMaxLength(500);

                entity.Property(e => e.CerUrl).HasMaxLength(255);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CourseCalendarType).HasMaxLength(1000);

                entity.Property(e => e.CourseCategoryTitle).HasMaxLength(500);

                entity.Property(e => e.CourseDateStart).HasColumnType("date");

                entity.Property(e => e.CourseDepartment).HasMaxLength(500);

                entity.Property(e => e.CourseDuration2).HasMaxLength(1031);

                entity.Property(e => e.CourseDurationUnit).HasMaxLength(1000);

                entity.Property(e => e.CourseInstructor).HasMaxLength(500);

                entity.Property(e => e.CourseLocation).HasMaxLength(500);

                entity.Property(e => e.CourseNo).HasMaxLength(500);

                entity.Property(e => e.CourseOrganization).HasMaxLength(1000);

                entity.Property(e => e.CourseRemark).HasMaxLength(2000);

                entity.Property(e => e.CourseTitle).HasMaxLength(500);

                entity.Property(e => e.CourseTrainingDirector).HasMaxLength(500);

                entity.Property(e => e.CourseTypeTitle).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateIssueNDT).HasColumnType("date");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NDTIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.NDTNumber).HasMaxLength(200);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCertification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCertification");

                entity.Property(e => e.AcType).HasMaxLength(255);

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.DateIRValid).HasColumnType("datetime");

                entity.Property(e => e.DateIssue).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.EmployedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Limitation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.No)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Occupation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Rating)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TypeTitle).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCity");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(1009);

                entity.Property(e => e.Latitude).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.SortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewClaim");

                entity.Property(e => e.Claim)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimValue)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCourse");

                entity.Property(e => e.AircraftModel).HasMaxLength(255);

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CC_Title).HasMaxLength(500);

                entity.Property(e => e.CT_Remark).HasMaxLength(2000);

                entity.Property(e => e.CT_Title).HasMaxLength(500);

                entity.Property(e => e.CalendarType).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeRemark).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeTitle).HasMaxLength(300);

                entity.Property(e => e.Currency).HasMaxLength(1000);

                entity.Property(e => e.DateDeadlineRegistration).HasColumnType("date");

                entity.Property(e => e.DateDeadlineRegistrationP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateEndPractical).HasColumnType("date");

                entity.Property(e => e.DateEndPracticalP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateStartP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateStartPractical).HasColumnType("date");

                entity.Property(e => e.DateStartPracticalP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.Duration2).HasMaxLength(1031);

                entity.Property(e => e.DurationPracticalUnit).HasMaxLength(1000);

                entity.Property(e => e.DurationUnit).HasMaxLength(1000);

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.Instructor).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Status)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCourseNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCourseNew");

                entity.Property(e => e.CalendarType).HasMaxLength(1000);

                entity.Property(e => e.CertificateType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CourseType).HasMaxLength(500);

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.DurationUnit).HasMaxLength(1000);

                entity.Property(e => e.Instructor).HasMaxLength(1001);

                entity.Property(e => e.InstructorJobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroups).HasMaxLength(4000);

                entity.Property(e => e.JobGroupsCode)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Sessions)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCourseNotificationEnabled>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCourseNotificationEnabled");

                entity.Property(e => e.AircraftModel).HasMaxLength(255);

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CC_Title).HasMaxLength(500);

                entity.Property(e => e.CT_Remark).HasMaxLength(2000);

                entity.Property(e => e.CT_Title).HasMaxLength(500);

                entity.Property(e => e.CalendarType).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeRemark).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeTitle).HasMaxLength(300);

                entity.Property(e => e.Currency).HasMaxLength(1000);

                entity.Property(e => e.DateDeadlineRegistration).HasColumnType("date");

                entity.Property(e => e.DateDeadlineRegistrationP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateEndPractical).HasColumnType("date");

                entity.Property(e => e.DateEndPracticalP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateStartP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateStartPractical).HasColumnType("date");

                entity.Property(e => e.DateStartPracticalP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.Duration2).HasMaxLength(1031);

                entity.Property(e => e.DurationPracticalUnit).HasMaxLength(1000);

                entity.Property(e => e.DurationUnit).HasMaxLength(1000);

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.Instructor).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Status)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCoursePeoplePassedRanked>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCoursePeoplePassedRanked");

                entity.Property(e => e.CalendarType).HasMaxLength(1000);

                entity.Property(e => e.CertificateNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CertificateType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CoursePeopleStatus)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.CourseType).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.DateIssue).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.DurationUnit).HasMaxLength(1000);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1059);

                entity.Property(e => e.ImgUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Instructor).HasMaxLength(1001);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.Status)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.StatusRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCoursePeopleRanked>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCoursePeopleRanked");

                entity.Property(e => e.CalendarType).HasMaxLength(1000);

                entity.Property(e => e.CertificateNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CertificateType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CoursePeopleStatus)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.CourseType).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.DateIssue).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.DurationUnit).HasMaxLength(1000);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1059);

                entity.Property(e => e.Instructor).HasMaxLength(500);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.Status)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.StatusRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCoursePerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCoursePeople");

                entity.Property(e => e.CalendarType).HasMaxLength(1000);

                entity.Property(e => e.CertificateNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CertificateType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CoursePeopleStatus)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.CourseType).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.DateIssue).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.DurationUnit).HasMaxLength(1000);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.ImgUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Instructor).HasMaxLength(1001);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.Status)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.StatusRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCourseSession>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCourseSession");

                entity.Property(e => e.CT_Title).HasMaxLength(500);

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndUtc).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartUtc).HasColumnType("datetime");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.Instructor).HasMaxLength(500);

                entity.Property(e => e.Key)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.PDate).HasMaxLength(4000);

                entity.Property(e => e.PDayName).HasMaxLength(4000);

                entity.Property(e => e.PMonthName).HasMaxLength(4000);

                entity.Property(e => e.PYearName).HasMaxLength(4000);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Status)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCourseSessionPresence>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCourseSessionPresence");

                entity.Property(e => e.AttendancePercent).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.SessionEnd).HasColumnType("datetime");

                entity.Property(e => e.SessionKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SessionStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewCourseSessionPresenceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCourseSessionPresenceDetail");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.SessionKey)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCourseType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCourseType");

                entity.Property(e => e.CalenderType).HasMaxLength(1000);

                entity.Property(e => e.Category).HasMaxLength(500);

                entity.Property(e => e.CertificateType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Interval2).HasMaxLength(1031);

                entity.Property(e => e.JobGroups).HasMaxLength(4000);

                entity.Property(e => e.JobGroupsCode)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCourseTypeJobGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCourseTypeJobGroup");

                entity.Property(e => e.FullCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrew");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AvSecExpired).HasColumnType("datetime");

                entity.Property(e => e.AvSecIssued).HasColumnType("datetime");

                entity.Property(e => e.AvStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CCRMExpired).HasColumnType("datetime");

                entity.Property(e => e.CCRMIssued).HasColumnType("datetime");

                entity.Property(e => e.CMCExpired).HasColumnType("datetime");

                entity.Property(e => e.CRMExpired).HasColumnType("datetime");

                entity.Property(e => e.CRMIssued).HasColumnType("datetime");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ColdWXExpired).HasColumnType("datetime");

                entity.Property(e => e.ColdWXIssued).HasColumnType("datetime");

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CurrentLocationAirporIATA).HasMaxLength(255);

                entity.Property(e => e.CurrentLocationCity).HasMaxLength(500);

                entity.Property(e => e.DGExpired).HasColumnType("datetime");

                entity.Property(e => e.DGIssued).HasColumnType("datetime");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUP).HasColumnType("date");

                entity.Property(e => e.DateNextCheckUP).HasColumnType("date");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateTypeExpire).HasColumnType("datetime");

                entity.Property(e => e.DateTypeIssue).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstAidExpired).HasColumnType("datetime");

                entity.Property(e => e.FirstAidIssued).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.HotWXExpired).HasColumnType("datetime");

                entity.Property(e => e.HotWXIssued).HasColumnType("datetime");

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LPCExpired).HasColumnType("datetime");

                entity.Property(e => e.LPCIssued).HasColumnType("datetime");

                entity.Property(e => e.LPRExpired).HasColumnType("datetime");

                entity.Property(e => e.LastLocation).HasMaxLength(255);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LicenceExpired).HasColumnType("datetime");

                entity.Property(e => e.LicenceIssued).HasColumnType("datetime");

                entity.Property(e => e.LineExpired).HasColumnType("datetime");

                entity.Property(e => e.LineIssued).HasColumnType("datetime");

                entity.Property(e => e.MedicalExpired).HasColumnType("date");

                entity.Property(e => e.MedicalIssued).HasColumnType("date");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.OPCExpired).HasColumnType("datetime");

                entity.Property(e => e.OPCIssued).HasColumnType("datetime");

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.RecurrentExpired).HasColumnType("datetime");

                entity.Property(e => e.RecurrentIssued).HasColumnType("datetime");

                entity.Property(e => e.SEPTExpired).HasColumnType("datetime");

                entity.Property(e => e.SEPTIssued).HasColumnType("datetime");

                entity.Property(e => e.SEPTPExpired).HasColumnType("datetime");

                entity.Property(e => e.SEPTPIssued).HasColumnType("datetime");

                entity.Property(e => e.SMSExpired).HasColumnType("datetime");

                entity.Property(e => e.SMSIssued).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TREExpired).HasColumnType("datetime");

                entity.Property(e => e.TRIExpired).HasColumnType("datetime");

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewAssignFDP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewAssignFDP");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrewCalendar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewCalendar");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateCease).HasColumnType("datetime");

                entity.Property(e => e.DateCeaseLocal).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndActual).HasColumnType("datetime");

                entity.Property(e => e.DateEndActualLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.Duty).HasColumnType("numeric(13, 2)");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewCalendarSplited>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewCalendarSplited");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateCease).HasColumnType("datetime");

                entity.Property(e => e.DateCeaseLocal).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateLocal).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Duty).HasColumnType("numeric(13, 2)");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewCertificatesSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewCertificatesSummary");

                entity.Property(e => e.AvSecExpireDate).HasColumnType("date");

                entity.Property(e => e.AvSecIssueDate).HasColumnType("date");

                entity.Property(e => e.CCRMExpireDate).HasColumnType("date");

                entity.Property(e => e.CCRMIssueDate).HasColumnType("date");

                entity.Property(e => e.CMCExpireDate).HasColumnType("date");

                entity.Property(e => e.ColdWeatherExpireDate).HasColumnType("date");

                entity.Property(e => e.ColdWeatherIssueDate).HasColumnType("date");

                entity.Property(e => e.DGExpireDate).HasColumnType("date");

                entity.Property(e => e.DGIssueDate).HasColumnType("date");

                entity.Property(e => e.FirstAidExpireDate).HasColumnType("date");

                entity.Property(e => e.FirstAidIssueDate).HasColumnType("date");

                entity.Property(e => e.HotWeatherExpireDate).HasColumnType("date");

                entity.Property(e => e.HotWeatherIssueDate).HasColumnType("date");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LPRExpireDate).HasColumnType("date");

                entity.Property(e => e.MedicalLastCheckup).HasColumnType("date");

                entity.Property(e => e.MedicalNextChechup).HasColumnType("date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.ProficiencyCheckDate).HasColumnType("date");

                entity.Property(e => e.ProficiencyExpireDate).HasColumnType("date");

                entity.Property(e => e.SEPTExpireDate).HasColumnType("date");

                entity.Property(e => e.SEPTIssueDate).HasColumnType("date");

                entity.Property(e => e.SEPTPracticalExpireDate).HasColumnType("date");

                entity.Property(e => e.SEPTPracticalIssueDate).HasColumnType("date");

                entity.Property(e => e.SMSExpireDate).HasColumnType("date");

                entity.Property(e => e.SMSIssueDate).HasColumnType("date");
            });

            modelBuilder.Entity<ViewCrewCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewCode");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AvStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CurrentLocationCity).HasMaxLength(500);

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUP).HasColumnType("date");

                entity.Property(e => e.DateNextCheckUP).HasColumnType("date");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SecretCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewDuty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewDuty");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CanceledNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateLocal).HasColumnType("date");

                entity.Property(e => e.DateLocal2).HasColumnType("date");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.Property(e => e.Delivery)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.End).HasColumnType("datetime");

                entity.Property(e => e.EndUTC).HasColumnType("datetime");

                entity.Property(e => e.FltNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsVisitedStr)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Ref)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark2).HasMaxLength(500);

                entity.Property(e => e.ResDate).HasColumnType("datetime");

                entity.Property(e => e.ResStr)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SMS)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Start).HasColumnType("datetime");

                entity.Property(e => e.StartUTC).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrewDutyNoReg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewDutyNoReg");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateLocal).HasColumnType("date");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.Property(e => e.Delivery)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.End).HasColumnType("datetime");

                entity.Property(e => e.EndUTC).HasColumnType("datetime");

                entity.Property(e => e.FltNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsVisitedStr)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.REgister)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ref)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark2).HasMaxLength(500);

                entity.Property(e => e.ResDate).HasColumnType("datetime");

                entity.Property(e => e.ResStr)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SMS)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Start).HasColumnType("datetime");

                entity.Property(e => e.StartUTC).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrewDutyTimeLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewDutyTimeLine");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.End).HasColumnType("datetime");

                entity.Property(e => e.EndLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.InitEnd).HasColumnType("datetime");

                entity.Property(e => e.InitFlights)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFromIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitGroup)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRank)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitStart).HasColumnType("datetime");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroup2).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Key)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MaxFDP).HasColumnType("decimal(10, 5)");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Rank).HasMaxLength(1000);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark2).HasMaxLength(500);

                entity.Property(e => e.RestTo).HasColumnType("datetime");

                entity.Property(e => e.RestToLocal).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Start).HasColumnType("datetime");

                entity.Property(e => e.StartLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewCrewFMD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewFMD");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AvSecExpired).HasColumnType("datetime");

                entity.Property(e => e.AvStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CCRMExpired).HasColumnType("datetime");

                entity.Property(e => e.CMCExpired).HasColumnType("datetime");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CurrentLocationAirporIATA).HasMaxLength(255);

                entity.Property(e => e.CurrentLocationCity).HasMaxLength(500);

                entity.Property(e => e.DGExpired).HasColumnType("datetime");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUP).HasColumnType("date");

                entity.Property(e => e.DateNextCheckUP).HasColumnType("date");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateTypeExpire).HasColumnType("datetime");

                entity.Property(e => e.DateTypeIssue).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstAidExpired).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LPCExpired).HasColumnType("datetime");

                entity.Property(e => e.LPRExpired).HasColumnType("datetime");

                entity.Property(e => e.LastLocation).HasMaxLength(255);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LicenceExpired).HasColumnType("datetime");

                entity.Property(e => e.MedicalExpired).HasColumnType("date");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.SEPTExpired).HasColumnType("datetime");

                entity.Property(e => e.SMSExpired).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewFlightApp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewFlightApp");

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksInLocal).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.ChocksOutLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.PickupLocal).HasColumnType("datetime");

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Ramp)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayEnd).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewCrewList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewList");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.FDPTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Position)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewNoLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewNoLocation");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AvStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUP).HasColumnType("date");

                entity.Property(e => e.DateNextCheckUP).HasColumnType("date");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewPickupSM>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewPickupSMS");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DateLocal).HasColumnType("date");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyDate).HasColumnType("datetime");

                entity.Property(e => e.DutyType).HasMaxLength(1000);

                entity.Property(e => e.End).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FltIds)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Flts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.PickupLocal).HasColumnType("datetime");

                entity.Property(e => e.RefId)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Routes)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName).HasMaxLength(500);

                entity.Property(e => e.Sender)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Start).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.TypeStr).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewTime");

                entity.Property(e => e.CDate).HasColumnType("date");

                entity.Property(e => e.CalendarStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateStr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ECDateEnd).HasColumnType("datetime");

                entity.Property(e => e.ECDateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.ECDateStart).HasColumnType("datetime");

                entity.Property(e => e.ECDateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FDPReduction).HasColumnType("numeric(1, 1)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Year_Duty).HasColumnType("numeric(2, 1)");
            });

            modelBuilder.Entity<ViewCrewTimeDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewTimeDetail");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.CDate).HasColumnType("date");

                entity.Property(e => e.CalendarStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CurrentLocationAirporIATA).HasMaxLength(255);

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUP).HasColumnType("date");

                entity.Property(e => e.DateNextCheckUP).HasColumnType("date");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateStr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewValid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewValid");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentLocationAirporIATA).HasMaxLength(255);

                entity.Property(e => e.CurrentLocationCity).HasMaxLength(500);

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateTypeExpire).HasColumnType("datetime");

                entity.Property(e => e.DateTypeIssue).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastLocation).HasMaxLength(255);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ValidationMessage)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrewValidFTL>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewValidFTL");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AvSecExpired).HasColumnType("datetime");

                entity.Property(e => e.AvSecIssued).HasColumnType("datetime");

                entity.Property(e => e.CCRMExpired).HasColumnType("datetime");

                entity.Property(e => e.CCRMIssued).HasColumnType("datetime");

                entity.Property(e => e.CMCExpired).HasColumnType("datetime");

                entity.Property(e => e.CRMExpired).HasColumnType("datetime");

                entity.Property(e => e.CRMIssued).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ColdWXExpired).HasColumnType("datetime");

                entity.Property(e => e.ColdWXIssued).HasColumnType("datetime");

                entity.Property(e => e.CurrentLocationAirporIATA).HasMaxLength(255);

                entity.Property(e => e.CurrentLocationCity).HasMaxLength(500);

                entity.Property(e => e.DGExpired).HasColumnType("datetime");

                entity.Property(e => e.DGIssued).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateTypeExpire).HasColumnType("datetime");

                entity.Property(e => e.DateTypeIssue).HasColumnType("datetime");

                entity.Property(e => e.FirstAidExpired).HasColumnType("date");

                entity.Property(e => e.FirstAidIssued).HasColumnType("date");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.HotWXExpired).HasColumnType("datetime");

                entity.Property(e => e.HotWXIssued).HasColumnType("datetime");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LPCExpired).HasColumnType("datetime");

                entity.Property(e => e.LPCIssued).HasColumnType("datetime");

                entity.Property(e => e.LPRExpired).HasColumnType("datetime");

                entity.Property(e => e.LastLocation).HasMaxLength(255);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LicenceExpired).HasColumnType("datetime");

                entity.Property(e => e.LicenceIssued).HasColumnType("datetime");

                entity.Property(e => e.LineExpired).HasColumnType("datetime");

                entity.Property(e => e.LineIssued).HasColumnType("datetime");

                entity.Property(e => e.MedicalExpired).HasColumnType("date");

                entity.Property(e => e.MedicalIssued).HasColumnType("date");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.OPCExpired).HasColumnType("datetime");

                entity.Property(e => e.OPCIssued).HasColumnType("datetime");

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RecurrentExpired).HasColumnType("datetime");

                entity.Property(e => e.RecurrentIssued).HasColumnType("datetime");

                entity.Property(e => e.SEPTExpired).HasColumnType("datetime");

                entity.Property(e => e.SEPTIssued).HasColumnType("datetime");

                entity.Property(e => e.SEPTPExpired).HasColumnType("datetime");

                entity.Property(e => e.SEPTPIssued).HasColumnType("datetime");

                entity.Property(e => e.SMSExpired).HasColumnType("datetime");

                entity.Property(e => e.SMSIssued).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TREExpired).HasColumnType("datetime");

                entity.Property(e => e.TRIExpired).HasColumnType("datetime");

                entity.Property(e => e.ValidationMessage)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDailyRosterFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDailyRosterFlights");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureDate).HasColumnType("date");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDay");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDayDuty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayDuty");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDayDuty7>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayDuty7");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDayDutyFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayDutyFlight");

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<ViewDayFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayFlight");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDayFlight28>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayFlight28");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDayGP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayGP");

                entity.Property(e => e.GDate).HasColumnType("datetime");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PYearName).HasMaxLength(255);

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewDayOffRanked>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayOffRanked");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ViewDayRanked>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayRanked");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDelayAirportCategoryGrouped>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayAirportCategoryGrouped");

                entity.Property(e => e.Airport).HasMaxLength(255);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.PDate).HasMaxLength(4000);

                entity.Property(e => e.PDayName).HasMaxLength(4000);

                entity.Property(e => e.PMonthName).HasMaxLength(4000);

                entity.Property(e => e.PYearName).HasMaxLength(4000);

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayAirportGrouped>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayAirportGrouped");

                entity.Property(e => e.Airport).HasMaxLength(255);

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.PDate).HasMaxLength(4000);

                entity.Property(e => e.PDayName).HasMaxLength(4000);

                entity.Property(e => e.PMonthName).HasMaxLength(4000);

                entity.Property(e => e.PYearName).HasMaxLength(4000);

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayCategoryGrouped>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayCategoryGrouped");

                entity.Property(e => e.Category)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.PDate).HasMaxLength(4000);

                entity.Property(e => e.PDayName).HasMaxLength(4000);

                entity.Property(e => e.PMonthName).HasMaxLength(4000);

                entity.Property(e => e.PYearName).HasMaxLength(4000);

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayCode");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CategoryRemark).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ICategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewDelayDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayDaily");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.PDate).HasMaxLength(4000);

                entity.Property(e => e.PDayName).HasMaxLength(4000);

                entity.Property(e => e.PMonthName).HasMaxLength(4000);

                entity.Property(e => e.PYearName).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayDailyAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayDailyAirport");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.PDate).HasMaxLength(4000);

                entity.Property(e => e.PDayName).HasMaxLength(4000);

                entity.Property(e => e.PMonthName).HasMaxLength(4000);

                entity.Property(e => e.PYearName).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayDailyAirportCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayDailyAirportCategory");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.PDate).HasMaxLength(4000);

                entity.Property(e => e.PDayName).HasMaxLength(4000);

                entity.Property(e => e.PMonthName).HasMaxLength(4000);

                entity.Property(e => e.PYearName).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayDailyCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayDailyCategory");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.PDate).HasMaxLength(4000);

                entity.Property(e => e.PDayName).HasMaxLength(4000);

                entity.Property(e => e.PMonthName).HasMaxLength(4000);

                entity.Property(e => e.PYearName).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayGrouped>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayGrouped");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.PDate).HasMaxLength(4000);

                entity.Property(e => e.PDayName).HasMaxLength(4000);

                entity.Property(e => e.PMonthName).HasMaxLength(4000);

                entity.Property(e => e.PYearName).HasMaxLength(4000);

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayMonthly");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthFrom).HasColumnType("datetime");

                entity.Property(e => e.MonthFromPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.MonthTo).HasColumnType("datetime");

                entity.Property(e => e.MonthToPersian).HasMaxLength(4000);

                entity.Property(e => e.Title)
                    .HasMaxLength(203)
                    .IsUnicode(false);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDelayMonthlyAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayMonthlyAirport");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthFrom).HasColumnType("datetime");

                entity.Property(e => e.MonthFromPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.MonthTo).HasColumnType("datetime");

                entity.Property(e => e.MonthToPersian).HasMaxLength(4000);

                entity.Property(e => e.Title)
                    .HasMaxLength(203)
                    .IsUnicode(false);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDelayMonthlyAirportCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayMonthlyAirportCategory");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthFrom).HasColumnType("datetime");

                entity.Property(e => e.MonthFromPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.MonthTo).HasColumnType("datetime");

                entity.Property(e => e.MonthToPersian).HasMaxLength(4000);

                entity.Property(e => e.Title)
                    .HasMaxLength(203)
                    .IsUnicode(false);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDelayMonthlyCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayMonthlyCategory");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthFrom).HasColumnType("datetime");

                entity.Property(e => e.MonthFromPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.MonthTo).HasColumnType("datetime");

                entity.Property(e => e.MonthToPersian).HasMaxLength(4000);

                entity.Property(e => e.Title)
                    .HasMaxLength(203)
                    .IsUnicode(false);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDelayWeekly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayWeekly");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(202)
                    .IsUnicode(false);

                entity.Property(e => e.WeekFrom).HasColumnType("datetime");

                entity.Property(e => e.WeekFromPersian).HasMaxLength(4000);

                entity.Property(e => e.WeekStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.WeekTo).HasColumnType("datetime");

                entity.Property(e => e.WeekToPersian).HasMaxLength(4000);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDelayWeeklyAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayWeeklyAirport");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(202)
                    .IsUnicode(false);

                entity.Property(e => e.WeekFrom).HasColumnType("datetime");

                entity.Property(e => e.WeekFromPersian).HasMaxLength(4000);

                entity.Property(e => e.WeekStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.WeekTo).HasColumnType("datetime");

                entity.Property(e => e.WeekToPersian).HasMaxLength(4000);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDelayWeeklyAirportCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayWeeklyAirportCategory");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(202)
                    .IsUnicode(false);

                entity.Property(e => e.WeekFrom).HasColumnType("datetime");

                entity.Property(e => e.WeekFromPersian).HasMaxLength(4000);

                entity.Property(e => e.WeekStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.WeekTo).HasColumnType("datetime");

                entity.Property(e => e.WeekToPersian).HasMaxLength(4000);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDelayWeeklyCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayWeeklyCategory");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(202)
                    .IsUnicode(false);

                entity.Property(e => e.WeekFrom).HasColumnType("datetime");

                entity.Property(e => e.WeekFromPersian).HasMaxLength(4000);

                entity.Property(e => e.WeekStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.WeekTo).HasColumnType("datetime");

                entity.Property(e => e.WeekToPersian).HasMaxLength(4000);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDispatchSMSEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDispatchSMSEmployee");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDool>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDool");

                entity.Property(e => e._0).HasColumnName("0");
            });

            modelBuilder.Entity<ViewDutyCalendar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyCalendar");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DateEndActual).HasColumnType("datetime");

                entity.Property(e => e.DateEndActualLocal).HasColumnType("datetime");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Duration).HasColumnType("numeric(13, 2)");

                entity.Property(e => e.DurationLocal).HasColumnType("numeric(13, 2)");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewDutyCalendarSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyCalendarSum");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.Duration).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.DurationLocal).HasColumnType("numeric(38, 2)");
            });

            modelBuilder.Entity<ViewDutyFDP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFDP");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDutyFDPDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFDPDetail");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FDPRemark).HasMaxLength(4000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDutyFDPSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFDPSum");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DatePart).HasColumnType("date");
            });

            modelBuilder.Entity<ViewDutyFDPSumCom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFDPSumCom");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DatePart).HasColumnType("date");
            });

            modelBuilder.Entity<ViewDutyFDPSumShadow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFDPSumShadow");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DatePart).HasColumnType("date");
            });

            modelBuilder.Entity<ViewDutyFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFlight");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDutyFlightLocal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFlightLocal");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.CDate).HasColumnType("date");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureDay).HasColumnType("date");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDutyFlightSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFlightSum");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DatePart).HasColumnType("date");
            });

            modelBuilder.Entity<ViewDutyFlightSumCom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFlightSumCom");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DatePart).HasColumnType("date");
            });

            modelBuilder.Entity<ViewEFBASR>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEFBASR");

                entity.Property(e => e.AATATCInstruction).HasMaxLength(255);

                entity.Property(e => e.AATCallSign).HasMaxLength(255);

                entity.Property(e => e.AATClearedAltitude).HasMaxLength(255);

                entity.Property(e => e.AATFrequency).HasMaxLength(255);

                entity.Property(e => e.AATHeading).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.AATLighting).HasMaxLength(255);

                entity.Property(e => e.AATMarkingColour).HasMaxLength(255);

                entity.Property(e => e.AATMinHorizontalSep).HasMaxLength(255);

                entity.Property(e => e.AATMinVerticalSep).HasMaxLength(255);

                entity.Property(e => e.AATOtherACType).HasMaxLength(255);

                entity.Property(e => e.AATReportedToATC).HasMaxLength(255);

                entity.Property(e => e.AATRisk).HasMaxLength(1000);

                entity.Property(e => e.AATTCASAlert).HasMaxLength(1000);

                entity.Property(e => e.AATTypeRA).HasMaxLength(255);

                entity.Property(e => e.AATVerticalDeviation).HasMaxLength(255);

                entity.Property(e => e.ACConfigAP).HasMaxLength(255);

                entity.Property(e => e.ACConfigATHR).HasMaxLength(255);

                entity.Property(e => e.ACConfigFlap).HasMaxLength(255);

                entity.Property(e => e.ACConfigGear).HasMaxLength(255);

                entity.Property(e => e.ACConfigSlat).HasMaxLength(255);

                entity.Property(e => e.ACConfigSpoilers).HasMaxLength(255);

                entity.Property(e => e.ACWeight).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ActualWX).HasMaxLength(500);

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Altitude).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.BSBirdType).HasMaxLength(255);

                entity.Property(e => e.BSImpactDec).HasMaxLength(1000);

                entity.Property(e => e.BSNrSeen).HasMaxLength(1000);

                entity.Property(e => e.BSNrStruck).HasMaxLength(1000);

                entity.Property(e => e.BSTime).HasMaxLength(1000);

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOffLocal).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.BlockOnLocal).HasColumnType("datetime");

                entity.Property(e => e.CARGO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPRegister)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.EventType).HasMaxLength(1000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPhase).HasMaxLength(1000);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelJettisoned).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.FuelRemaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelTotal).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUsed).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IPName).HasMaxLength(1001);

                entity.Property(e => e.IPScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JLApprover).HasMaxLength(1001);

                entity.Property(e => e.JLDate).HasColumnType("datetime");

                entity.Property(e => e.JLDateApproved).HasColumnType("datetime");

                entity.Property(e => e.JLDatePICApproved).HasColumnType("datetime");

                entity.Property(e => e.JLNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.JLUser).HasMaxLength(1001);

                entity.Property(e => e.LOCAirport).HasMaxLength(255);

                entity.Property(e => e.LOCGEOAltitude).HasMaxLength(255);

                entity.Property(e => e.LOCGEOLongtitude).HasMaxLength(255);

                entity.Property(e => e.LOCRunway).HasMaxLength(255);

                entity.Property(e => e.LOCStand).HasMaxLength(255);

                entity.Property(e => e.LTR)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.MET).HasMaxLength(1000);

                entity.Property(e => e.OccurrenceDate).HasColumnType("datetime");

                entity.Property(e => e.OthersInfo).HasMaxLength(2000);

                entity.Property(e => e.P1Name).HasMaxLength(1001);

                entity.Property(e => e.P1ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P2Name).HasMaxLength(1001);

                entity.Property(e => e.P2ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PF)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PIC).HasMaxLength(1001);

                entity.Property(e => e.PICDate).HasColumnType("date");

                entity.Property(e => e.RVSM_FLT_CPT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_FLT_FO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_FLT_STBY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_CPT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_FO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_STBY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Result).HasMaxLength(2000);

                entity.Property(e => e.RunwayCondition).HasMaxLength(1000);

                entity.Property(e => e.SIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SQUAWK).HasMaxLength(255);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STADayLocal).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayLocal).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SigxWX).HasMaxLength(1000);

                entity.Property(e => e.Summary).HasMaxLength(2000);

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.TechLogItemNO)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TechLogPageNO)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WTAttitudeChange).HasMaxLength(1000);

                entity.Property(e => e.WTAttitudeChangeDeg).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.WTDescribeVA).HasMaxLength(1000);

                entity.Property(e => e.WTExtendedCenterlinePos).HasMaxLength(1000);

                entity.Property(e => e.WTGlideSlopePos).HasMaxLength(1000);

                entity.Property(e => e.WTHeading).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.WTPrecedingAC).HasMaxLength(255);

                entity.Property(e => e.WTSuspect).HasMaxLength(1000);

                entity.Property(e => e.WTTurning).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewEFBDSPRelease>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEFBDSPReleases");

                entity.Property(e => e.ATCFlightPlanCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.ATCFlightPlanDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.AVSECIncidentReportCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.AVSECIncidentReportDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.ActualWXCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.ActualWXDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.ComputedFligthPlanCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.ComputedFligthPlanDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.DSPMobile).HasMaxLength(500);

                entity.Property(e => e.DSPNID).HasMaxLength(500);

                entity.Property(e => e.DSPName).HasMaxLength(1001);

                entity.Property(e => e.DSPPID).HasMaxLength(500);

                entity.Property(e => e.DateConfirmed).HasColumnType("date");

                entity.Property(e => e.FlightReportCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.FlightReportDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.FlightSafetyReportCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.FlightSafetyReportDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.GeneralDeclarationCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.GeneralDeclarationDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.GoodDeclarationCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.GoodDeclarationDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.IPADCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.IPADDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.JeppesenAirwayManualCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.JeppesenAirwayManualDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.LoadSheetCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.LoadSheetDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.MinFuelRequiredPilotReq).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.MinFuelRequiredSFP).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.NotamCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.NotamDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.OperationEngineeringCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.OperationEngineeringDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.PIFCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.PIFDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.PermissionsCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.PermissionsDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.SigxWXCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.SigxWXDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.TOLndCardsCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.TOLndCardsDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.VoyageReportCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.VoyageReportDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.WXForcastCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.WXForcastDSPRemark).HasMaxLength(1000);

                entity.Property(e => e.WindChartCPTRemark).HasMaxLength(1000);

                entity.Property(e => e.WindChartDSPRemark).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewEFBOccurrenceCAO>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEFBOccurrenceCAOs");

                entity.Property(e => e.ACFlightPhase).HasMaxLength(1000);

                entity.Property(e => e.ACFlightPhaseRemark).HasMaxLength(500);

                entity.Property(e => e.ACModel)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Altitude).HasMaxLength(255);

                entity.Property(e => e.CallSign)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Damage).HasMaxLength(1000);

                entity.Property(e => e.DamageDetail).HasMaxLength(1000);

                entity.Property(e => e.EquipmentAirportPlacard).HasMaxLength(255);

                entity.Property(e => e.EquipmentCompany).HasMaxLength(255);

                entity.Property(e => e.EquipmentContan).HasMaxLength(255);

                entity.Property(e => e.EquipmentDriverName).HasMaxLength(255);

                entity.Property(e => e.EquipmentIdNO).HasMaxLength(1);

                entity.Property(e => e.EquipmentType).HasMaxLength(255);

                entity.Property(e => e.EventTimeWX).HasMaxLength(1);

                entity.Property(e => e.ForcastWX).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.Nationality)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OccurrenceDate).HasColumnType("datetime");

                entity.Property(e => e.OccurrenceType).HasMaxLength(1000);

                entity.Property(e => e.OtherDangerousGood).HasMaxLength(255);

                entity.Property(e => e.PriorEventWX).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewEFBVoyageIrr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEFBVoyageIrr");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewEFBVoyageReason>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEFBVoyageReason");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewEFBVoyageReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEFBVoyageReport");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOffLocal).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.BlockOnLocal).HasColumnType("datetime");

                entity.Property(e => e.CARGO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPRegister)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.DateActioned).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("date");

                entity.Property(e => e.DatePICSignature).HasColumnType("date");

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelRemaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelTotal).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUsed).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IPName).HasMaxLength(1001);

                entity.Property(e => e.IPScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Irrs).HasMaxLength(4000);

                entity.Property(e => e.JLApprover).HasMaxLength(1001);

                entity.Property(e => e.JLDate).HasColumnType("datetime");

                entity.Property(e => e.JLDateApproved).HasColumnType("datetime");

                entity.Property(e => e.JLDatePICApproved).HasColumnType("datetime");

                entity.Property(e => e.JLNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.JLUser).HasMaxLength(1001);

                entity.Property(e => e.LTR)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.P1Name).HasMaxLength(1001);

                entity.Property(e => e.P1ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P2Name).HasMaxLength(1001);

                entity.Property(e => e.P2ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PF)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PIC).HasMaxLength(1001);

                entity.Property(e => e.RVSM_FLT_CPT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_FLT_FO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_FLT_STBY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_CPT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_FO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_STBY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Reasons).HasMaxLength(4000);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route).HasMaxLength(255);

                entity.Property(e => e.SIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STADayLocal).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayLocal).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewEFBVoyageReportsAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEFBVoyageReportsAll");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.DateActioned).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("date");

                entity.Property(e => e.DatePICSignature).HasColumnType("date");

                entity.Property(e => e.DestinationIATA).HasMaxLength(255);

                entity.Property(e => e.FlightDate).HasColumnType("date");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.OriginIATA).HasMaxLength(255);

                entity.Property(e => e.PID).HasMaxLength(500);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route).HasMaxLength(511);
            });

            modelBuilder.Entity<ViewEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployee");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AviationSecurityExpireDate).HasColumnType("datetime");

                entity.Property(e => e.AviationSecurityIssueDate).HasColumnType("datetime");

                entity.Property(e => e.BaseAirport).HasMaxLength(255);

                entity.Property(e => e.CCRMExpireDate).HasColumnType("datetime");

                entity.Property(e => e.CCRMIssueDate).HasColumnType("datetime");

                entity.Property(e => e.CRMExpireDate).HasColumnType("datetime");

                entity.Property(e => e.CRMIssueDate).HasColumnType("datetime");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.City).HasMaxLength(500);

                entity.Property(e => e.CityFullName).HasMaxLength(1009);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CodeX)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ColdWeatherOperationExpireDate).HasColumnType("datetime");

                entity.Property(e => e.ColdWeatherOperationIssueDate).HasColumnType("datetime");

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.Country)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CrewMemberCertificateExpireDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentLocationCity).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DangerousGoodsExpireDate).HasColumnType("datetime");

                entity.Property(e => e.DangerousGoodsIssueDate).HasColumnType("datetime");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateExpireNDT).HasColumnType("date");

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateIssueNDT).HasColumnType("date");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUP).HasColumnType("date");

                entity.Property(e => e.DateNextCheckUP).HasColumnType("date");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateTREExpired).HasColumnType("datetime");

                entity.Property(e => e.DateTRIExpired).HasColumnType("datetime");

                entity.Property(e => e.DateTypeExpire).HasColumnType("datetime");

                entity.Property(e => e.DateTypeIssue).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.EGPWSExpireDate).HasColumnType("datetime");

                entity.Property(e => e.EGPWSIssueDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FatherName).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstAidExpireDate).HasColumnType("datetime");

                entity.Property(e => e.FirstAidIssueDate).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.HotWeatherOperationExpireDate).HasColumnType("datetime");

                entity.Property(e => e.HotWeatherOperationIssueDate).HasColumnType("datetime");

                entity.Property(e => e.ICAOLPRValidUntil).HasColumnType("datetime");

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupCode2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupMain).HasMaxLength(500);

                entity.Property(e => e.JobGroupMainCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCourseExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LicenceDescription).HasMaxLength(2000);

                entity.Property(e => e.LicenceExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LicenceIRExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LicenceInitialIssue).HasColumnType("datetime");

                entity.Property(e => e.LicenceIssueDate).HasColumnType("datetime");

                entity.Property(e => e.LicenceTitle).HasMaxLength(500);

                entity.Property(e => e.LineExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LineIssueDate).HasColumnType("datetime");

                entity.Property(e => e.LinkedIn).HasMaxLength(500);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.LocationPhone).HasMaxLength(50);

                entity.Property(e => e.MaritalStatus).HasMaxLength(1000);

                entity.Property(e => e.MedicalLimitation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NDTIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.NDTNumber).HasMaxLength(200);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Nickname).HasMaxLength(50);

                entity.Property(e => e.PBNRNAVExpireDate).HasColumnType("datetime");

                entity.Property(e => e.PBNRNAVIssueDate).HasColumnType("datetime");

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Post).HasMaxLength(1000);

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ProficiencyCheckDate).HasColumnType("datetime");

                entity.Property(e => e.ProficiencyCheckDateOPC).HasColumnType("datetime");

                entity.Property(e => e.ProficiencyDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProficiencyDescriptionOPC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProficiencyExpireDate).HasColumnType("datetime");

                entity.Property(e => e.ProficiencyValidUntil).HasColumnType("datetime");

                entity.Property(e => e.ProficiencyValidUntilOPC).HasColumnType("datetime");

                entity.Property(e => e.RaitingCertificates).HasMaxLength(500);

                entity.Property(e => e.RampPassExpireDate).HasColumnType("datetime");

                entity.Property(e => e.RampPassNo).HasMaxLength(500);

                entity.Property(e => e.RecurrentExpireDate).HasColumnType("datetime");

                entity.Property(e => e.RecurrentIssueDate).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.SEPTExpireDate).HasColumnType("datetime");

                entity.Property(e => e.SEPTIssueDate).HasColumnType("datetime");

                entity.Property(e => e.SEPTPExpireDate).HasColumnType("datetime");

                entity.Property(e => e.SEPTPIssueDate).HasColumnType("datetime");

                entity.Property(e => e.SMSExpireDate).HasColumnType("datetime");

                entity.Property(e => e.SMSIssueDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.SimulatorLastCheck).HasColumnType("datetime");

                entity.Property(e => e.SimulatorNextCheck).HasColumnType("datetime");

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.State).HasMaxLength(255);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Telegram).HasMaxLength(255);

                entity.Property(e => e.UpsetRecoveryTrainingExpireDate).HasColumnType("datetime");

                entity.Property(e => e.UpsetRecoveryTrainingIssueDate).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.Username).HasMaxLength(1000);

                entity.Property(e => e.VisaExpireDate).HasColumnType("datetime");

                entity.Property(e => e.WhatsApp).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewEmployeeACType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeACType");

                entity.Property(e => e.AcType).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewEmployeeAb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeAbs");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCategory)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ViewEmployeeAge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeAge");
            });

            modelBuilder.Entity<ViewEmployeeExp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeExp");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");
            });

            modelBuilder.Entity<ViewEmployeeLight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeLight");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.City).HasMaxLength(500);

                entity.Property(e => e.CityFullName).HasMaxLength(1009);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.Country)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateIssueNDT).HasColumnType("date");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUP).HasColumnType("date");

                entity.Property(e => e.DateNextCheckUP).HasColumnType("date");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FatherName).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.LocationPhone).HasMaxLength(50);

                entity.Property(e => e.MaritalStatus).HasMaxLength(1000);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NDTIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.NDTNumber).HasMaxLength(200);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Nickname).HasMaxLength(50);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Post).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.State).HasMaxLength(255);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewEmployeeLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeLocation");

                entity.Property(e => e.DateActiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateActiveEndP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateActiveStart).HasColumnType("datetime");

                entity.Property(e => e.DateActiveStartP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FullCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.OrgRole).HasMaxLength(1000);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Root2Code)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Root2Title)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<ViewEmployeeSimple>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeSimple");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.City).HasMaxLength(500);

                entity.Property(e => e.CityFullName).HasMaxLength(1009);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.Country)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateIssueNDT).HasColumnType("date");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUP).HasColumnType("date");

                entity.Property(e => e.DateNextCheckUP).HasColumnType("date");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FatherName).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MaritalStatus).HasMaxLength(1000);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NDTIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.NDTNumber).HasMaxLength(200);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Nickname).HasMaxLength(50);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.State).HasMaxLength(255);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewEmployeeTraining>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeTraining");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUP).HasColumnType("date");

                entity.Property(e => e.DateNextCheckUP).HasColumnType("date");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FatherName).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupMain).HasMaxLength(500);

                entity.Property(e => e.JobGroupMainCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.LocationPhone).HasMaxLength(50);

                entity.Property(e => e.MaritalStatus).HasMaxLength(1000);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Nickname).HasMaxLength(50);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Post).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewFDP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDP");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FDPEnd).HasColumnType("datetime");

                entity.Property(e => e.FDPEndLocal).HasColumnType("datetime");

                entity.Property(e => e.FDPRemark).HasMaxLength(4000);

                entity.Property(e => e.FDPStart).HasColumnType("datetime");

                entity.Property(e => e.FDPStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.StandByStartLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFDP2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDP2");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FDPEnd).HasColumnType("datetime");

                entity.Property(e => e.FDPEndLocal).HasColumnType("datetime");

                entity.Property(e => e.FDPStart).HasColumnType("datetime");

                entity.Property(e => e.FDPStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.StandByStartLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFDPAB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPABS");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FDPEnd).HasColumnType("datetime");

                entity.Property(e => e.FDPEndLocal).HasColumnType("datetime");

                entity.Property(e => e.FDPRemark).HasMaxLength(4000);

                entity.Property(e => e.FDPStart).HasColumnType("datetime");

                entity.Property(e => e.FDPStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Message)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFDPCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPCrew");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFDPCrewDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPCrewDetail");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DaySTDLocal).HasColumnType("date");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFDPCrewDetailSM>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPCrewDetailSMS");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DaySTDLocal).HasColumnType("date");

                entity.Property(e => e.Delivery)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Ref)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ResDate).HasColumnType("datetime");

                entity.Property(e => e.ResStr)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFDPFTL>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPFTL");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FDPEnd).HasColumnType("datetime");

                entity.Property(e => e.FDPEndLocal).HasColumnType("datetime");

                entity.Property(e => e.FDPStart).HasColumnType("datetime");

                entity.Property(e => e.FDPStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.StandByStartLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFDPFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPFlight");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ViewFDPFlightDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPFlightDetail");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Customer)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FDPEnd).HasColumnType("datetime");

                entity.Property(e => e.FDPEndLocal).HasColumnType("datetime");

                entity.Property(e => e.FDPStart).HasColumnType("datetime");

                entity.Property(e => e.FDPStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.StandByStartLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFDPIdea>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPIdea");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RestUntil).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewFDPItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPItem");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureDay).HasColumnType("date");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.SplitDutyExtension).HasColumnType("numeric(12, 1)");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFDPItem2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPItem2");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureDay).HasColumnType("date");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.SplitDutyExtension).HasColumnType("numeric(12, 1)");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFDPItemAb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPItemAbs");
            });

            modelBuilder.Entity<ViewFDPKey>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPKey");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.FDPReportingTime).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.InitEnd).HasColumnType("datetime");

                entity.Property(e => e.InitFlights)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFromIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitGroup)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRank)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitRestTo).HasColumnType("datetime");

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitStart).HasColumnType("datetime");

                entity.Property(e => e.InitToIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Key)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewFDPLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPLog");

                entity.Property(e => e.Action)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledRoute)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateAction).HasColumnType("datetime");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.InitEnd).HasColumnType("datetime");

                entity.Property(e => e.InitFlights)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFromIATA)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRank)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRestTo).HasColumnType("datetime");

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitStart).HasColumnType("datetime");

                entity.Property(e => e.InitToIATA)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFDPRest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPRest");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.CanceledNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DaySTDLocal).HasColumnType("date");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FDPEnd).HasColumnType("datetime");

                entity.Property(e => e.FDPEndLocal).HasColumnType("datetime");

                entity.Property(e => e.FDPStart).HasColumnType("datetime");

                entity.Property(e => e.FDPStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark2).HasMaxLength(500);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.StandByStartLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFDPShadow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPShadow");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewFDRReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDRReport");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FPTripFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FuelRemaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUsed).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IP).HasMaxLength(1001);

                entity.Property(e => e.IPCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IPSCH)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.MaxWeighUnit)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.P1).HasMaxLength(1001);

                entity.Property(e => e.P1Code)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.P1SCH)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P2).HasMaxLength(1001);

                entity.Property(e => e.P2Code)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.P2SCH)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PFLRTitle)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TakeoffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFLTGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFLTGroup");

                entity.Property(e => e.CDate).HasColumnType("date");

                entity.Property(e => e.End).HasColumnType("datetime");

                entity.Property(e => e.EndLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstFlightNumber).HasMaxLength(50);

                entity.Property(e => e.LastFlightNumber).HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Start).HasColumnType("datetime");

                entity.Property(e => e.StartLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewFMISFLT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFMISFLT");

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ArrStn1).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasColumnType("date");

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.DepStn1).HasMaxLength(255);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.Key)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Landing1).HasColumnType("datetime");

                entity.Property(e => e.OffBlock).HasColumnType("datetime");

                entity.Property(e => e.OffBlock1).HasColumnType("datetime");

                entity.Property(e => e.OnBlock).HasColumnType("datetime");

                entity.Property(e => e.OnBlock1).HasColumnType("datetime");

                entity.Property(e => e.Reg).HasMaxLength(50);

                entity.Property(e => e.Reg1).HasMaxLength(255);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STA1).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STD1).HasColumnType("datetime");

                entity.Property(e => e.Status1).HasMaxLength(255);

                entity.Property(e => e.TakeOff1).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewFNRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFNRoute");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFTL>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFTL");

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<ViewFTLYear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFTLYear");

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<ViewFin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFin");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PYearMonthName).HasMaxLength(511);

                entity.Property(e => e.PYearName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RemainingFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TakeoffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.YearMonthName).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFinMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFinMonthly");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFinMonthlyPersian>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFinMonthlyPersian");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFinMonthlyReg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFinMonthlyReg");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFinMonthlyRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFinMonthlyRoute");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(3);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(3);

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFinMonthlyRouteReg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFinMonthlyRouteReg");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFinYearlyRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFinYearlyRoute");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(3);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(3);

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(38, 4)");
            });

            modelBuilder.Entity<ViewFixtimeRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFixtimeRoute");

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFlighPlanAssignedRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlighPlanAssignedRegister");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromTo)
                    .HasMaxLength(63)
                    .IsUnicode(false);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(255);

                entity.Property(e => e.FlightPlan)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FromAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FromCity).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.ToAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ToCity).HasMaxLength(500);

                entity.Property(e => e.ToCountry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFlightAB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightABS");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.BaseIATA).HasMaxLength(255);

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FromAirportCity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName).HasMaxLength(500);

                entity.Property(e => e.FromCity).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STAPlanned).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.STDPlanned).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName).HasMaxLength(500);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.from).HasMaxLength(255);

                entity.Property(e => e.to).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightChangeHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightChangeHistory");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.NewFlightNumber)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NewFromAirport).HasMaxLength(255);

                entity.Property(e => e.NewLanding).HasColumnType("datetime");

                entity.Property(e => e.NewOffBlock).HasColumnType("datetime");

                entity.Property(e => e.NewOnBlock).HasColumnType("datetime");

                entity.Property(e => e.NewRegister).HasMaxLength(50);

                entity.Property(e => e.NewSTA).HasColumnType("datetime");

                entity.Property(e => e.NewSTD).HasColumnType("datetime");

                entity.Property(e => e.NewStatus).HasMaxLength(50);

                entity.Property(e => e.NewTakeOff).HasColumnType("datetime");

                entity.Property(e => e.NewToAirport).HasMaxLength(255);

                entity.Property(e => e.OldFlightNumer)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OldFromAirport).HasMaxLength(255);

                entity.Property(e => e.OldLanding).HasColumnType("datetime");

                entity.Property(e => e.OldOffBlock).HasColumnType("datetime");

                entity.Property(e => e.OldOnBlock).HasColumnType("datetime");

                entity.Property(e => e.OldRegister).HasMaxLength(50);

                entity.Property(e => e.OldSTA).HasColumnType("datetime");

                entity.Property(e => e.OldSTD).HasColumnType("datetime");

                entity.Property(e => e.OldStatus).HasMaxLength(50);

                entity.Property(e => e.OldTakeOff).HasColumnType("datetime");

                entity.Property(e => e.OldToAirport).HasMaxLength(255);

                entity.Property(e => e.User).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewFlightCockpit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCockpit");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Captain)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CaptainName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Customer)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightType).HasMaxLength(30);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IP)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IPName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.JLLanding).HasColumnType("datetime");

                entity.Property(e => e.JLOffBlock).HasColumnType("datetime");

                entity.Property(e => e.JLOnBlock).HasColumnType("datetime");

                entity.Property(e => e.JLTakeOff).HasColumnType("datetime");

                entity.Property(e => e.PDate).HasMaxLength(4000);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrew");

                entity.Property(e => e.ActualDateOffBlock).HasColumnType("date");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.ImageUrl)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.PID).HasMaxLength(500);

                entity.Property(e => e.PastHoursFromOffBlock).HasColumnType("numeric(17, 6)");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.TotalFlightHoursOffBlock).HasColumnType("numeric(17, 6)");
            });

            modelBuilder.Entity<ViewFlightCrew2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrew2");

                entity.Property(e => e.ATPLDateExpire).HasColumnType("date");

                entity.Property(e => e.ATPLDateIssue).HasColumnType("date");

                entity.Property(e => e.ATPLNumber).HasMaxLength(500);

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CPLDateExpire).HasColumnType("date");

                entity.Property(e => e.CPLDateIssue).HasColumnType("date");

                entity.Property(e => e.CPLNumber).HasMaxLength(500);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelReason).HasMaxLength(1000);

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CurrentLocationAirporIATA).HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUP).HasColumnType("date");

                entity.Property(e => e.DateNextCheckUP).HasColumnType("date");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeAbr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportCity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName).HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MCCDateExpire).HasColumnType("date");

                entity.Property(e => e.MCCDateIssue).HasColumnType("date");

                entity.Property(e => e.MCCNumber).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PPLDateExpire).HasColumnType("date");

                entity.Property(e => e.PPLDateIssue).HasColumnType("date");

                entity.Property(e => e.PPLNumber).HasMaxLength(500);

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Register)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STAPlanned).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDPlanned).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportCity).HasMaxLength(500);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewFlightCrewArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrewArchive");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FlightNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewFlightCrewArchived>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrewArchived");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FlightNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFlightCrewNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrewNew");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.FDPTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewFlightCrewNewX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrewNewX");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.PickupLocal).HasColumnType("datetime");

                entity.Property(e => e.Position)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewFlightCrewNewXTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrewNewXTime");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFlightCrewX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrewX");

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksInLocal).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.ChocksOutLocal).HasColumnType("datetime");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.PickupLocal).HasColumnType("datetime");

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayEnd).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightCrewXOff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrewXOff");

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksInLocal).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.ChocksOutLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayEnd).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightDelay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightDelay");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.BaseIATA)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BaseName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.DelayRemark).HasMaxLength(500);

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeAbr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportCity).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName).HasMaxLength(255);

                entity.Property(e => e.ICategory)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.MapTitle).HasMaxLength(500);

                entity.Property(e => e.MapTitle2).HasMaxLength(500);

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PYearMonth).HasMaxLength(356);

                entity.Property(e => e.PYearName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ToAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName).HasMaxLength(255);

                entity.Property(e => e.YearName).HasMaxLength(255);

                entity.Property(e => e.duration).HasColumnType("numeric(19, 6)");
            });

            modelBuilder.Entity<ViewFlightDelay2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightDelay2");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.BaseIATA)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BaseName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.DelayRemark).HasMaxLength(500);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeAbr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportCity).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName).HasMaxLength(255);

                entity.Property(e => e.ICategory)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.MonthFrom).HasColumnType("datetime");

                entity.Property(e => e.MonthFromPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.MonthTo).HasColumnType("datetime");

                entity.Property(e => e.MonthToPersian).HasMaxLength(4000);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PYearName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ToAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName).HasMaxLength(255);

                entity.Property(e => e.WeekFrom).HasColumnType("datetime");

                entity.Property(e => e.WeekFromPersian).HasMaxLength(4000);

                entity.Property(e => e.WeekTo).HasColumnType("datetime");

                entity.Property(e => e.WeekToPersian).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(255);

                entity.Property(e => e.duration).HasColumnType("numeric(19, 6)");
            });

            modelBuilder.Entity<ViewFlightDelayCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightDelayCode");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightFDP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightFDP");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FDPRemark).HasMaxLength(4000);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightFuel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightFuel");

                entity.Property(e => e.AVGFuelBurned).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.AVGFuelBurnedReg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.AvgVar).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.AvgVarReg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Captain)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CaptainName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DurationActualStr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DurationScheduledStr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FPVar).HasColumnType("decimal(38, 15)");

                entity.Property(e => e.FlightActualStr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightTimeFPStr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Remaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RouteIATA).HasMaxLength(511);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.Taxi).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.UpLift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewFlightGroupItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightGroupItem");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewFlightInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightInformation");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.AircraftType2)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.BaseIATA).HasMaxLength(255);

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPRegister)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelReason).HasMaxLength(1000);

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusBgColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusClass).HasMaxLength(255);

                entity.Property(e => e.FlightStatusColor).HasMaxLength(255);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeAbr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportCity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.GWLand).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.GWTO).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.JLLanding).HasColumnType("datetime");

                entity.Property(e => e.JLOffBlock).HasColumnType("datetime");

                entity.Property(e => e.JLOnBlock).HasColumnType("datetime");

                entity.Property(e => e.JLTakeOff).HasColumnType("datetime");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LinkedFlightNumber).HasMaxLength(50);

                entity.Property(e => e.LinkedReasonTitle).HasMaxLength(1000);

                entity.Property(e => e.LinkedRemark).HasMaxLength(500);

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampReason).HasMaxLength(1000);

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectReason).HasMaxLength(1000);

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STAPlanned).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.STDPlanned).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName).HasMaxLength(500);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.duration).HasColumnType("numeric(19, 6)");

                entity.Property(e => e.from).HasMaxLength(255);

                entity.Property(e => e.notes)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.startDate).HasColumnType("datetime");

                entity.Property(e => e.taskName).HasMaxLength(904);

                entity.Property(e => e.to).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightMatchingList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightMatchingList");

                entity.Property(e => e.FirstCrew)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.SecondCrew)
                    .IsRequired()
                    .HasMaxLength(1001);
            });

            modelBuilder.Entity<ViewFlightPlan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlan");

                entity.Property(e => e.BaseIATA).HasMaxLength(255);

                entity.Property(e => e.Customer).IsRequired();

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateApproved100).HasColumnType("datetime");

                entity.Property(e => e.DateApproved50).HasColumnType("datetime");

                entity.Property(e => e.DateApproved60).HasColumnType("datetime");

                entity.Property(e => e.DateApproved70).HasColumnType("datetime");

                entity.Property(e => e.DateApproved80).HasColumnType("datetime");

                entity.Property(e => e.DateApproved90).HasColumnType("datetime");

                entity.Property(e => e.DateFirst).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateLast).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.IntervalType)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterAssignProgress).HasColumnType("numeric(28, 12)");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.VirtualRegister).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFlightPlanCalander>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanCalander");

                entity.Property(e => e.BaseIATA).HasMaxLength(255);

                entity.Property(e => e.Customer).IsRequired();

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateApplied).HasColumnType("datetime");

                entity.Property(e => e.DateApproved100).HasColumnType("datetime");

                entity.Property(e => e.DateApproved50).HasColumnType("datetime");

                entity.Property(e => e.DateApproved60).HasColumnType("datetime");

                entity.Property(e => e.DateApproved70).HasColumnType("datetime");

                entity.Property(e => e.DateApproved80).HasColumnType("datetime");

                entity.Property(e => e.DateApproved90).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.IntervalType)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterAssignProgress).HasColumnType("numeric(28, 12)");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.VirtualRegister).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFlightPlanCalanderCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanCalanderCrew");

                entity.Property(e => e.ATPLDateExpire).HasColumnType("date");

                entity.Property(e => e.ATPLDateIssue).HasColumnType("date");

                entity.Property(e => e.ATPLNumber).HasMaxLength(500);

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AvStatus)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPLDateExpire).HasColumnType("date");

                entity.Property(e => e.CPLDateIssue).HasColumnType("date");

                entity.Property(e => e.CPLNumber).HasMaxLength(500);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CurrentLocationAirporIATA).HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUP).HasColumnType("date");

                entity.Property(e => e.DateNextCheckUP).HasColumnType("date");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Flights)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.JobGroup)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MCCDateExpire).HasColumnType("date");

                entity.Property(e => e.MCCDateIssue).HasColumnType("date");

                entity.Property(e => e.MCCNumber).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PPLDateExpire).HasColumnType("date");

                entity.Property(e => e.PPLDateIssue).HasColumnType("date");

                entity.Property(e => e.PPLNumber).HasMaxLength(500);

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewFlightPlanCalendarRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanCalendarRegister");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewFlightPlanCalendarRegisterAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanCalendarRegisterAll");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewFlightPlanItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanItem");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.BaseIATA).HasMaxLength(255);

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(255);

                entity.Property(e => e.FlightPlan)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightStatus).HasMaxLength(50);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FromAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FromCity).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IntervalType)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.ToAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ToCity).HasMaxLength(500);

                entity.Property(e => e.ToCountry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Unknown).HasMaxLength(255);

                entity.Property(e => e.duration).HasColumnType("numeric(20, 6)");

                entity.Property(e => e.from).HasMaxLength(255);

                entity.Property(e => e.notes)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.startDate).HasColumnType("datetime");

                entity.Property(e => e.taskName).HasMaxLength(767);

                entity.Property(e => e.to).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightPlanItemCalander>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanItemCalander");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.BaseIATA).HasMaxLength(255);

                entity.Property(e => e.Customer).IsRequired();

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateApplied).HasColumnType("datetime");

                entity.Property(e => e.DateApproved100).HasColumnType("datetime");

                entity.Property(e => e.DateApproved50).HasColumnType("datetime");

                entity.Property(e => e.DateApproved60).HasColumnType("datetime");

                entity.Property(e => e.DateApproved70).HasColumnType("datetime");

                entity.Property(e => e.DateApproved80).HasColumnType("datetime");

                entity.Property(e => e.DateApproved90).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(255);

                entity.Property(e => e.FlightPlan)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightStatus).HasMaxLength(50);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FromAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FromCity).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IntervalType)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Register).HasMaxLength(306);

                entity.Property(e => e.RegisterAssignProgress).HasColumnType("numeric(28, 12)");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ToAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ToCity).HasMaxLength(500);

                entity.Property(e => e.ToCountry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Unknown).HasMaxLength(255);

                entity.Property(e => e.VirtualRegister).HasMaxLength(50);

                entity.Property(e => e.XA).HasColumnType("datetime");

                entity.Property(e => e.duration).HasColumnType("numeric(20, 6)");

                entity.Property(e => e.from).HasMaxLength(255);

                entity.Property(e => e.notes)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.startDate).HasColumnType("datetime");

                entity.Property(e => e.taskName).HasMaxLength(767);

                entity.Property(e => e.to).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightPlanItemPermit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanItemPermit");

                entity.Property(e => e.BaseIATA).HasMaxLength(255);

                entity.Property(e => e.Customer).IsRequired();

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateApplied).HasColumnType("datetime");

                entity.Property(e => e.DateApproved100).HasColumnType("datetime");

                entity.Property(e => e.DateApproved50).HasColumnType("datetime");

                entity.Property(e => e.DateApproved60).HasColumnType("datetime");

                entity.Property(e => e.DateApproved70).HasColumnType("datetime");

                entity.Property(e => e.DateApproved80).HasColumnType("datetime");

                entity.Property(e => e.DateFlight).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(255);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.IntervalType)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.PermitRemark).HasMaxLength(1000);

                entity.Property(e => e.Register).HasMaxLength(306);

                entity.Property(e => e.RegisterAssignProgress).HasColumnType("numeric(28, 12)");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.VirtualRegister).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFlightPlanRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanRegister");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateApproved).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.PlannedRegister)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewFlightPlanRegisterAssigned>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanRegisterAssigned");

                entity.Property(e => e.id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ViewFlightRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightRoute");

                entity.Property(e => e.Equipment)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromAirportLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FromCity)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FromCountry)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromSortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(513);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToAirportLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ToCity)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ToCountry)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToSortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFlightSecurity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightSecurity");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.CACheck1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CACheck2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CACheck3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CACheck4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CAOBS1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CAOBS2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CAOBS3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CAOBS4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPT)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPT2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Customer)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FA1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FA2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FA3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FA4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FO)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FO2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.IP)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OBSP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OBSP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Purser)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Purser2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Purser3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.Safety)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightSecurityDH>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightSecurityDH");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.CACheck1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CACheck2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CACheck3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CACheck4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CAOBS1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CAOBS2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CAOBS3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CAOBS4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPT)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPT2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Customer)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FA1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FA2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FA3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FA4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FO)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FO2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.IP)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OBSP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OBSP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Purser)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Purser2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Purser3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.Safety)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightsAcType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightsAcType");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightsFrom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightsFrom");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightsGantt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightsGantt");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.BaseIATA)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.BaseName)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPRegister)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelReason).HasMaxLength(1000);

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.ChrCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ChrTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FlightStatusBgColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusClass).HasMaxLength(255);

                entity.Property(e => e.FlightStatusColor).HasMaxLength(255);

                entity.Property(e => e.FlightType)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeAbr)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromContry)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromSortName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.GWLand).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.GWTO).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LinkedFlightNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LinkedReasonTitle)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LinkedRemark)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OAircraftType).HasMaxLength(255);

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampReason).HasMaxLength(1000);

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectReason).HasMaxLength(1000);

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.Register).HasMaxLength(53);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STAPlanned).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.STDPlanned).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.duration).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.from)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.notes)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.startDate).HasColumnType("datetime");

                entity.Property(e => e.taskName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.to)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFlightsGantt2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightsGantt2");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.BaseIATA).HasMaxLength(255);

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPRegister)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelReason).HasMaxLength(1000);

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusBgColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusClass).HasMaxLength(255);

                entity.Property(e => e.FlightStatusColor).HasMaxLength(255);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeAbr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportCity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.GWLand).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.GWTO).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LinkedFlightNumber).HasMaxLength(50);

                entity.Property(e => e.LinkedReasonTitle).HasMaxLength(1000);

                entity.Property(e => e.LinkedRemark).HasMaxLength(500);

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.OAircraftType).HasMaxLength(255);

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampReason).HasMaxLength(1000);

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectReason).HasMaxLength(1000);

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.Register).HasMaxLength(53);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STAPlanned).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.STDPlanned).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName).HasMaxLength(500);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.duration).HasColumnType("numeric(19, 6)");

                entity.Property(e => e.from).HasMaxLength(255);

                entity.Property(e => e.notes)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.startDate).HasColumnType("datetime");

                entity.Property(e => e.taskName).HasMaxLength(904);

                entity.Property(e => e.to).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightsRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightsRegister");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFlightsTo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightsTo");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFolderApplicable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFolderApplicable");

                entity.Property(e => e.FullCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFormA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFormA");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.FlightHour).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FreightTone).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.PDate).HasMaxLength(4000);

                entity.Property(e => e.PDayName).HasMaxLength(4000);

                entity.Property(e => e.PMonthName).HasMaxLength(4000);

                entity.Property(e => e.PYearMonthName).HasMaxLength(4000);

                entity.Property(e => e.PYearName).HasMaxLength(4000);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.YearMonthName).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFormAMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFormAMonthly");

                entity.Property(e => e.FlightHour).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FlightHourInt).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FreightTone).HasColumnType("decimal(38, 0)");

                entity.Property(e => e.FreightToneInt).HasColumnType("decimal(38, 0)");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFormAMonthlyDom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFormAMonthlyDom");

                entity.Property(e => e.FlightHour).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.FreightTone).HasColumnType("decimal(38, 0)");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFormAMonthlyInt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFormAMonthlyInt");

                entity.Property(e => e.FlightHour).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FreightTone).HasColumnType("decimal(38, 0)");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFormAYearly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFormAYearly");

                entity.Property(e => e.FlightHour).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FlightHourInt).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FreightTone).HasColumnType("decimal(38, 0)");

                entity.Property(e => e.FreightToneInt).HasColumnType("decimal(38, 0)");
            });

            modelBuilder.Entity<ViewFormAYearlyDom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFormAYearlyDom");

                entity.Property(e => e.FlightHour).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FreightTone).HasColumnType("decimal(38, 0)");
            });

            modelBuilder.Entity<ViewFormAYearlyInt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFormAYearlyInt");

                entity.Property(e => e.FlightHour).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FreightTone).HasColumnType("decimal(38, 0)");
            });

            modelBuilder.Entity<ViewIPAccess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIPAccess");

                entity.Property(e => e.IP)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewIdeaLast>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIdeaLast");

                entity.Property(e => e.CourseCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CourseTitle)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.MappedTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewIdeaRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIdeaRank");

                entity.Property(e => e.CourseCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CourseTitle).HasMaxLength(255);

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.MappedTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewIdeaSessionItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIdeaSessionItem");

                entity.Property(e => e.ClassID)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromUtc).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToUtc).HasColumnType("datetime");

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NID)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RemarkSession)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewIdeaSessionItemX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIdeaSessionItemX");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromUtc).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToUtc).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.NID)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewIdeaSessionUpdateError>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIdeaSessionUpdateError");

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.Flights)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SessionDateFrom).HasColumnType("datetime");

                entity.Property(e => e.SessionDateTo).HasColumnType("datetime");

                entity.Property(e => e.VisitDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewIdeaUnique>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIdeaUnique");

                entity.Property(e => e.ClassID)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CourseType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CrewNID).HasMaxLength(500);

                entity.Property(e => e.CrewPID).HasMaxLength(500);

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewIdeaUniqueLast>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIdeaUniqueLast");

                entity.Property(e => e.ClassID)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CourseType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CrewNID).HasMaxLength(500);

                entity.Property(e => e.CrewPID).HasMaxLength(500);

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewImportPlan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewImportPlan");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Base)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Duration).HasMaxLength(255);

                entity.Property(e => e.From)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Line).HasMaxLength(255);

                entity.Property(e => e.No)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Reg)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STAUtc).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDUtc).HasColumnType("datetime");

                entity.Property(e => e.To)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewJLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewJLog");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalDispatch).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureDispatch).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JLLanding).HasColumnType("datetime");

                entity.Property(e => e.JLOffBlock).HasColumnType("datetime");

                entity.Property(e => e.JLOnBlock).HasColumnType("datetime");

                entity.Property(e => e.JLTakeOff).HasColumnType("datetime");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STAPlanned).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.STDPlanned).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.duration).HasColumnType("numeric(19, 6)");

                entity.Property(e => e.from).HasMaxLength(255);

                entity.Property(e => e.notes)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.startDate).HasColumnType("datetime");

                entity.Property(e => e.taskName).HasMaxLength(904);

                entity.Property(e => e.to).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewJobGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewJobGroup");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Parent).HasMaxLength(500);

                entity.Property(e => e.ParentCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.RootCode)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RootTitle).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.TitleFormated).HasMaxLength(4000);

                entity.Property(e => e.TitleFormatedSpace).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewJobGroupMain>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewJobGroupMain");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ViewJobGroupType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewJobGroupType");

                entity.Property(e => e.FullCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewJournal");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewLayOver>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLayOver");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewLayOverNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLayOverNew");

                entity.Property(e => e.DestinationIATA).HasMaxLength(255);

                entity.Property(e => e.DestinationIATALag).HasMaxLength(255);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STADayLag).HasColumnType("date");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewLegCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLegCrew");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STAPlanned).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.STDPlanned).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewLegFdpItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLegFdpItem");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLegFuel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLegFuel");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.JLLanding).HasColumnType("datetime");

                entity.Property(e => e.JLOffBlock).HasColumnType("datetime");

                entity.Property(e => e.JLOnBlock).HasColumnType("datetime");

                entity.Property(e => e.JLTakeOff).HasColumnType("datetime");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(17, 6)");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STAPlanned).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.STDPlanned).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(17, 6)");

                entity.Property(e => e.duration).HasColumnType("numeric(19, 6)");

                entity.Property(e => e.from).HasMaxLength(255);

                entity.Property(e => e.notes)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.startDate).HasColumnType("datetime");

                entity.Property(e => e.taskName).HasMaxLength(904);

                entity.Property(e => e.to).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewLegTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLegTime");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.ChrCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ChrTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FPTripFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportICAO).HasMaxLength(255);

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JLLanding).HasColumnType("datetime");

                entity.Property(e => e.JLOffBlock).HasColumnType("datetime");

                entity.Property(e => e.JLOnBlock).HasColumnType("datetime");

                entity.Property(e => e.JLTakeOff).HasColumnType("datetime");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.MaxWeighUnit)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STAPlanned).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.STDPlanned).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportICAO).HasMaxLength(255);

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.duration).HasColumnType("numeric(19, 6)");

                entity.Property(e => e.from).HasMaxLength(255);

                entity.Property(e => e.notes)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.startDate).HasColumnType("datetime");

                entity.Property(e => e.taskName).HasMaxLength(904);

                entity.Property(e => e.to).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewLegTime2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLegTime2");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JLLanding).HasColumnType("datetime");

                entity.Property(e => e.JLOffBlock).HasColumnType("datetime");

                entity.Property(e => e.JLOnBlock).HasColumnType("datetime");

                entity.Property(e => e.JLTakeOff).HasColumnType("datetime");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.MSN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.notes)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.startDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLibraryFolder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLibraryFolder");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fullcode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TitleFormated)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.TitleFormatedSpace)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewLoadsheet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLoadsheet");

                entity.Property(e => e.CARGO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DLI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DOI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FPTripFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LILNW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LITOW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LIZFW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LNW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MACLNW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MACTOW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MACZFW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PantryCode).HasMaxLength(1);

                entity.Property(e => e.StabTrimFifteen).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.StabTrimFive).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOW).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ZFW).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLocation");

                entity.Property(e => e.Address)
                    .HasMaxLength(2000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.City).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Country)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Parent)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.ParentCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(200)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Root)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.RootCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.SortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State).HasMaxLength(255);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TitleFormated)
                    .HasMaxLength(4000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Type).HasMaxLength(1000);

                entity.Property(e => e.Website)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<ViewMSN>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMSN");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.AirlineOperators)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Last_WB).HasColumnType("smalldatetime");

                entity.Property(e => e.ManDate).HasColumnType("date");

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.Model).HasMaxLength(255);

                entity.Property(e => e.Previous_Register).HasMaxLength(50);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewMandatoryCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMandatoryCourse");

                entity.Property(e => e.JobGroup)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupCode2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupMain).HasMaxLength(500);

                entity.Property(e => e.JobGroupMainCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewMandatoryCourseAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMandatoryCourseAll");

                entity.Property(e => e.JobGroup)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupCode2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupMain).HasMaxLength(500);

                entity.Property(e => e.JobGroupMainCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewMandatoryCourseEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMandatoryCourseEmployee");

                entity.Property(e => e.BaseAirport).HasMaxLength(255);

                entity.Property(e => e.CalendarType).HasMaxLength(1000);

                entity.Property(e => e.CertificateNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CoursePeopleStatus)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle).HasMaxLength(500);

                entity.Property(e => e.CourseType).HasMaxLength(500);

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.DateIssue).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.DurationUnit).HasMaxLength(1000);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Instructor).HasMaxLength(1001);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupMain).HasMaxLength(500);

                entity.Property(e => e.JobGroupMainCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Status)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.StatusRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewManufacturer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewManufacturer");

                entity.Property(e => e.Address).HasMaxLength(1000);

                entity.Property(e => e.ContactPerson).HasMaxLength(1000);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.Fax)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LogoUrl)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Tel)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewMatchingList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMatchingList");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.FirstCrew)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.FirstJobGroup).HasMaxLength(500);

                entity.Property(e => e.SecondCrew)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.SecondJobGroup).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMonth");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewNotification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewNotification");

                entity.Property(e => e.AppIssue).HasMaxLength(500);

                entity.Property(e => e.DateAppSent).HasColumnType("datetime");

                entity.Property(e => e.DateAppVisited).HasColumnType("datetime");

                entity.Property(e => e.DateEmailSent).HasColumnType("datetime");

                entity.Property(e => e.DateSMSSent).HasColumnType("datetime");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.EmailIssue).HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SMSIssue).HasMaxLength(500);

                entity.Property(e => e.Sender).HasMaxLength(1001);

                entity.Property(e => e.Subject).HasMaxLength(500);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.UserEmail).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewNotificationGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewNotificationGroup");

                entity.Property(e => e.GroupTitle)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewOccurrenceCAO>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewOccurrenceCAO");

                entity.Property(e => e.A_CFlightPhase)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnName("A/CFlightPhase");

                entity.Property(e => e.Damage)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.OccurrenceType)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewOffItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewOffItem");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Remark)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewOption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewOption");

                entity.Property(e => e.Parent).HasMaxLength(1000);

                entity.Property(e => e.Prop1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewOrganization>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewOrganization");

                entity.Property(e => e.Address).HasMaxLength(1000);

                entity.Property(e => e.ContactPerson).HasMaxLength(1000);

                entity.Property(e => e.Country)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.Fax)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LogoUrl)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.SortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tel)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewPersonActiveCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonActiveCourse");

                entity.Property(e => e.CC_Title).HasMaxLength(500);

                entity.Property(e => e.CT_Remark).HasMaxLength(2000);

                entity.Property(e => e.CT_Title).HasMaxLength(500);

                entity.Property(e => e.CalendarType).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeRemark).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeTitle).HasMaxLength(300);

                entity.Property(e => e.CerNumber).HasMaxLength(500);

                entity.Property(e => e.CourseRemark).HasMaxLength(2000);

                entity.Property(e => e.CourseStatus)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Currency).HasMaxLength(1000);

                entity.Property(e => e.DateDeadlineRegistration).HasColumnType("date");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndPractical).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateStartPractical).HasColumnType("date");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.Duration2).HasMaxLength(1031);

                entity.Property(e => e.DurationPracticalUnit).HasMaxLength(1000);

                entity.Property(e => e.DurationUnit).HasMaxLength(1000);

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.Instructor).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Status).HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewPersonAircraftType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonAircraftType");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DateLimitBegin).HasColumnType("datetime");

                entity.Property(e => e.DateLimitEnd).HasColumnType("datetime");

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewPersonCaoLicense>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonCaoLicense");

                entity.Property(e => e.DateLicense).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Result)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewPersonDocument>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonDocument");

                entity.Property(e => e.DocumentType).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewPersonDocumentFile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonDocumentFile");

                entity.Property(e => e.FileType).HasMaxLength(500);

                entity.Property(e => e.FileUrl).HasMaxLength(1000);

                entity.Property(e => e.SysUrl).HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewPersonDocumentFileX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonDocumentFileX");

                entity.Property(e => e.DocumentType).HasMaxLength(1000);

                entity.Property(e => e.FileType).HasMaxLength(500);

                entity.Property(e => e.FileUrl).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.SysUrl).HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewPersonDocumentX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonDocumentX");

                entity.Property(e => e.DocumentType).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewPersonEducation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonEducation");

                entity.Property(e => e.College).HasMaxLength(500);

                entity.Property(e => e.DateCatch).HasColumnType("date");

                entity.Property(e => e.EducationDegree).HasMaxLength(1000);

                entity.Property(e => e.FileTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.StudyField).HasMaxLength(1000);

                entity.Property(e => e.SysUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(60);
            });

            modelBuilder.Entity<ViewPersonExperiense>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonExperiense");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.Employer).HasMaxLength(500);

                entity.Property(e => e.JobTitle).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewPersonMisc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonMisc");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.ImageUrl).HasMaxLength(500);

                entity.Property(e => e.Instagram).HasMaxLength(500);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LinkedIn).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(511);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Tel).HasMaxLength(500);

                entity.Property(e => e.Telegram).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewPersonRating>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonRating");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.RatingOrganization).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewPlanFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPlanFlight");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.AssignedRegister).HasMaxLength(50);

                entity.Property(e => e.BaseIATA).HasMaxLength(255);

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelReason).HasMaxLength(1000);

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusBgColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusClass).HasMaxLength(255);

                entity.Property(e => e.FlightStatusColor).HasMaxLength(255);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeAbr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportCity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName).HasMaxLength(500);

                entity.Property(e => e.FromCity).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FuelActual).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.GWLand).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.GWTO).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LinkedFlightNumber).HasMaxLength(50);

                entity.Property(e => e.LinkedReasonTitle).HasMaxLength(1000);

                entity.Property(e => e.LinkedRemark).HasMaxLength(500);

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PlanRegister).HasMaxLength(50);

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampReason).HasMaxLength(1000);

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectReason).HasMaxLength(1000);

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STAPlanned).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDPlanned).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportCity).HasMaxLength(500);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName).HasMaxLength(500);

                entity.Property(e => e.ToCity).HasMaxLength(500);

                entity.Property(e => e.ToCountry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.duration).HasColumnType("numeric(19, 6)");

                entity.Property(e => e.from).HasMaxLength(255);

                entity.Property(e => e.notes)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.startDate).HasColumnType("datetime");

                entity.Property(e => e.taskName).HasMaxLength(904);

                entity.Property(e => e.to).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewPlanItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPlanItem");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Arr).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.Day)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Dep).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(500);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Line)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.duration).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.startDate).HasColumnType("datetime");

                entity.Property(e => e.startDateUTC).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPositioning>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPositioning");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewPost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPost");

                entity.Property(e => e.Title).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewRegHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRegHistory");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.Fleet)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.OffBlockLocal).HasColumnType("datetime");

                entity.Property(e => e.OnBlockLocal).HasColumnType("datetime");

                entity.Property(e => e.PDate).HasMaxLength(4000);

                entity.Property(e => e.PDayName).HasMaxLength(4000);

                entity.Property(e => e.PMonthName).HasMaxLength(4000);

                entity.Property(e => e.PYearMonthName).HasMaxLength(4000);

                entity.Property(e => e.PYearName).HasMaxLength(4000);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RemainingFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TakeoffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.YearMonthName).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewRegHistory2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRegHistory2");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Fleet)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.OffBlockLocal).HasColumnType("datetime");

                entity.Property(e => e.OnBlockLocal).HasColumnType("datetime");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PYearMonthName).HasMaxLength(511);

                entity.Property(e => e.PYearName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RemainingFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TakeoffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewRegHistoryMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRegHistoryMonthly");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.BtLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.Fleet)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.FtLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.YearMonth).HasMaxLength(511);

                entity.Property(e => e.YearName).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewRegHistoryYearly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRegHistoryYearly");

                entity.Property(e => e.BtLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.FtLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.YearMonth).HasMaxLength(511);

                entity.Property(e => e.YearName).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewRegisterGround>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRegisterGround");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.AirlineOperators)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.GroundType)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.Model).HasMaxLength(255);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.duration).HasColumnType("numeric(18, 6)");
            });

            modelBuilder.Entity<ViewRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRole");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewRoleClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRoleClaim");

                entity.Property(e => e.Claim)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimValue)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewRosterCrewCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRosterCrewCount");

                entity.Property(e => e.DateLocal).HasColumnType("date");

                entity.Property(e => e.FltNo)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewRosterReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRosterReport");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CCM2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CCM3).IsRequired();

                entity.Property(e => e.DateLocal).HasColumnType("date");

                entity.Property(e => e.FltNo)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewRosterReportFP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRosterReportFP");

                entity.Property(e => e.Day).HasMaxLength(30);

                entity.Property(e => e.Destination).HasMaxLength(255);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.Origin).HasMaxLength(255);

                entity.Property(e => e.PDATE).HasMaxLength(4000);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.STA)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.STALOC)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.STD)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLOC)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewRosterSheet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRosterSheet");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.CCM1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CCM2Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CCM3Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CCM4Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CCM5Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CHECK1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CHECK2Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Color1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Color2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Duration)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FSTA)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FSTALocal)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FSTD)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FSTDLocal)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.IP1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IP2Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ISCCM1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OBS1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OBS2Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P11Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P12Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P13Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P14Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P15Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P21Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P22Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P23Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P24Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P25Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.SCCM1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SCCM2Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SCCM3Name)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SCCM4Name)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SCCM5Name)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.Safety1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Safety2Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewRotserDailyCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRotserDailyCrew");

                entity.Property(e => e.DepartureLocal).HasColumnType("date");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRoute");

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewRouteFromAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRouteFromAirport");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ICAO).HasMaxLength(255);

                entity.Property(e => e.Latitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewRouteToAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRouteToAirport");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IATA)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ICAO).HasMaxLength(255);

                entity.Property(e => e.Latitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewSMSHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewSMSHistory");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.Delivery)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.RecMobile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RecName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Ref)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ResDate).HasColumnType("datetime");

                entity.Property(e => e.ResFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ResStr)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sender)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Text)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewStudyField>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewStudyField");

                entity.Property(e => e.Title).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewTableDutyFDP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTableDutyFDP");

                entity.Property(e => e.CDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewTeacher>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTeacher");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.RemarkTeacher)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasMaxLength(128);
            });

            modelBuilder.Entity<ViewTeacherCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTeacherCourse");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.CalendarType).HasMaxLength(1000);

                entity.Property(e => e.CertificateType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CourseType).HasMaxLength(500);

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.DurationUnit).HasMaxLength(1000);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IDNo).HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroups).HasMaxLength(4000);

                entity.Property(e => e.JobGroupsCode)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.RemarkTeacher)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Sessions)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);

                entity.Property(e => e.UserId).HasMaxLength(128);
            });

            modelBuilder.Entity<ViewTeacherDocument>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTeacherDocument");

                entity.Property(e => e.FileUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewTimeTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTimeTable");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Captain)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CaptainName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ChrCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ChrTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Customer)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightType).HasMaxLength(30);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IP)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IPName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.JLLanding).HasColumnType("datetime");

                entity.Property(e => e.JLOffBlock).HasColumnType("datetime");

                entity.Property(e => e.JLOnBlock).HasColumnType("datetime");

                entity.Property(e => e.JLTakeOff).HasColumnType("datetime");

                entity.Property(e => e.PDate).HasMaxLength(4000);

                entity.Property(e => e.PDateLocal).HasMaxLength(4000);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDDayLocal).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewTrainingDuty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTrainingDuty");

                entity.Property(e => e.ClassId)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateLocal).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.Month).HasMaxLength(4000);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PYearName).HasMaxLength(255);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewTrainingSMSHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTrainingSMSHistory");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.Property(e => e.DutyDate).HasColumnType("datetime");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.PickupLocal).HasColumnType("datetime");

                entity.Property(e => e.RefId)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName).HasMaxLength(500);

                entity.Property(e => e.Sender)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TypeStr)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewUser");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewUserActivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewUserActivity");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.NID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PID)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Url).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewUserRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewUserRole");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.RoleId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<ViewUserRoleClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewUserRoleClaim");

                entity.Property(e => e.Claim)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimValue)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.roleId)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<ViewWeek>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewWeek");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");
            });

            modelBuilder.Entity<VirtualMSN>(entity =>
            {
                entity.ToTable("VirtualMSN");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Register).HasMaxLength(500);
            });

            modelBuilder.Entity<WeatherForecastIcingCondition>(entity =>
            {
                entity.ToTable("WeatherForecastIcingCondition");

                entity.Property(e => e.icing_intensity)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.forecast)
                    .WithMany(p => p.WeatherForecastIcingConditions)
                    .HasForeignKey(d => d.forecast_id)
                    .HasConstraintName("fk_ic_fo");
            });

            modelBuilder.Entity<WeatherForecastSkyCondition>(entity =>
            {
                entity.ToTable("WeatherForecastSkyCondition");

                entity.Property(e => e.cloud_type)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.sky_cover)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.forecast)
                    .WithMany(p => p.WeatherForecastSkyConditions)
                    .HasForeignKey(d => d.forecast_id)
                    .HasConstraintName("fk_sk_fo");
            });

            modelBuilder.Entity<WeatherForecastTemperature>(entity =>
            {
                entity.ToTable("WeatherForecastTemperature");

                entity.Property(e => e.max_temp_c)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.min_temp_c)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.valid_time).HasColumnType("datetime");

                entity.HasOne(d => d.forecast)
                    .WithMany(p => p.WeatherForecastTemperatures)
                    .HasForeignKey(d => d.forecast_id)
                    .HasConstraintName("fk_te_fo");
            });

            modelBuilder.Entity<WeatherForecastTurbulence>(entity =>
            {
                entity.ToTable("WeatherForecastTurbulence");

                entity.Property(e => e.turbulence_intensity)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.forecast)
                    .WithMany(p => p.WeatherForecastTurbulences)
                    .HasForeignKey(d => d.forecast_id)
                    .HasConstraintName("fk_tu_fo");
            });

            modelBuilder.Entity<WeatherMetar>(entity =>
            {
                entity.ToTable("WeatherMetar");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDay).HasColumnType("datetime");

                entity.Property(e => e.RawText)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.StationId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.flight_category)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.metar_type)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("Albanian_100_BIN");

                entity.Property(e => e.observation_time).HasColumnType("datetime");
            });

            modelBuilder.Entity<WeatherMetarQualityControl>(entity =>
            {
                entity.ToTable("WeatherMetarQualityControl");

                entity.Property(e => e.auto)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.auto_station)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.corrected)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.freezing_rain_sensor_off)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.lightning_sensor_off)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.maintenance_indicator_on)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.no_signal)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.present_weather_sensor_off)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Metar)
                    .WithMany(p => p.WeatherMetarQualityControls)
                    .HasForeignKey(d => d.MetarId)
                    .HasConstraintName("fk_fl_me");
            });

            modelBuilder.Entity<WeatherMetarSkyCondition>(entity =>
            {
                entity.ToTable("WeatherMetarSkyCondition");

                entity.Property(e => e.sky_cover)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Metar)
                    .WithMany(p => p.WeatherMetarSkyConditions)
                    .HasForeignKey(d => d.MetarId)
                    .HasConstraintName("fk_sk_met");
            });

            modelBuilder.Entity<WeatherSIGWX>(entity =>
            {
                entity.ToTable("WeatherSIGWX");

                entity.Property(e => e.CurrentUrl)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDay).HasColumnType("date");

                entity.Property(e => e.Issued)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PastUrl)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Product)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Updated)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WeatherSIGWXIrimo>(entity =>
            {
                entity.ToTable("WeatherSIGWXIrimo");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDay).HasColumnType("date");

                entity.Property(e => e.Level)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Valid)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WeatherTaf>(entity =>
            {
                entity.ToTable("WeatherTaf");

                entity.Property(e => e.BulletinTime).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDay).HasColumnType("datetime");

                entity.Property(e => e.EvaluationM).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.IssueTime).HasColumnType("datetime");

                entity.Property(e => e.Latitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.RawText)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks).HasMaxLength(2000);

                entity.Property(e => e.StationId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValidTimeFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTimeTo).HasColumnType("datetime");
            });

            modelBuilder.Entity<WeatherTafForecast>(entity =>
            {
                entity.ToTable("WeatherTafForecast");

                entity.Property(e => e.change_indicator)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.fcst_time_from).HasColumnType("datetime");

                entity.Property(e => e.fcst_time_to).HasColumnType("datetime");

                entity.Property(e => e.not_decoded)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.time_becoming).HasColumnType("datetime");

                entity.Property(e => e.wx_string)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.weather)
                    .WithMany(p => p.WeatherTafForecasts)
                    .HasForeignKey(d => d.weather_id)
                    .HasConstraintName("fk_fo_we");
            });

            modelBuilder.Entity<XCrewAssigned>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XCrewAssigned");

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasColumnType("date");

                entity.Property(e => e.FlightNumber).HasMaxLength(4000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.Route).HasMaxLength(4000);
            });

            modelBuilder.Entity<XCrewAssignedRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XCrewAssignedRpt");

                entity.Property(e => e.CODE).HasMaxLength(255);

                entity.Property(e => e.DATE).HasColumnType("date");

                entity.Property(e => e.FN).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.PDATE).HasMaxLength(255);

                entity.Property(e => e.SCH).HasMaxLength(255);
            });

            modelBuilder.Entity<XDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XDaily");

                entity.Property(e => e.ADL).HasMaxLength(255);

                entity.Property(e => e.Bag).HasMaxLength(255);

                entity.Property(e => e.CHD).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasColumnType("date");

                entity.Property(e => e.INF).HasMaxLength(255);

                entity.Property(e => e.Landing).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.Reg).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.TakeOff).HasMaxLength(255);

                entity.Property(e => e.XDateUTC).HasColumnType("date");

                entity.Property(e => e.XFlightNumber).HasMaxLength(4000);

                entity.Property(e => e.XFromAirport).HasMaxLength(255);

                entity.Property(e => e.XLanding).HasColumnType("datetime");

                entity.Property(e => e.XOffBlock).HasColumnType("datetime");

                entity.Property(e => e.XOnBlock).HasColumnType("datetime");

                entity.Property(e => e.XSTA).HasColumnType("datetime");

                entity.Property(e => e.XSTD).HasColumnType("datetime");

                entity.Property(e => e.XTakeOff).HasColumnType("datetime");

                entity.Property(e => e.XToAirport).HasMaxLength(255);

                entity.Property(e => e.cargo).HasMaxLength(255);

                entity.Property(e => e.trip).HasMaxLength(255);

                entity.Property(e => e.uplift).HasMaxLength(255);
            });

            modelBuilder.Entity<XFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XFlight");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ATA).HasMaxLength(255);

                entity.Property(e => e.ATD).HasMaxLength(255);

                entity.Property(e => e.AlternateStation).HasMaxLength(255);

                entity.Property(e => e.BagPiece).HasMaxLength(255);

                entity.Property(e => e.Baggage).HasMaxLength(255);

                entity.Property(e => e.CargoPiece).HasMaxLength(255);

                entity.Property(e => e.CargoWeight).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.Female).HasMaxLength(255);

                entity.Property(e => e.FuelDefuel).HasMaxLength(255);

                entity.Property(e => e.FuelRemain).HasMaxLength(255);

                entity.Property(e => e.FuelTaxi).HasMaxLength(255);

                entity.Property(e => e.FuelTotal).HasMaxLength(255);

                entity.Property(e => e.FuelTrip).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(255);

                entity.Property(e => e.FuelUpLift).HasMaxLength(255);

                entity.Property(e => e.Male).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.OnRunway).HasMaxLength(255);

                entity.Property(e => e.OverPax).HasMaxLength(255);

                entity.Property(e => e.PAXStation).HasMaxLength(255);

                entity.Property(e => e.Parking).HasMaxLength(255);

                entity.Property(e => e.PaxADL).HasMaxLength(255);

                entity.Property(e => e.PaxCHD).HasMaxLength(255);

                entity.Property(e => e.PaxINF).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.SaveTime).HasMaxLength(255);

                entity.Property(e => e.StationIncomeCurrency).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Tag1).HasMaxLength(255);

                entity.Property(e => e.Tag2).HasMaxLength(255);

                entity.Property(e => e.Tag3).HasMaxLength(255);

                entity.Property(e => e.TakeOff).HasMaxLength(255);

                entity.Property(e => e.TotalSeats).HasMaxLength(255);

                entity.Property(e => e.XDateUTC).HasColumnType("date");

                entity.Property(e => e.XFlightNumber).HasMaxLength(4000);

                entity.Property(e => e.XFromAirport).HasMaxLength(255);

                entity.Property(e => e.XLanding).HasColumnType("datetime");

                entity.Property(e => e.XOffBlock).HasColumnType("datetime");

                entity.Property(e => e.XOnBlock).HasColumnType("datetime");

                entity.Property(e => e.XSTA).HasColumnType("datetime");

                entity.Property(e => e.XSTD).HasColumnType("datetime");

                entity.Property(e => e.XTakeOff).HasColumnType("datetime");

                entity.Property(e => e.XToAirport).HasMaxLength(255);
            });

            modelBuilder.Entity<XInit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XInit");

                entity.Property(e => e.InitEnd).HasColumnType("datetime");

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.InitGroup).HasMaxLength(500);

                entity.Property(e => e.InitRank)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.InitRestTo).HasColumnType("datetime");

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.InitScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<XLSFLT>(entity =>
            {
                entity.ToTable("XLSFLT");

                entity.Property(e => e.ALT1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ALT5)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.CARGO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPRegister)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.DateApplied).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GWLand).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.GWTO).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.JLDate).HasColumnType("datetime");

                entity.Property(e => e.JLDateApproved).HasColumnType("datetime");

                entity.Property(e => e.JLDatePICApproved).HasColumnType("datetime");

                entity.Property(e => e.JLLanding).HasColumnType("datetime");

                entity.Property(e => e.JLNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.JLOffBlock).HasColumnType("datetime");

                entity.Property(e => e.JLOnBlock).HasColumnType("datetime");

                entity.Property(e => e.JLSignedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JLTakeOff).HasColumnType("datetime");

                entity.Property(e => e.LTR)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PF)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RVSM_FLT_CPT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_FLT_FO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_FLT_STBY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_CPT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_FO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RVSM_GND_STBY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.SIC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.UPDNOTE)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<_CSPN>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_CSPN");
            });

            modelBuilder.Entity<_CabinJSON>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_CabinJSON");

                entity.Property(e => e.AircraftTypeId).HasMaxLength(255);

                entity.Property(e => e.AviationSecurityExpireDate).HasMaxLength(255);

                entity.Property(e => e.AviationSecurityIssueDate).HasMaxLength(255);

                entity.Property(e => e.CCRMExpireDate).HasMaxLength(255);

                entity.Property(e => e.CCRMIssueDate).HasMaxLength(255);

                entity.Property(e => e.CRMExpireDate).HasMaxLength(255);

                entity.Property(e => e.CRMIssueDate).HasMaxLength(255);

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.ColdWeatherOperationExpireDate).HasMaxLength(255);

                entity.Property(e => e.ColdWeatherOperationIssueDate).HasMaxLength(255);

                entity.Property(e => e.CriticalCertificatesCount).HasMaxLength(1000);

                entity.Property(e => e.DangerousGoodsExpireDate).HasMaxLength(255);

                entity.Property(e => e.DangerousGoodsIssueDate).HasMaxLength(255);

                entity.Property(e => e.DateInactiveBegin).HasMaxLength(255);

                entity.Property(e => e.DateInactiveEnd).HasMaxLength(255);

                entity.Property(e => e.DateTREExpired).HasMaxLength(1000);

                entity.Property(e => e.DateTRIExpired).HasMaxLength(1000);

                entity.Property(e => e.DateTypeExpire).HasMaxLength(255);

                entity.Property(e => e.DateTypeIssue).HasMaxLength(255);

                entity.Property(e => e.EGPWSExpireDate).HasMaxLength(255);

                entity.Property(e => e.EGPWSIssueDate).HasMaxLength(255);

                entity.Property(e => e.FirstAidExpireDate).HasMaxLength(255);

                entity.Property(e => e.FirstAidIssueDate).HasMaxLength(255);

                entity.Property(e => e.FirstName).HasMaxLength(1000);

                entity.Property(e => e.HotWeatherOperationExpireDate).HasMaxLength(255);

                entity.Property(e => e.HotWeatherOperationIssueDate).HasMaxLength(255);

                entity.Property(e => e.ICAOLPRLevel).HasMaxLength(1000);

                entity.Property(e => e.ICAOLPRValidUntil).HasMaxLength(1000);

                entity.Property(e => e.IsAvSecExpired).HasMaxLength(255);

                entity.Property(e => e.IsCCRMExpired).HasMaxLength(255);

                entity.Property(e => e.IsCMCExpired).HasMaxLength(255);

                entity.Property(e => e.IsCRMExpired).HasMaxLength(255);

                entity.Property(e => e.IsColdWeatherExpired).HasMaxLength(255);

                entity.Property(e => e.IsDGExpired).HasMaxLength(255);

                entity.Property(e => e.IsFirstAidExpired).HasMaxLength(255);

                entity.Property(e => e.IsHotWeatherExpired).HasMaxLength(255);

                entity.Property(e => e.IsLPRExpired).HasMaxLength(255);

                entity.Property(e => e.IsLicenceExpired).HasMaxLength(255);

                entity.Property(e => e.IsLicenceIRExpired).HasMaxLength(255);

                entity.Property(e => e.IsLineExpired).HasMaxLength(255);

                entity.Property(e => e.IsMedicalExpired).HasMaxLength(255);

                entity.Property(e => e.IsProficiencyExpired).HasMaxLength(255);

                entity.Property(e => e.IsProficiencyOPCExpired).HasMaxLength(255);

                entity.Property(e => e.IsRecurrentExpired).HasMaxLength(255);

                entity.Property(e => e.IsSEPTExpired).HasMaxLength(255);

                entity.Property(e => e.IsSEPTPExpired).HasMaxLength(255);

                entity.Property(e => e.IsSMSExpired).HasMaxLength(255);

                entity.Property(e => e.IsTREExpired).HasMaxLength(255);

                entity.Property(e => e.IsTRIExpired).HasMaxLength(255);

                entity.Property(e => e.IsUpsetRecoveryTrainingExpired).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(1000);

                entity.Property(e => e.LastName).HasMaxLength(1000);

                entity.Property(e => e.LineExpireDate).HasMaxLength(255);

                entity.Property(e => e.LineIssueDate).HasMaxLength(255);

                entity.Property(e => e.LinkedIn).HasMaxLength(255);

                entity.Property(e => e.PBNRNAVExpireDate).HasMaxLength(255);

                entity.Property(e => e.PBNRNAVIssueDate).HasMaxLength(255);

                entity.Property(e => e.ProficiencyCheckDate).HasMaxLength(1000);

                entity.Property(e => e.ProficiencyCheckDateOPC).HasMaxLength(1000);

                entity.Property(e => e.ProficiencyCheckType).HasMaxLength(1000);

                entity.Property(e => e.ProficiencyDescriptionOPC).HasMaxLength(1000);

                entity.Property(e => e.ProficiencyExpireDate).HasMaxLength(1000);

                entity.Property(e => e.ProficiencyValidUntil).HasMaxLength(1000);

                entity.Property(e => e.ProficiencyValidUntilOPC).HasMaxLength(1000);

                entity.Property(e => e.RecurrentExpireDate).HasMaxLength(255);

                entity.Property(e => e.RecurrentIssueDate).HasMaxLength(255);

                entity.Property(e => e.RemainAvSec).HasMaxLength(255);

                entity.Property(e => e.RemainCCRM).HasMaxLength(255);

                entity.Property(e => e.RemainCMC).HasMaxLength(255);

                entity.Property(e => e.RemainCRM).HasMaxLength(255);

                entity.Property(e => e.RemainColdWeather).HasMaxLength(255);

                entity.Property(e => e.RemainDG).HasMaxLength(255);

                entity.Property(e => e.RemainFirstAid).HasMaxLength(255);

                entity.Property(e => e.RemainHotWeather).HasMaxLength(255);

                entity.Property(e => e.RemainLPR).HasMaxLength(255);

                entity.Property(e => e.RemainLicence).HasMaxLength(255);

                entity.Property(e => e.RemainLicenceIR).HasMaxLength(255);

                entity.Property(e => e.RemainLine).HasMaxLength(255);

                entity.Property(e => e.RemainMedical).HasMaxLength(255);

                entity.Property(e => e.RemainProficiency).HasMaxLength(255);

                entity.Property(e => e.RemainProficiencyOPC).HasMaxLength(255);

                entity.Property(e => e.RemainRecurrent).HasMaxLength(255);

                entity.Property(e => e.RemainSEPT).HasMaxLength(255);

                entity.Property(e => e.RemainSEPTP).HasMaxLength(255);

                entity.Property(e => e.RemainSMS).HasMaxLength(255);

                entity.Property(e => e.RemainTRE).HasMaxLength(255);

                entity.Property(e => e.RemainTRI).HasMaxLength(255);

                entity.Property(e => e.RemainUpsetRecoveryTraining).HasMaxLength(255);

                entity.Property(e => e.SEPTExpireDate).HasMaxLength(255);

                entity.Property(e => e.SEPTIssueDate).HasMaxLength(255);

                entity.Property(e => e.SEPTPExpireDate).HasMaxLength(255);

                entity.Property(e => e.SEPTPIssueDate).HasMaxLength(255);

                entity.Property(e => e.SMSExpireDate).HasMaxLength(255);

                entity.Property(e => e.SMSIssueDate).HasMaxLength(255);

                entity.Property(e => e.ScheduleName).HasMaxLength(255);

                entity.Property(e => e.Telegram).HasMaxLength(255);

                entity.Property(e => e.UpsetRecoveryTrainingExpireDate).HasMaxLength(255);

                entity.Property(e => e.UpsetRecoveryTrainingIssueDate).HasMaxLength(255);

                entity.Property(e => e.WhatsApp).HasMaxLength(255);
            });

            modelBuilder.Entity<_CrewsJSON>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_CrewsJSON");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.Age).HasMaxLength(255);

                entity.Property(e => e.AircraftTypeId).HasMaxLength(255);

                entity.Property(e => e.AviationSecurityExpireDate).HasMaxLength(255);

                entity.Property(e => e.AviationSecurityIssueDate).HasMaxLength(255);

                entity.Property(e => e.BaseAirport).HasMaxLength(255);

                entity.Property(e => e.BaseAirportId).HasMaxLength(255);

                entity.Property(e => e.BookAlert).HasMaxLength(255);

                entity.Property(e => e.CCRMExpireDate).HasMaxLength(255);

                entity.Property(e => e.CCRMIssueDate).HasMaxLength(255);

                entity.Property(e => e.CRMExpireDate).HasMaxLength(255);

                entity.Property(e => e.CRMIssueDate).HasMaxLength(255);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(255);

                entity.Property(e => e.CaoInterval).HasMaxLength(255);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(255);

                entity.Property(e => e.CaoIntervalCalanderTypeId).HasMaxLength(255);

                entity.Property(e => e.City).HasMaxLength(255);

                entity.Property(e => e.CityFullName).HasMaxLength(255);

                entity.Property(e => e.CityId).HasMaxLength(255);

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.ColdWeatherOperationExpireDate).HasMaxLength(255);

                entity.Property(e => e.ColdWeatherOperationIssueDate).HasMaxLength(255);

                entity.Property(e => e.CompetencyNo).HasMaxLength(255);

                entity.Property(e => e.Country).HasMaxLength(255);

                entity.Property(e => e.CountryId).HasMaxLength(255);

                entity.Property(e => e.CrewMemberCertificateExpireDate).HasMaxLength(255);

                entity.Property(e => e.CriticalCertificatesCount).HasMaxLength(255);

                entity.Property(e => e.CurrentLocationAirport).HasMaxLength(255);

                entity.Property(e => e.CurrentLocationCity).HasMaxLength(255);

                entity.Property(e => e.CurrentLocationCityId).HasMaxLength(255);

                entity.Property(e => e.Customer).HasMaxLength(255);

                entity.Property(e => e.CustomerCreatorId).HasMaxLength(255);

                entity.Property(e => e.CustomerId).HasMaxLength(255);

                entity.Property(e => e.DangerousGoodsExpireDate).HasMaxLength(255);

                entity.Property(e => e.DangerousGoodsIssueDate).HasMaxLength(255);

                entity.Property(e => e.DateBirth).HasMaxLength(255);

                entity.Property(e => e.DateCaoCardExpire).HasMaxLength(255);

                entity.Property(e => e.DateCaoCardIssue).HasMaxLength(255);

                entity.Property(e => e.DateConfirmed).HasMaxLength(255);

                entity.Property(e => e.DateExpireNDT).HasMaxLength(255);

                entity.Property(e => e.DateInactiveBegin).HasMaxLength(255);

                entity.Property(e => e.DateInactiveEnd).HasMaxLength(255);

                entity.Property(e => e.DateIssueNDT).HasMaxLength(255);

                entity.Property(e => e.DateJoinAvation).HasMaxLength(255);

                entity.Property(e => e.DateJoinCompany).HasMaxLength(255);

                entity.Property(e => e.DateLastCheckUP).HasMaxLength(255);

                entity.Property(e => e.DateNextCheckUP).HasMaxLength(255);

                entity.Property(e => e.DatePassportExpire).HasMaxLength(255);

                entity.Property(e => e.DatePassportIssue).HasMaxLength(255);

                entity.Property(e => e.DateRegister).HasMaxLength(255);

                entity.Property(e => e.DateTREExpired).HasMaxLength(255);

                entity.Property(e => e.DateTRIExpired).HasMaxLength(255);

                entity.Property(e => e.DateTypeExpire).HasMaxLength(255);

                entity.Property(e => e.DateTypeIssue).HasMaxLength(255);

                entity.Property(e => e.DateYearOfExperience).HasMaxLength(255);

                entity.Property(e => e.EGPWSExpireDate).HasMaxLength(255);

                entity.Property(e => e.EGPWSIssueDate).HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.EmployeeLocationId).HasMaxLength(255);

                entity.Property(e => e.Exp).HasMaxLength(255);

                entity.Property(e => e.ExpCompany).HasMaxLength(255);

                entity.Property(e => e.FatherName).HasMaxLength(255);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(255);

                entity.Property(e => e.FirstAidExpireDate).HasMaxLength(255);

                entity.Property(e => e.FirstAidIssueDate).HasMaxLength(255);

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.FlightEarly).HasMaxLength(255);

                entity.Property(e => e.FlightLate).HasMaxLength(255);

                entity.Property(e => e.FlightSum).HasMaxLength(255);

                entity.Property(e => e.GroupId).HasMaxLength(255);

                entity.Property(e => e.HotWeatherOperationExpireDate).HasMaxLength(255);

                entity.Property(e => e.HotWeatherOperationIssueDate).HasMaxLength(255);

                entity.Property(e => e.ICAOLPRLevel).HasMaxLength(255);

                entity.Property(e => e.ICAOLPRValidUntil).HasMaxLength(255);

                entity.Property(e => e.IDNo).HasMaxLength(255);

                entity.Property(e => e.Id).HasMaxLength(255);

                entity.Property(e => e.ImageUrl).HasMaxLength(255);

                entity.Property(e => e.InActive).HasMaxLength(255);

                entity.Property(e => e.IntervalNDT).HasMaxLength(255);

                entity.Property(e => e.IsActive).HasMaxLength(255);

                entity.Property(e => e.IsAvSecExpired).HasMaxLength(255);

                entity.Property(e => e.IsCAOExpired).HasMaxLength(255);

                entity.Property(e => e.IsCAOExpiring).HasMaxLength(255);

                entity.Property(e => e.IsCCRMExpired).HasMaxLength(255);

                entity.Property(e => e.IsCMCExpired).HasMaxLength(255);

                entity.Property(e => e.IsCRMExpired).HasMaxLength(255);

                entity.Property(e => e.IsColdWeatherExpired).HasMaxLength(255);

                entity.Property(e => e.IsDGExpired).HasMaxLength(255);

                entity.Property(e => e.IsDeleted).HasMaxLength(255);

                entity.Property(e => e.IsFirstAidExpired).HasMaxLength(255);

                entity.Property(e => e.IsHotWeatherExpired).HasMaxLength(255);

                entity.Property(e => e.IsLPRExpired).HasMaxLength(255);

                entity.Property(e => e.IsLicenceExpired).HasMaxLength(255);

                entity.Property(e => e.IsLicenceIRExpired).HasMaxLength(255);

                entity.Property(e => e.IsLineExpired).HasMaxLength(255);

                entity.Property(e => e.IsMainLocation).HasMaxLength(255);

                entity.Property(e => e.IsMedicalExpired).HasMaxLength(255);

                entity.Property(e => e.IsMedicalExpiring).HasMaxLength(255);

                entity.Property(e => e.IsNDTExpired).HasMaxLength(255);

                entity.Property(e => e.IsNDTExpiring).HasMaxLength(255);

                entity.Property(e => e.IsPassportExpired).HasMaxLength(255);

                entity.Property(e => e.IsPassportExpiring).HasMaxLength(255);

                entity.Property(e => e.IsProficiencyExpired).HasMaxLength(255);

                entity.Property(e => e.IsProficiencyOPCExpired).HasMaxLength(255);

                entity.Property(e => e.IsRecurrentExpired).HasMaxLength(255);

                entity.Property(e => e.IsSEPTExpired).HasMaxLength(255);

                entity.Property(e => e.IsSEPTPExpired).HasMaxLength(255);

                entity.Property(e => e.IsSMSExpired).HasMaxLength(255);

                entity.Property(e => e.IsTREExpired).HasMaxLength(255);

                entity.Property(e => e.IsTRIExpired).HasMaxLength(255);

                entity.Property(e => e.IsUpsetRecoveryTrainingExpired).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(255);

                entity.Property(e => e.JobGroupCode).HasMaxLength(255);

                entity.Property(e => e.JobGroupRoot).HasMaxLength(255);

                entity.Property(e => e.LanguageCourseExpireDate).HasMaxLength(255);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.LicenceDescription).HasMaxLength(255);

                entity.Property(e => e.LicenceExpireDate).HasMaxLength(255);

                entity.Property(e => e.LicenceIRExpireDate).HasMaxLength(255);

                entity.Property(e => e.LicenceInitialIssue).HasMaxLength(255);

                entity.Property(e => e.LicenceIssueDate).HasMaxLength(255);

                entity.Property(e => e.LicenceTitle).HasMaxLength(255);

                entity.Property(e => e.LineExpireDate).HasMaxLength(255);

                entity.Property(e => e.LineIssueDate).HasMaxLength(255);

                entity.Property(e => e.LinkedIn).HasMaxLength(255);

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.LocationCode).HasMaxLength(255);

                entity.Property(e => e.LocationId).HasMaxLength(255);

                entity.Property(e => e.LocationPhone).HasMaxLength(255);

                entity.Property(e => e.MaritalStatus).HasMaxLength(255);

                entity.Property(e => e.MarriageId).HasMaxLength(255);

                entity.Property(e => e.MedicalClass).HasMaxLength(255);

                entity.Property(e => e.MedicalLimitation).HasMaxLength(255);

                entity.Property(e => e.Mobile).HasMaxLength(255);

                entity.Property(e => e.NDTIntervalCalanderType).HasMaxLength(255);

                entity.Property(e => e.NDTIntervalCalanderTypeId).HasMaxLength(255);

                entity.Property(e => e.NDTNumber).HasMaxLength(255);

                entity.Property(e => e.NID).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Nickname).HasMaxLength(255);

                entity.Property(e => e.OrgRoleId).HasMaxLength(255);

                entity.Property(e => e.PBNRNAVExpireDate).HasMaxLength(255);

                entity.Property(e => e.PBNRNAVIssueDate).HasMaxLength(255);

                entity.Property(e => e.PID).HasMaxLength(255);

                entity.Property(e => e.PassportNumber).HasMaxLength(255);

                entity.Property(e => e.Password).HasMaxLength(255);

                entity.Property(e => e.PersonId).HasMaxLength(255);

                entity.Property(e => e.Phone1).HasMaxLength(255);

                entity.Property(e => e.Phone2).HasMaxLength(255);

                entity.Property(e => e.Post).HasMaxLength(255);

                entity.Property(e => e.PostalCode).HasMaxLength(255);

                entity.Property(e => e.ProficiencyCheckDate).HasMaxLength(255);

                entity.Property(e => e.ProficiencyCheckDateOPC).HasMaxLength(255);

                entity.Property(e => e.ProficiencyCheckType).HasMaxLength(255);

                entity.Property(e => e.ProficiencyDescription).HasMaxLength(255);

                entity.Property(e => e.ProficiencyDescriptionOPC).HasMaxLength(255);

                entity.Property(e => e.ProficiencyExpireDate).HasMaxLength(255);

                entity.Property(e => e.ProficiencyValidUntil).HasMaxLength(255);

                entity.Property(e => e.ProficiencyValidUntilOPC).HasMaxLength(255);

                entity.Property(e => e.RaitingCertificates).HasMaxLength(255);

                entity.Property(e => e.RampPassExpireDate).HasMaxLength(255);

                entity.Property(e => e.RampPassNo).HasMaxLength(255);

                entity.Property(e => e.RecurrentExpireDate).HasMaxLength(255);

                entity.Property(e => e.RecurrentIssueDate).HasMaxLength(255);

                entity.Property(e => e.RemainAvSec).HasMaxLength(255);

                entity.Property(e => e.RemainCAO).HasMaxLength(255);

                entity.Property(e => e.RemainCCRM).HasMaxLength(255);

                entity.Property(e => e.RemainCMC).HasMaxLength(255);

                entity.Property(e => e.RemainCRM).HasMaxLength(255);

                entity.Property(e => e.RemainColdWeather).HasMaxLength(255);

                entity.Property(e => e.RemainDG).HasMaxLength(255);

                entity.Property(e => e.RemainFirstAid).HasMaxLength(255);

                entity.Property(e => e.RemainHotWeather).HasMaxLength(255);

                entity.Property(e => e.RemainLPR).HasMaxLength(255);

                entity.Property(e => e.RemainLicence).HasMaxLength(255);

                entity.Property(e => e.RemainLicenceIR).HasMaxLength(255);

                entity.Property(e => e.RemainLine).HasMaxLength(255);

                entity.Property(e => e.RemainMedical).HasMaxLength(255);

                entity.Property(e => e.RemainNDT).HasMaxLength(255);

                entity.Property(e => e.RemainPassport).HasMaxLength(255);

                entity.Property(e => e.RemainProficiency).HasMaxLength(255);

                entity.Property(e => e.RemainProficiencyOPC).HasMaxLength(255);

                entity.Property(e => e.RemainRecurrent).HasMaxLength(255);

                entity.Property(e => e.RemainSEPT).HasMaxLength(255);

                entity.Property(e => e.RemainSEPTP).HasMaxLength(255);

                entity.Property(e => e.RemainSMS).HasMaxLength(255);

                entity.Property(e => e.RemainTRE).HasMaxLength(255);

                entity.Property(e => e.RemainTRI).HasMaxLength(255);

                entity.Property(e => e.RemainUpsetRecoveryTraining).HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.RootLocation).HasMaxLength(255);

                entity.Property(e => e.SEPTExpireDate).HasMaxLength(255);

                entity.Property(e => e.SEPTIssueDate).HasMaxLength(255);

                entity.Property(e => e.SEPTPExpireDate).HasMaxLength(255);

                entity.Property(e => e.SEPTPIssueDate).HasMaxLength(255);

                entity.Property(e => e.SMSExpireDate).HasMaxLength(255);

                entity.Property(e => e.SMSIssueDate).HasMaxLength(255);

                entity.Property(e => e.ScheduleName).HasMaxLength(255);

                entity.Property(e => e.Sex).HasMaxLength(255);

                entity.Property(e => e.SexId).HasMaxLength(255);

                entity.Property(e => e.SimulatorLastCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorNextCheck).HasMaxLength(255);

                entity.Property(e => e.StampNumber).HasMaxLength(255);

                entity.Property(e => e.StampUrl).HasMaxLength(255);

                entity.Property(e => e.State).HasMaxLength(255);

                entity.Property(e => e.StateId).HasMaxLength(255);

                entity.Property(e => e.TechLogNo).HasMaxLength(255);

                entity.Property(e => e.Telegram).HasMaxLength(255);

                entity.Property(e => e.TypeRemain).HasMaxLength(255);

                entity.Property(e => e.Types).HasMaxLength(255);

                entity.Property(e => e.UpsetRecoveryTrainingExpireDate).HasMaxLength(255);

                entity.Property(e => e.UpsetRecoveryTrainingIssueDate).HasMaxLength(255);

                entity.Property(e => e.UserId).HasMaxLength(255);

                entity.Property(e => e.Username).HasMaxLength(255);

                entity.Property(e => e.VisaExpireDate).HasMaxLength(255);

                entity.Property(e => e.WhatsApp).HasMaxLength(255);

                entity.Property(e => e.record).HasMaxLength(255);
            });

            modelBuilder.Entity<_DayGP>(entity =>
            {
                entity.HasKey(e => e.GDate)
                    .HasName("PK___DayGP__869A7EA480228815");

                entity.ToTable("_DayGP");

                entity.Property(e => e.GDate).HasColumnType("datetime");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PYearName).HasMaxLength(255);

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);
            });

            modelBuilder.Entity<_DayGPTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_DayGPTest");

                entity.Property(e => e.GDate).HasColumnType("datetime");

                entity.Property(e => e.PDate)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_DayGPX>(entity =>
            {
                entity.HasKey(e => e.GDate)
                    .HasName("PK___DayGP__869A7EA410228815");

                entity.ToTable("_DayGPX");

                entity.Property(e => e.GDate).HasColumnType("datetime");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.PDate).HasMaxLength(500);

                entity.Property(e => e.PDayName).HasMaxLength(255);

                entity.Property(e => e.PMonthName).HasMaxLength(255);

                entity.Property(e => e.PYearName).HasMaxLength(255);

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);
            });

            modelBuilder.Entity<_DelayId>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.FlightId).HasMaxLength(255);
            });

            modelBuilder.Entity<_FDPItemRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_FDPItemRank");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<_FMISASSIGN>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_FMISASSIGN");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ArrTime).HasMaxLength(255);

                entity.Property(e => e.ArrTimeLCL).HasMaxLength(255);

                entity.Property(e => e.Change).HasMaxLength(255);

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.DepTime).HasMaxLength(255);

                entity.Property(e => e.DepTimeLCL).HasMaxLength(255);

                entity.Property(e => e.Flt).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.JobType).HasMaxLength(255);

                entity.Property(e => e.Pos).HasMaxLength(255);

                entity.Property(e => e.Rank).HasMaxLength(255);

                entity.Property(e => e.Route).HasMaxLength(255);

                entity.Property(e => e.RouteType).HasMaxLength(255);

                entity.Property(e => e.ScheduleGroup).HasMaxLength(255);

                entity.Property(e => e.Scheduler).HasMaxLength(255);

                entity.Property(e => e.StandardTime).HasMaxLength(255);

                entity.Property(e => e.TurnType).HasMaxLength(255);
            });

            modelBuilder.Entity<_FMISCREW>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_FMISCREW");

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.Active).HasMaxLength(255);

                entity.Property(e => e.Additional).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.AddressRegion).HasMaxLength(255);

                entity.Property(e => e.BaseStation).HasMaxLength(255);

                entity.Property(e => e.BirthDate).HasMaxLength(255);

                entity.Property(e => e.BirthPlace).HasMaxLength(255);

                entity.Property(e => e.BoxNo).HasMaxLength(255);

                entity.Property(e => e.CMCExpire).HasMaxLength(255);

                entity.Property(e => e.CellPhone).HasMaxLength(255);

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CrewType).HasMaxLength(255);

                entity.Property(e => e.DigitCode).HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.EmployeeNo).HasMaxLength(255);

                entity.Property(e => e.FLName).HasMaxLength(255);

                entity.Property(e => e.FName).HasMaxLength(255);

                entity.Property(e => e.FScheduleName).HasMaxLength(255);

                entity.Property(e => e.Faddress).HasMaxLength(255);

                entity.Property(e => e.FatherName).HasMaxLength(255);

                entity.Property(e => e.Fax).HasMaxLength(255);

                entity.Property(e => e.Ffname).HasMaxLength(255);

                entity.Property(e => e.Gender).HasMaxLength(255);

                entity.Property(e => e.HireDate).HasMaxLength(255);

                entity.Property(e => e.Id).HasMaxLength(255);

                entity.Property(e => e.IdNo).HasMaxLength(255);

                entity.Property(e => e.InstructorType).HasMaxLength(255);

                entity.Property(e => e.JobPosition).HasMaxLength(255);

                entity.Property(e => e.JobShift).HasMaxLength(255);

                entity.Property(e => e.L4Expire).HasMaxLength(255);

                entity.Property(e => e.LName).HasMaxLength(255);

                entity.Property(e => e.LastDoctor).HasMaxLength(255);

                entity.Property(e => e.LastFltTime).HasMaxLength(255);

                entity.Property(e => e.LicenceExpire).HasMaxLength(255);

                entity.Property(e => e.LicenceNo).HasMaxLength(255);

                entity.Property(e => e.MedicalAudio).HasMaxLength(255);

                entity.Property(e => e.MedicalCheckup).HasMaxLength(255);

                entity.Property(e => e.MedicalECG).HasMaxLength(255);

                entity.Property(e => e.MedicalExpire).HasMaxLength(255);

                entity.Property(e => e.MedicalHistory).HasMaxLength(255);

                entity.Property(e => e.MultiType).HasMaxLength(255);

                entity.Property(e => e.NationalNo).HasMaxLength(255);

                entity.Property(e => e.Native).HasMaxLength(255);

                entity.Property(e => e.PassportExpire).HasMaxLength(255);

                entity.Property(e => e.PassportNo).HasMaxLength(255);

                entity.Property(e => e.Phone).HasMaxLength(255);

                entity.Property(e => e.ProductiveDate).HasMaxLength(255);

                entity.Property(e => e.ProficiencyExpire).HasMaxLength(255);

                entity.Property(e => e.RampPassExpire).HasMaxLength(255);

                entity.Property(e => e.RampPassNo).HasMaxLength(255);

                entity.Property(e => e.ScheduleName).HasMaxLength(255);

                entity.Property(e => e.Seniority).HasMaxLength(255);

                entity.Property(e => e.SetGroup).HasMaxLength(255);

                entity.Property(e => e.Simulator8MonthCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorAnnual).HasMaxLength(255);

                entity.Property(e => e.SimulatorAnnualCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorLastCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorNextCheck).HasMaxLength(255);

                entity.Property(e => e.Skill).HasMaxLength(255);

                entity.Property(e => e.Training_Seat_Los).HasMaxLength(255);

                entity.Property(e => e.Training_Seat_Rev).HasMaxLength(255);

                entity.Property(e => e.Training_Seat_Tre_).HasMaxLength(255);
            });

            modelBuilder.Entity<_FMISDATE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_FMISDATE");

                entity.Property(e => e.AviationSecurityExpireDate).HasColumnType("date");

                entity.Property(e => e.AviationSecurityIssueDate).HasColumnType("date");

                entity.Property(e => e.CCRMExpireDate).HasColumnType("date");

                entity.Property(e => e.CCRMIssueDate).HasColumnType("date");

                entity.Property(e => e.COLDWXExpireDate).HasColumnType("date");

                entity.Property(e => e.COLDWXIssueDate).HasColumnType("date");

                entity.Property(e => e.CRMExpireDate).HasColumnType("date");

                entity.Property(e => e.CRMIssueDate).HasColumnType("date");

                entity.Property(e => e.DangerousGoodsExpireDate).HasColumnType("date");

                entity.Property(e => e.DangerousGoodsIssueDate).HasColumnType("date");

                entity.Property(e => e.FIRSTAIDExpireDate).HasColumnType("date");

                entity.Property(e => e.FIRSTAIDIssueDate).HasColumnType("date");

                entity.Property(e => e.FMTExpireDate).HasColumnType("date");

                entity.Property(e => e.FMTIssueDate).HasColumnType("date");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.HOTWXExpireDate).HasColumnType("date");

                entity.Property(e => e.HOTWXIssueDate).HasColumnType("date");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.LPRDate).HasColumnType("date");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SEPTPExpireDate).HasColumnType("date");

                entity.Property(e => e.SEPTPIssueDate).HasColumnType("date");

                entity.Property(e => e.SEPTTExpireDate).HasColumnType("date");

                entity.Property(e => e.SEPTTIssueDate).HasColumnType("date");

                entity.Property(e => e.SMSExpireDate).HasColumnType("date");

                entity.Property(e => e.SMSIssueDate).HasColumnType("date");
            });

            modelBuilder.Entity<_FMISFLIGHT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_FMISFLIGHT");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ATA).HasMaxLength(255);

                entity.Property(e => e.ATD).HasMaxLength(255);

                entity.Property(e => e.AlternateStation).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.BagPiece).HasMaxLength(255);

                entity.Property(e => e.Baggage).HasMaxLength(255);

                entity.Property(e => e.CargoPiece).HasMaxLength(255);

                entity.Property(e => e.CargoUnit).HasMaxLength(255);

                entity.Property(e => e.CargoWeight).HasMaxLength(255);

                entity.Property(e => e.CargoXML)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CrewXML)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DelayReason).HasMaxLength(255);

                entity.Property(e => e.DelayXML)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.Distance).HasMaxLength(255);

                entity.Property(e => e.ExtraBag).HasMaxLength(255);

                entity.Property(e => e.ExtraBagAmount).HasMaxLength(255);

                entity.Property(e => e.ExtraBagPiece).HasMaxLength(255);

                entity.Property(e => e.ExtraXML)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Female).HasMaxLength(255);

                entity.Property(e => e.FlightCharterer).HasMaxLength(255);

                entity.Property(e => e.FlightType).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.FuelDefuel).HasMaxLength(255);

                entity.Property(e => e.FuelRemain).HasMaxLength(255);

                entity.Property(e => e.FuelTaxi).HasMaxLength(255);

                entity.Property(e => e.FuelTotal).HasMaxLength(255);

                entity.Property(e => e.FuelTrip).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(255);

                entity.Property(e => e.FuelUpLift).HasMaxLength(255);

                entity.Property(e => e.Key)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MaintenanceXML)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Male).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.OnRunway).HasMaxLength(255);

                entity.Property(e => e.OverPax).HasMaxLength(255);

                entity.Property(e => e.PAXStation).HasMaxLength(2000);

                entity.Property(e => e.Parking).HasMaxLength(2000);

                entity.Property(e => e.PaxADL).HasMaxLength(255);

                entity.Property(e => e.PaxCHD).HasMaxLength(255);

                entity.Property(e => e.PaxINF).HasMaxLength(255);

                entity.Property(e => e.PaxXML)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.SaveTime).HasMaxLength(255);

                entity.Property(e => e.SavingTime).HasMaxLength(255);

                entity.Property(e => e.StationIncome).HasMaxLength(255);

                entity.Property(e => e.StationIncomeCurrency).HasMaxLength(2000);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Tag1).HasMaxLength(2000);

                entity.Property(e => e.Tag2).HasMaxLength(2000);

                entity.Property(e => e.Tag3).HasMaxLength(2000);

                entity.Property(e => e.TakeOff).HasMaxLength(255);

                entity.Property(e => e.TotalSeats).HasMaxLength(255);

                entity.Property(e => e.UpdateTime).HasMaxLength(255);

                entity.Property(e => e.UpdateUser).HasMaxLength(255);
            });

            modelBuilder.Entity<_FMISFLIGHT25>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_FMISFLIGHT25");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ATA).HasMaxLength(255);

                entity.Property(e => e.ATD).HasMaxLength(255);

                entity.Property(e => e.AlternateStation).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.BagPiece).HasMaxLength(255);

                entity.Property(e => e.Baggage).HasMaxLength(255);

                entity.Property(e => e.CargoPiece).HasMaxLength(255);

                entity.Property(e => e.CargoUnit).HasMaxLength(255);

                entity.Property(e => e.CargoWeight).HasMaxLength(255);

                entity.Property(e => e.CargoXML)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CrewXML)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DelayReason).HasMaxLength(255);

                entity.Property(e => e.DelayXML)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.Distance).HasMaxLength(255);

                entity.Property(e => e.ExtraBag).HasMaxLength(255);

                entity.Property(e => e.ExtraBagAmount).HasMaxLength(255);

                entity.Property(e => e.ExtraBagPiece).HasMaxLength(255);

                entity.Property(e => e.ExtraXML)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Female).HasMaxLength(255);

                entity.Property(e => e.FlightCharterer).HasMaxLength(255);

                entity.Property(e => e.FlightType).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.FuelDefuel).HasMaxLength(255);

                entity.Property(e => e.FuelRemain).HasMaxLength(255);

                entity.Property(e => e.FuelTaxi).HasMaxLength(255);

                entity.Property(e => e.FuelTotal).HasMaxLength(255);

                entity.Property(e => e.FuelTrip).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(255);

                entity.Property(e => e.FuelUpLift).HasMaxLength(255);

                entity.Property(e => e.Key)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MaintenanceXML)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Male).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.OnRunway).HasMaxLength(255);

                entity.Property(e => e.OverPax).HasMaxLength(255);

                entity.Property(e => e.PAXStation).HasMaxLength(2000);

                entity.Property(e => e.Parking).HasMaxLength(2000);

                entity.Property(e => e.PaxADL).HasMaxLength(255);

                entity.Property(e => e.PaxCHD).HasMaxLength(255);

                entity.Property(e => e.PaxINF).HasMaxLength(255);

                entity.Property(e => e.PaxXML)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.SaveTime).HasMaxLength(255);

                entity.Property(e => e.SavingTime).HasMaxLength(255);

                entity.Property(e => e.StationIncome).HasMaxLength(255);

                entity.Property(e => e.StationIncomeCurrency).HasMaxLength(2000);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Tag1).HasMaxLength(2000);

                entity.Property(e => e.Tag2).HasMaxLength(2000);

                entity.Property(e => e.Tag3).HasMaxLength(2000);

                entity.Property(e => e.TakeOff).HasMaxLength(255);

                entity.Property(e => e.TotalSeats).HasMaxLength(255);

                entity.Property(e => e.UpdateTime).HasMaxLength(255);

                entity.Property(e => e.UpdateUser).HasMaxLength(255);
            });

            modelBuilder.Entity<_FMISLEG>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_FMISLEG");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ArrTime).HasMaxLength(255);

                entity.Property(e => e.ArrTimeLCL).HasMaxLength(255);

                entity.Property(e => e.Change).HasMaxLength(255);

                entity.Property(e => e.ChangedCorrectedTime).HasMaxLength(255);

                entity.Property(e => e.Comment).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.DepTime).HasMaxLength(255);

                entity.Property(e => e.DepTimeLCL).HasMaxLength(255);

                entity.Property(e => e.Flt).HasMaxLength(255);

                entity.Property(e => e.FltGroup).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.Holyday).HasMaxLength(255);

                entity.Property(e => e.HolydayName).HasMaxLength(255);

                entity.Property(e => e.Importance).HasMaxLength(255);

                entity.Property(e => e.Key)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateScher).HasMaxLength(255);

                entity.Property(e => e.LastUpdateTime).HasMaxLength(255);

                entity.Property(e => e.LegDesc).HasMaxLength(255);

                entity.Property(e => e.NormalCorrectedTime).HasMaxLength(255);

                entity.Property(e => e.RouteType).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STC).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.ScheduleGroup).HasMaxLength(255);

                entity.Property(e => e.StandardTime).HasMaxLength(255);

                entity.Property(e => e.TurnType).HasMaxLength(255);

                entity.Property(e => e.UpdateFlag).HasMaxLength(255);
            });

            modelBuilder.Entity<_FMISLEG25>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_FMISLEG25");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ArrTime).HasMaxLength(255);

                entity.Property(e => e.ArrTimeLCL).HasMaxLength(255);

                entity.Property(e => e.Change).HasMaxLength(255);

                entity.Property(e => e.ChangedCorrectedTime).HasMaxLength(255);

                entity.Property(e => e.Comment).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.DepTime).HasMaxLength(255);

                entity.Property(e => e.DepTimeLCL).HasMaxLength(255);

                entity.Property(e => e.Flt).HasMaxLength(255);

                entity.Property(e => e.FltGroup).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.Holyday).HasMaxLength(255);

                entity.Property(e => e.HolydayName).HasMaxLength(255);

                entity.Property(e => e.Importance).HasMaxLength(255);

                entity.Property(e => e.LastUpdateScher).HasMaxLength(255);

                entity.Property(e => e.LastUpdateTime).HasMaxLength(255);

                entity.Property(e => e.LegDesc).HasMaxLength(255);

                entity.Property(e => e.NormalCorrectedTime).HasMaxLength(255);

                entity.Property(e => e.RouteType).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STC).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.ScheduleGroup).HasMaxLength(255);

                entity.Property(e => e.StandardTime).HasMaxLength(255);

                entity.Property(e => e.TurnType).HasMaxLength(255);

                entity.Property(e => e.UpdateFlag).HasMaxLength(255);
            });

            modelBuilder.Entity<_FMISREG>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_FMISREG");

                entity.Property(e => e.CabinRestClass).HasMaxLength(255);

                entity.Property(e => e.CrewRestClass).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(255);

                entity.Property(e => e.GanttShowOrder).HasMaxLength(255);

                entity.Property(e => e.Id).HasMaxLength(255);

                entity.Property(e => e.MaxCargoWeight).HasMaxLength(255);

                entity.Property(e => e.Owner).HasMaxLength(255);

                entity.Property(e => e.Real).HasMaxLength(255);

                entity.Property(e => e.Reg).HasMaxLength(255);

                entity.Property(e => e.Seat).HasMaxLength(255);

                entity.Property(e => e.SeatPlan).HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<_FMISTRN>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_FMISTRN");

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.CourseName).HasMaxLength(255);

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.CrewType).HasMaxLength(255);

                entity.Property(e => e.Date).HasMaxLength(255);

                entity.Property(e => e.Grade).HasMaxLength(255);

                entity.Property(e => e.ScheduleName).HasMaxLength(255);

                entity.Property(e => e.StartDate).HasMaxLength(255);

                entity.Property(e => e.Teacher).HasMaxLength(255);
            });

            modelBuilder.Entity<_IdxFDPItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_IdxFDPItem");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");
            });

            modelBuilder.Entity<_SC>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_SC");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.remark2)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_VFMISASSIGN>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_VFMISASSIGN", "vahid");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ArrTime).HasMaxLength(255);

                entity.Property(e => e.ArrTimeLCL).HasMaxLength(255);

                entity.Property(e => e.Change).HasMaxLength(255);

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.DepTime).HasMaxLength(255);

                entity.Property(e => e.DepTimeLCL).HasMaxLength(255);

                entity.Property(e => e.Flt).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.JobType).HasMaxLength(255);

                entity.Property(e => e.Pos).HasMaxLength(255);

                entity.Property(e => e.Position)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Rank).HasMaxLength(255);

                entity.Property(e => e.Route).HasMaxLength(255);

                entity.Property(e => e.RouteType).HasMaxLength(255);

                entity.Property(e => e.ScheduleGroup).HasMaxLength(255);

                entity.Property(e => e.Scheduler).HasMaxLength(255);

                entity.Property(e => e.StandardTime).HasMaxLength(255);

                entity.Property(e => e.TurnType).HasMaxLength(255);
            });

            modelBuilder.Entity<_VFMISCREW>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_VFMISCREW");

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.Active).HasMaxLength(255);

                entity.Property(e => e.Additional).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.AddressRegion).HasMaxLength(255);

                entity.Property(e => e.BaseStation).HasMaxLength(255);

                entity.Property(e => e.BirthDate).HasMaxLength(255);

                entity.Property(e => e.BirthPlace).HasMaxLength(255);

                entity.Property(e => e.BoxNo).HasMaxLength(255);

                entity.Property(e => e.CMCExpire).HasMaxLength(255);

                entity.Property(e => e.CellPhone).HasMaxLength(255);

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CrewType).HasMaxLength(255);

                entity.Property(e => e.DigitCode).HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.EmployeeNo).HasMaxLength(255);

                entity.Property(e => e.FLName).HasMaxLength(255);

                entity.Property(e => e.FName).HasMaxLength(255);

                entity.Property(e => e.FScheduleName).HasMaxLength(255);

                entity.Property(e => e.Faddress).HasMaxLength(255);

                entity.Property(e => e.FatherName).HasMaxLength(255);

                entity.Property(e => e.Fax).HasMaxLength(255);

                entity.Property(e => e.Ffname).HasMaxLength(255);

                entity.Property(e => e.Gender).HasMaxLength(255);

                entity.Property(e => e.HireDate).HasMaxLength(255);

                entity.Property(e => e.Id).HasMaxLength(255);

                entity.Property(e => e.IdNo).HasMaxLength(255);

                entity.Property(e => e.InstructorType).HasMaxLength(255);

                entity.Property(e => e.JobPosition).HasMaxLength(255);

                entity.Property(e => e.JobShift).HasMaxLength(255);

                entity.Property(e => e.L4Expire).HasMaxLength(255);

                entity.Property(e => e.LName).HasMaxLength(255);

                entity.Property(e => e.LastDoctor).HasMaxLength(255);

                entity.Property(e => e.LastFltTime).HasMaxLength(255);

                entity.Property(e => e.LicenceExpire).HasMaxLength(255);

                entity.Property(e => e.LicenceNo).HasMaxLength(255);

                entity.Property(e => e.MedicalAudio).HasMaxLength(255);

                entity.Property(e => e.MedicalCheckup).HasMaxLength(255);

                entity.Property(e => e.MedicalECG).HasMaxLength(255);

                entity.Property(e => e.MedicalExpire).HasMaxLength(255);

                entity.Property(e => e.MedicalHistory).HasMaxLength(255);

                entity.Property(e => e.MultiType).HasMaxLength(255);

                entity.Property(e => e.NationalNo).HasMaxLength(255);

                entity.Property(e => e.Native).HasMaxLength(255);

                entity.Property(e => e.PassportExpire).HasMaxLength(255);

                entity.Property(e => e.PassportNo).HasMaxLength(255);

                entity.Property(e => e.Phone).HasMaxLength(255);

                entity.Property(e => e.ProductiveDate).HasMaxLength(255);

                entity.Property(e => e.ProficiencyExpire).HasMaxLength(255);

                entity.Property(e => e.RampPassExpire).HasMaxLength(255);

                entity.Property(e => e.RampPassNo).HasMaxLength(255);

                entity.Property(e => e.ScheduleName).HasMaxLength(255);

                entity.Property(e => e.Seniority).HasMaxLength(255);

                entity.Property(e => e.SetGroup).HasMaxLength(255);

                entity.Property(e => e.Simulator8MonthCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorAnnual).HasMaxLength(255);

                entity.Property(e => e.SimulatorAnnualCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorLastCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorNextCheck).HasMaxLength(255);

                entity.Property(e => e.Skill).HasMaxLength(255);

                entity.Property(e => e.Training_Seat_Los).HasMaxLength(255);

                entity.Property(e => e.Training_Seat_Rev).HasMaxLength(255);

                entity.Property(e => e.Training_Seat_Tre_).HasMaxLength(255);
            });

            modelBuilder.Entity<_VFMISTRN>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_VFMISTRN");

                entity.Property(e => e.CourseName).HasMaxLength(255);

                entity.Property(e => e.CrewType).HasMaxLength(255);

                entity.Property(e => e.Date).HasMaxLength(255);

                entity.Property(e => e.ScheduleName).HasMaxLength(255);

                entity.Property(e => e.crew).HasMaxLength(255);
            });

            modelBuilder.Entity<_ViewFDP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_ViewFDP");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FDPEnd).HasColumnType("datetime");

                entity.Property(e => e.FDPEndLocal).HasColumnType("datetime");

                entity.Property(e => e.FDPStart).HasColumnType("datetime");

                entity.Property(e => e.FDPStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.StandByStartLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<_ViewFlightsGantt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_ViewFlightsGantt");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.BaseIATA).HasMaxLength(255);

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.CPISCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPP2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPRegister)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CPSCCM)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelReason).HasMaxLength(1000);

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FlightStatusBgColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusClass).HasMaxLength(255);

                entity.Property(e => e.FlightStatusColor).HasMaxLength(255);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeAbr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportCity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FromAirportName).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.GWLand).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.GWTO).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LinkedFlightNumber).HasMaxLength(50);

                entity.Property(e => e.LinkedReasonTitle).HasMaxLength(1000);

                entity.Property(e => e.LinkedRemark).HasMaxLength(500);

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.OAircraftType).HasMaxLength(255);

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampReason).HasMaxLength(1000);

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectReason).HasMaxLength(1000);

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.Register).HasMaxLength(53);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STAPlanned).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.STDPlanned).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.ToAirportName).HasMaxLength(500);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.from).HasMaxLength(255);

                entity.Property(e => e.notes)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.startDate).HasColumnType("datetime");

                entity.Property(e => e.taskName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.to).HasMaxLength(255);
            });

            modelBuilder.Entity<_ViewLegTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_ViewLegTime");

                entity.Property(e => e.ActualFlightMOffBlock).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.ActualFlightMTakeoff).HasColumnType("numeric(21, 6)");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FPFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JLLanding).HasColumnType("datetime");

                entity.Property(e => e.JLOffBlock).HasColumnType("datetime");

                entity.Property(e => e.JLOnBlock).HasColumnType("datetime");

                entity.Property(e => e.JLTakeOff).HasColumnType("datetime");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.OSTA).HasColumnType("datetime");

                entity.Property(e => e.OToAirportIATA)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STADay).HasColumnType("date");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STAPlanned).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.STDPlanned).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.duration).HasColumnType("numeric(19, 6)");

                entity.Property(e => e.from).HasMaxLength(255);

                entity.Property(e => e.notes)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.startDate).HasColumnType("datetime");

                entity.Property(e => e.taskName).HasMaxLength(904);

                entity.Property(e => e.to).HasMaxLength(255);
            });

            modelBuilder.Entity<_WeatherTafADD>(entity =>
            {
                entity.ToTable("_WeatherTafADDS");

                entity.Property(e => e.BulletinTime).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.EvaluationM).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.IssueTime).HasColumnType("datetime");

                entity.Property(e => e.Latitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.RawText)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.StationId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValidTimeFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTimeTo).HasColumnType("datetime");
            });

            modelBuilder.Entity<_XCREW>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_XCREW");

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.Active).HasMaxLength(255);

                entity.Property(e => e.Additional).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.AddressRegion).HasMaxLength(255);

                entity.Property(e => e.BaseStation).HasMaxLength(255);

                entity.Property(e => e.BirthDate).HasMaxLength(255);

                entity.Property(e => e.BirthPlace).HasMaxLength(255);

                entity.Property(e => e.BoxNo).HasMaxLength(255);

                entity.Property(e => e.CMCExpire).HasMaxLength(255);

                entity.Property(e => e.CellPhone).HasMaxLength(255);

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CrewType).HasMaxLength(255);

                entity.Property(e => e.DigitCode).HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.EmployeeNo).HasMaxLength(255);

                entity.Property(e => e.FLName).HasMaxLength(255);

                entity.Property(e => e.FName).HasMaxLength(255);

                entity.Property(e => e.FScheduleName).HasMaxLength(255);

                entity.Property(e => e.Faddress).HasMaxLength(255);

                entity.Property(e => e.FatherName).HasMaxLength(255);

                entity.Property(e => e.Fax).HasMaxLength(255);

                entity.Property(e => e.Ffname).HasMaxLength(255);

                entity.Property(e => e.Gender).HasMaxLength(255);

                entity.Property(e => e.HireDate).HasMaxLength(255);

                entity.Property(e => e.Id).HasMaxLength(255);

                entity.Property(e => e.IdNo).HasMaxLength(255);

                entity.Property(e => e.InstructorType).HasMaxLength(255);

                entity.Property(e => e.JobPosition).HasMaxLength(255);

                entity.Property(e => e.JobShift).HasMaxLength(255);

                entity.Property(e => e.L4Expire).HasMaxLength(255);

                entity.Property(e => e.LName).HasMaxLength(255);

                entity.Property(e => e.LastDoctor).HasMaxLength(255);

                entity.Property(e => e.LastFltTime).HasMaxLength(255);

                entity.Property(e => e.LicenceExpire).HasMaxLength(255);

                entity.Property(e => e.LicenceNo).HasMaxLength(255);

                entity.Property(e => e.MedicalAudio).HasMaxLength(255);

                entity.Property(e => e.MedicalCheckup).HasMaxLength(255);

                entity.Property(e => e.MedicalECG).HasMaxLength(255);

                entity.Property(e => e.MedicalExpire).HasMaxLength(255);

                entity.Property(e => e.MedicalHistory).HasMaxLength(255);

                entity.Property(e => e.MultiType).HasMaxLength(255);

                entity.Property(e => e.NationalNo).HasMaxLength(255);

                entity.Property(e => e.Native).HasMaxLength(255);

                entity.Property(e => e.PassportExpire).HasMaxLength(255);

                entity.Property(e => e.PassportNo).HasMaxLength(255);

                entity.Property(e => e.Phone).HasMaxLength(255);

                entity.Property(e => e.ProductiveDate).HasMaxLength(255);

                entity.Property(e => e.ProficiencyExpire).HasMaxLength(255);

                entity.Property(e => e.RampPassExpire).HasMaxLength(255);

                entity.Property(e => e.RampPassNo).HasMaxLength(255);

                entity.Property(e => e.ScheduleName).HasMaxLength(255);

                entity.Property(e => e.Seniority).HasMaxLength(255);

                entity.Property(e => e.SetGroup).HasMaxLength(255);

                entity.Property(e => e.Simulator8MonthCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorAnnual).HasMaxLength(255);

                entity.Property(e => e.SimulatorAnnualCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorLastCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorNextCheck).HasMaxLength(255);

                entity.Property(e => e.Skill).HasMaxLength(255);

                entity.Property(e => e.Training_Seat_Los).HasMaxLength(255);

                entity.Property(e => e.Training_Seat_Rev).HasMaxLength(255);

                entity.Property(e => e.Training_Seat_Tre_).HasMaxLength(255);
            });

            modelBuilder.Entity<_XFDP>(entity =>
            {
                entity.ToTable("_XFDP");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.FDP)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitEnd).HasColumnType("datetime");

                entity.Property(e => e.InitFlights)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitGroup)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRank)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitRestTo).HasColumnType("datetime");

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitSchedule)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitStart).HasColumnType("datetime");

                entity.Property(e => e.Key)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UPD)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_XFDPITEM>(entity =>
            {
                entity.ToTable("_XFDPITEM");

                entity.Property(e => e.FDP)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Leg)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.UPD)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_XFLT>(entity =>
            {
                entity.HasKey(e => new { e.DateUTC, e.FltNo, e.DepStn, e.ArrStn })
                    .HasName("PK___XFLT__AC5E205AEB2EFCAB");

                entity.ToTable("_XFLT");

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ATA).HasMaxLength(255);

                entity.Property(e => e.ATD).HasMaxLength(255);

                entity.Property(e => e.AlternateStation).HasMaxLength(255);

                entity.Property(e => e.BagPiece).HasMaxLength(255);

                entity.Property(e => e.Baggage).HasMaxLength(255);

                entity.Property(e => e.CargoPiece).HasMaxLength(255);

                entity.Property(e => e.CargoUnit).HasMaxLength(255);

                entity.Property(e => e.CargoWeight).HasMaxLength(255);

                entity.Property(e => e.DelayReason).HasMaxLength(255);

                entity.Property(e => e.Distance).HasMaxLength(255);

                entity.Property(e => e.ExtraBag).HasMaxLength(255);

                entity.Property(e => e.ExtraBagAmount).HasMaxLength(255);

                entity.Property(e => e.ExtraBagPiece).HasMaxLength(255);

                entity.Property(e => e.Female).HasMaxLength(255);

                entity.Property(e => e.FlightCharterer).HasMaxLength(255);

                entity.Property(e => e.FlightNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightType).HasMaxLength(255);

                entity.Property(e => e.FuelDefuel).HasMaxLength(255);

                entity.Property(e => e.FuelRemain).HasMaxLength(255);

                entity.Property(e => e.FuelTaxi).HasMaxLength(255);

                entity.Property(e => e.FuelTotal).HasMaxLength(255);

                entity.Property(e => e.FuelTrip).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(255);

                entity.Property(e => e.FuelUpLift).HasMaxLength(255);

                entity.Property(e => e.Key)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Male).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.OnRunway).HasMaxLength(255);

                entity.Property(e => e.OverPax).HasMaxLength(255);

                entity.Property(e => e.PAXStation).HasMaxLength(255);

                entity.Property(e => e.Parking).HasMaxLength(255);

                entity.Property(e => e.PaxADL).HasMaxLength(255);

                entity.Property(e => e.PaxCHD).HasMaxLength(255);

                entity.Property(e => e.PaxINF).HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.SaveTime).HasMaxLength(255);

                entity.Property(e => e.SavingTime).HasMaxLength(255);

                entity.Property(e => e.StationIncome).HasMaxLength(255);

                entity.Property(e => e.StationIncomeCurrency).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Tag1).HasMaxLength(2000);

                entity.Property(e => e.Tag2).HasMaxLength(2000);

                entity.Property(e => e.Tag3).HasMaxLength(2000);

                entity.Property(e => e.TakeOff).HasMaxLength(255);

                entity.Property(e => e.TotalSeats).HasMaxLength(255);

                entity.Property(e => e.UpdateTime).HasMaxLength(255);

                entity.Property(e => e.UpdateUser).HasMaxLength(255);
            });

            modelBuilder.Entity<_XL>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_XLS");

                entity.Property(e => e.Arr_Stn)
                    .HasMaxLength(255)
                    .HasColumnName("Arr Stn");

                entity.Property(e => e.Block_Time)
                    .HasMaxLength(255)
                    .HasColumnName("Block Time");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.Crew_Type)
                    .HasMaxLength(255)
                    .HasColumnName("Crew Type");

                entity.Property(e => e.Dep_Stn)
                    .HasMaxLength(255)
                    .HasColumnName("Dep Stn");

                entity.Property(e => e.Flight_Time)
                    .HasMaxLength(255)
                    .HasColumnName("Flight Time");

                entity.Property(e => e.Flt_No)
                    .HasMaxLength(255)
                    .HasColumnName("Flt No");

                entity.Property(e => e.Int__Flt)
                    .HasMaxLength(255)
                    .HasColumnName("Int. Flt");

                entity.Property(e => e.Job_Type)
                    .HasMaxLength(255)
                    .HasColumnName("Job Type");

                entity.Property(e => e.Office_Time)
                    .HasMaxLength(255)
                    .HasColumnName("Office Time");

                entity.Property(e => e.Pay_Time)
                    .HasMaxLength(255)
                    .HasColumnName("Pay Time");

                entity.Property(e => e.Pos).HasMaxLength(255);

                entity.Property(e => e.Reg).HasMaxLength(255);

                entity.Property(e => e.STBTime).HasMaxLength(255);

                entity.Property(e => e.Standard_Time)
                    .HasMaxLength(255)
                    .HasColumnName("Standard Time");

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.TRNTime).HasMaxLength(255);

                entity.Property(e => e._UTC_Date)
                    .HasMaxLength(255)
                    .HasColumnName(" UTC Date");

                entity.Property(e => e.f15).HasMaxLength(255);

                entity.Property(e => e.f16).HasMaxLength(255);

                entity.Property(e => e.f21).HasMaxLength(255);

                entity.Property(e => e.f26).HasMaxLength(255);

                entity.Property(e => e.f3).HasMaxLength(255);

                entity.Property(e => e.f6).HasMaxLength(255);

                entity.Property(e => e.f8).HasMaxLength(255);
            });

            modelBuilder.Entity<_XLEG>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_XLEG");

                entity.HasIndex(e => e.Key, "idx_xleg");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ArrTime).HasMaxLength(255);

                entity.Property(e => e.ArrTimeLCL).HasMaxLength(255);

                entity.Property(e => e.Change).HasMaxLength(255);

                entity.Property(e => e.ChangedCorrectedTime).HasMaxLength(255);

                entity.Property(e => e.Comment).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.DepTime).HasMaxLength(255);

                entity.Property(e => e.DepTimeLCL).HasMaxLength(255);

                entity.Property(e => e.FlightNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Flt).HasMaxLength(255);

                entity.Property(e => e.FltGroup).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.Holyday).HasMaxLength(255);

                entity.Property(e => e.HolydayName).HasMaxLength(255);

                entity.Property(e => e.Importance).HasMaxLength(255);

                entity.Property(e => e.Key)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateScher).HasMaxLength(255);

                entity.Property(e => e.LastUpdateTime).HasMaxLength(255);

                entity.Property(e => e.LegDesc).HasMaxLength(255);

                entity.Property(e => e.NormalCorrectedTime).HasMaxLength(255);

                entity.Property(e => e.RouteType).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STC).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.ScheduleGroup).HasMaxLength(255);

                entity.Property(e => e.StandardTime).HasMaxLength(255);

                entity.Property(e => e.TurnType).HasMaxLength(255);

                entity.Property(e => e.UpdateFlag).HasMaxLength(255);
            });

            modelBuilder.Entity<_XLEGASSIGN>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_XLEGASSIGN");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ArrTime).HasMaxLength(255);

                entity.Property(e => e.ArrTimeLCL).HasMaxLength(255);

                entity.Property(e => e.Change).HasMaxLength(255);

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.DepTime).HasMaxLength(255);

                entity.Property(e => e.DepTimeLCL).HasMaxLength(255);

                entity.Property(e => e.Expr1).HasMaxLength(255);

                entity.Property(e => e.Flt).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.InitGroup)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitRank)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.JobType).HasMaxLength(255);

                entity.Property(e => e.Key)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.Pos).HasMaxLength(255);

                entity.Property(e => e.Rank).HasMaxLength(255);

                entity.Property(e => e.Route).HasMaxLength(255);

                entity.Property(e => e.RouteType).HasMaxLength(255);

                entity.Property(e => e.ScheduleGroup).HasMaxLength(255);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Scheduler).HasMaxLength(255);

                entity.Property(e => e.StandardTime).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.TurnType).HasMaxLength(255);
            });

            modelBuilder.Entity<_XLS2>(entity =>
            {
                entity.HasKey(e => e.RN)
                    .HasName("PK___XLS2__321537C210963310");

                entity.ToTable("_XLS2");

                entity.Property(e => e.RN).ValueGeneratedNever();

                entity.Property(e => e.ArrStn)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Crew)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CrewType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Date)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DepStn)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FltNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pos)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Reg)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_XML>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_XML");

                entity.Property(e => e.ACReg).HasMaxLength(255);

                entity.Property(e => e.ACType).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ArrTime).HasMaxLength(255);

                entity.Property(e => e.BRFTime).HasMaxLength(255);

                entity.Property(e => e.BlockTime).HasMaxLength(255);

                entity.Property(e => e.Change).HasMaxLength(255);

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.CrewType).HasMaxLength(255);

                entity.Property(e => e.DateUTC).HasMaxLength(255);

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.DepTime).HasMaxLength(255);

                entity.Property(e => e.FixTime).HasMaxLength(255);

                entity.Property(e => e.FlightTime).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.IntFlt).HasMaxLength(255);

                entity.Property(e => e.JalaliUTCDate).HasMaxLength(255);

                entity.Property(e => e.JobPosition).HasMaxLength(255);

                entity.Property(e => e.JobType).HasMaxLength(255);

                entity.Property(e => e.Landing).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OfficeTime).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.PaymentTime).HasMaxLength(255);

                entity.Property(e => e.Pos).HasMaxLength(255);

                entity.Property(e => e.Route).HasMaxLength(255);

                entity.Property(e => e.STA).HasMaxLength(255);

                entity.Property(e => e.STBTime).HasMaxLength(255);

                entity.Property(e => e.STD).HasMaxLength(255);

                entity.Property(e => e.ScheduleName).HasMaxLength(255);

                entity.Property(e => e.StandardTime).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.TRNTime).HasMaxLength(255);

                entity.Property(e => e.TakeOff).HasMaxLength(255);
            });

            modelBuilder.Entity<__MigrationHistory>(entity =>
            {
                entity.HasKey(e => new { e.MigrationId, e.ContextKey })
                    .HasName("PK_dbo.__MigrationHistory");

                entity.ToTable("__MigrationHistory");

                entity.Property(e => e.MigrationId).HasMaxLength(150);

                entity.Property(e => e.ContextKey).HasMaxLength(300);

                entity.Property(e => e.Model).IsRequired();

                entity.Property(e => e.ProductVersion)
                    .IsRequired()
                    .HasMaxLength(32);
            });

            modelBuilder.Entity<_dool>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_dool");

                entity.Property(e => e.CDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<_fsg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_fsg");

                entity.Property(e => e.Birth).HasColumnType("date");

                entity.Property(e => e.FristName).HasMaxLength(255);

                entity.Property(e => e.ID).HasMaxLength(255);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.N1).HasMaxLength(255);

                entity.Property(e => e.N2).HasMaxLength(255);

                entity.Property(e => e.Post).HasMaxLength(255);
            });

            modelBuilder.Entity<_h2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_h2");

                entity.Property(e => e.CDate).HasColumnType("datetime");

                entity.Property(e => e.DatePart).HasColumnType("date");
            });

            modelBuilder.Entity<_index>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_index");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.sta).HasColumnType("datetime");

                entity.Property(e => e.std).HasColumnType("datetime");
            });

            modelBuilder.Entity<_passcockpit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_passcockpit");

                entity.Property(e => e.FIRSTNAME).HasMaxLength(255);

                entity.Property(e => e.LASTNAME).HasMaxLength(255);

                entity.Property(e => e.NID).HasMaxLength(255);
            });

            modelBuilder.Entity<_tempname>(entity =>
            {
                entity.ToTable("_tempname");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.FirstName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NID)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<dood>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("dood");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.CCM1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CCM2Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CCM3Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CCM4Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CCM5Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CHECK1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CHECK2Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Color1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Color2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Duration)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FSTA)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FSTALocal)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FSTD)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FSTDLocal)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIATA).HasMaxLength(255);

                entity.Property(e => e.IP1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IP2Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ISCCM1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OBS1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OBS2Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P11Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P12Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P13Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P14Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P15Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P21Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P22Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P23Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P24Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.P25Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.SCCM1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SCCM2Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SCCM3Name)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SCCM4Name)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SCCM5Name)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.STA).HasColumnType("datetime");

                entity.Property(e => e.STALocal).HasColumnType("datetime");

                entity.Property(e => e.STD).HasColumnType("datetime");

                entity.Property(e => e.STDDay).HasColumnType("date");

                entity.Property(e => e.STDLocal).HasColumnType("datetime");

                entity.Property(e => e.Safety1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Safety2Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIATA).HasMaxLength(255);
            });

            modelBuilder.Entity<journals2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("journals2");

                entity.Property(e => e.Title).HasMaxLength(2000);

                entity.Property(e => e.Title2).HasMaxLength(500);
            });

            modelBuilder.Entity<newbl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("newbl");

                entity.Property(e => e.DES)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ORG)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<updbl2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("updbl2");

                entity.Property(e => e.DES)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ORG)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<xy>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("xy");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
